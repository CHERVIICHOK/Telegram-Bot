import logging
from typing import List, Dict, Any
from aiogram import Bot

from database.preorder_db import preorder_db
from database.users.database import add_to_cart
from database.users.warehouse_connection import get_product_by_id

import os

logger = logging.getLogger(__name__)


class PreorderProcessor:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def check_and_process_preorders(self, category: str, product_name: str, flavor: str,
                                          warehouse_product_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤
            preorder_product = preorder_db.get_product_details(category, product_name, flavor)

            if not preorder_product:
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–º –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
            users_with_preorders = self._get_users_with_preorder(preorder_product['id'])

            if not users_with_preorders:
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å–æ —Å–∫–ª–∞–¥–∞
            warehouse_product = get_product_by_id(warehouse_product_id)
            if not warehouse_product:
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user_id in users_with_preorders:
                await self._process_user_preorder(
                    user_id,
                    preorder_product,
                    warehouse_product,
                    warehouse_product_id
                )

            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –≤ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞—Ö
            preorder_db.delete_preorder_product(preorder_product['id'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤: {e}")

    def _get_users_with_preorder(self, product_id: int) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–º –Ω–∞ —Ç–æ–≤–∞—Ä"""
        import sqlite3
        users = []
        try:
            with sqlite3.connect(preorder_db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT DISTINCT user_id 
                    FROM user_preorders 
                    WHERE product_id = ? AND status = 'active'
                ''', (product_id,))
                users = [row[0] for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–º: {e}")
        return users

    async def _process_user_preorder(self, user_id: int, preorder_product: Dict[str, Any],
                                     warehouse_product: tuple, warehouse_product_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if add_to_cart(user_id, warehouse_product_id, quantity=1):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self._send_notification(
                    user_id,
                    preorder_product,
                    warehouse_product,
                    warehouse_product_id
                )

                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑
                preorder_db.cancel_preorder(user_id, preorder_product['id'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def _send_notification(self, user_id: int, preorder_product: Dict[str, Any],
                                 warehouse_product: tuple, warehouse_product_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            (product_id, category, product_name, product_full_name,
             flavor, price, description, quantity, image_path) = warehouse_product

            text = (
                "üéâ <b>–û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å!</b>\n\n"
                f"–¢–æ–≤–∞—Ä –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ —Å–∫–ª–∞–¥:\n\n"
                f"üì¶ <b>{product_full_name}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n\n"
                "‚úÖ –¢–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è!"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            from aiogram.types import InlineKeyboardButton

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É",
                    callback_data="cart:show"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä",
                    callback_data=f"catalog:{category}:{product_name}:{warehouse_product_id}"
                )
            )

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
            if image_path and os.path.exists(image_path):
                try:
                    from aiogram.types import FSInputFile
                    photo = FSInputFile(image_path)
                    await self.bot.send_photo(
                        user_id,
                        photo=photo,
                        caption=text,
                        parse_mode="HTML",
                        reply_markup=builder.as_markup()
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
                    await self.bot.send_message(
                        user_id,
                        text,
                        parse_mode="HTML",
                        reply_markup=builder.as_markup()
                    )
            else:
                await self.bot.send_message(
                    user_id,
                    text,
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


preorder_processor = None


def init_preorder_processor(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤"""
    global preorder_processor
    preorder_processor = PreorderProcessor(bot)
    return preorder_processor
