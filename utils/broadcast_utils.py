import json
from typing import List, Dict, Any, Tuple, Optional
from datetime import datetime
import re


def format_broadcast_message(text: str, product_data: Optional[Dict] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã."""
    if not product_data:
        return text

    # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    replacements = {
        "{product_name}": product_data.get("product_name", ""),
        "{product_full_name}": product_data.get("product_full_name", ""),
        "{price}": str(product_data.get("price", "")),
        "{description}": product_data.get("description", ""),
        "{category}": product_data.get("category", "")
    }

    for placeholder, value in replacements.items():
        text = text.replace(placeholder, value)

    return text


def parse_button_data(text: str) -> List[Dict[str, str]]:
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—Ç–µ–∫—Å—Ç|url'."""
    buttons = []
    lines = text.strip().split('\n')

    for line in lines:
        parts = line.split('|', 1)
        if len(parts) == 2:
            button_text = parts[0].strip()
            button_url = parts[1].strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
            if button_url.startswith("http://") or button_url.startswith("https://"):
                buttons.append({
                    "text": button_text,
                    "url": button_url
                })

    return buttons


def validate_buttons_format(text: str) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–æ–ø–æ–∫."""
    if not text.strip():
        return True, ""

    lines = text.strip().split('\n')

    for i, line in enumerate(lines, 1):
        parts = line.split('|', 1)
        if len(parts) != 2:
            return False, f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å '—Ç–µ–∫—Å—Ç|url'"

        button_text = parts[0].strip()
        button_url = parts[1].strip()

        if not button_text:
            return False, f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}: —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

        if not (button_url.startswith("http://") or button_url.startswith("https://")):
            return False, f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}: URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"

    return True, ""


def format_broadcast_preview(broadcast_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    message_text = broadcast_data.get("text", "")
    target_type = broadcast_data.get("target_type", "all")
    recipients_count = broadcast_data.get("total_recipients", 0)

    target_description = {
        "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "active": f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {broadcast_data.get('active_days', 30)} –¥–Ω–µ–π",
        "region": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞: {broadcast_data.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    }.get(target_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")

    preview = (
        f"üì§ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
        f"{message_text}\n\n"
        f"üë• <b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b> {target_description}\n"
        f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {recipients_count}"
    )

    media_type = broadcast_data.get("media_type")
    if media_type:
        media_description = "–§–æ—Ç–æ" if media_type == "photo" else "–§–∞–π–ª"
        preview += f"\nüìé <b>–í–ª–æ–∂–µ–Ω–∏–µ:</b> {media_description}"

    buttons = broadcast_data.get("buttons", [])
    if buttons:
        preview += "\nüîò <b>–ö–Ω–æ–ø–∫–∏:</b> –î–∞"

    return preview


def format_broadcast_history_item(broadcast: tuple) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    broadcast_id, message_text, target_type, sent_count, total_recipients, status, created_at, sent_at = broadcast

    if isinstance(created_at, str):
        created_date = created_at
    else:
        created_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    if isinstance(sent_at, str) and sent_at:
        sent_date = sent_at
    else:
        sent_date = "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"

    status_text = {
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        "pending": "üïí –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
        "failed": "‚ùå –û—à–∏–±–∫–∞",
        "canceled": "‚õî –û—Ç–º–µ–Ω–µ–Ω–∞"
    }.get(status, status)

    target_text = {
        "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "region": "–ü–æ —Ä–µ–≥–∏–æ–Ω—É"
    }.get(target_type, target_type)

    # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(message_text) > 100:
        message_preview = message_text[:97] + "..."
    else:
        message_preview = message_text

    return (
        f"üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id}</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b> {message_preview}\n"
        f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {target_text}\n"
        f"üìä <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {sent_count}/{total_recipients}\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_date}\n"
        f"üìÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:</b> {sent_date}\n"
        f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}"
    )


def format_broadcast_details(broadcast: tuple) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ."""
    (broadcast_id, message_text, media_type, media_file, buttons_json,
     target_type, target_params, sent_count, total_recipients,
     status, created_at, sent_at) = broadcast

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON –≤ –æ–±—ä–µ–∫—Ç—ã Python
    try:
        buttons = json.loads(buttons_json) if buttons_json else []
        target_params = json.loads(target_params) if target_params else {}
    except json.JSONDecodeError:
        buttons = []
        target_params = {}

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    status_text = {
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        "pending": "üïí –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
        "failed": "‚ùå –û—à–∏–±–∫–∞",
        "canceled": "‚õî –û—Ç–º–µ–Ω–µ–Ω–∞"
    }.get(status, status)

    target_text = {
        "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "active": f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {target_params.get('days', 30)} –¥–Ω–µ–π",
        "region": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞: {target_params.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    }.get(target_type, target_type)

    if isinstance(created_at, str):
        created_date = created_at
    else:
        created_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    if isinstance(sent_at, str) and sent_at:
        sent_date = sent_at
    else:
        sent_date = "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"

    media_info = ""
    if media_type:
        media_text = "–§–æ—Ç–æ" if media_type == "photo" else "–§–∞–π–ª"
        media_info = f"üìé <b>–í–ª–æ–∂–µ–Ω–∏–µ:</b> {media_text}\n"

    buttons_info = ""
    if buttons:
        buttons_count = len(buttons)
        buttons_info = f"üîò <b>–ö–Ω–æ–ø–∫–∏:</b> {buttons_count}\n"

    delivery_rate = (sent_count / total_recipients * 100) if total_recipients > 0 else 0

    return (
        f"üì§ <b>–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ #{broadcast_id}</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n{message_text}\n\n"
        f"{media_info}"
        f"{buttons_info}"
        f"üë• <b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b> {target_text}\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {sent_count}/{total_recipients} ({delivery_rate:.1f}%)\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_date}\n"
        f"üìÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:</b> {sent_date}\n"
        f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}"
    )


def parse_scheduled_time(time_string: str) -> Optional[datetime]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç datetime."""
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ –ß–ß:–ú–ú (—Å–µ–≥–æ–¥–Ω—è)
    time_string = time_string.strip()

    # –§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (—Å–µ–≥–æ–¥–Ω—è)
    time_pattern = re.compile(r'^([01]?[0-9]|2[0-3]):([0-5][0-9])$')
    match = time_pattern.match(time_string)
    if match:
        hour, minute = map(int, match.groups())
        now = datetime.now()
        scheduled_time = datetime(now.year, now.month, now.day, hour, minute)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if scheduled_time < now:
            scheduled_time = scheduled_time.replace(day=now.day + 1)

        return scheduled_time

    # –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
    date_time_pattern = re.compile(r'^(\d{2})\.(\d{2})\.(\d{4}) ([01]?[0-9]|2[0-3]):([0-5][0-9])$')
    match = date_time_pattern.match(time_string)
    if match:
        day, month, year, hour, minute = map(int, match.groups())
        try:
            return datetime(year, month, day, hour, minute)
        except ValueError:
            return None

    return None