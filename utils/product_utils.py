from typing import Dict, Any, Optional, Tuple


def format_product_details(product: tuple) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if not product or len(product) < 9:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    product_id, category, product_name, product_full_name, flavor, price, description, quantity, image_path = product[
                                                                                                              :9]
    is_active = product[9] if len(product) > 9 else 1

    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

    return (
        f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product_full_name}\n"
        f"üîç <b>ID:</b> {product_id}\n"
        f"üóÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_name}\n"
        f"üç¨ <b>–í–∫—É—Å:</b> {flavor}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n"
        f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b> {quantity} —à—Ç.\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"üñº <b>–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:</b> {image_path or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}"
    )


def validate_product_data(field: str, value: str) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞."""
    if field == "category" and not value.strip():
        return False, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"

    if field == "product_name" and not value.strip():
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

    if field == "price":
        try:
            price = float(value)
            if price < 0:
                return False, "–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π"
        except ValueError:
            return False, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º"

    if field == "quantity":
        try:
            quantity = int(value)
            if quantity < 0:
                return False, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
        except ValueError:
            return False, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"

    return True, "–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã"


def prepare_product_data(field: str, value: str, product_data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    data = product_data or {}

    if field == "price":
        data[field] = float(value)
    elif field == "quantity":
        data[field] = int(value)
    else:
        data[field] = value

    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –í–∫—É—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if field in ["product_name", "flavor"] and ("product_name" in data or "flavor" in data):
        product_name = data.get("product_name", "")
        flavor = data.get("flavor", "")
        if product_name and flavor:
            data["product_full_name"] = f"{product_name} {flavor}"

    return data


def get_field_description(field: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞."""
    descriptions = {
        "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        "product_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        "flavor": "–í–∫—É—Å —Ç–æ–≤–∞—Ä–∞",
        "price": "—Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö)",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        "quantity": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ",
        "image_path": "–ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞"
    }
    return descriptions.get(field, field)


def get_field_prompt(field: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è."""
    prompts = {
        "category": "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
        "product_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        "flavor": "–í–≤–µ–¥–∏—Ç–µ –í–∫—É—Å —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):",
        "price": "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        "description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        "quantity": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:",
        "image_path": "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    }
    return prompts.get(field, f"–í–≤–µ–¥–∏—Ç–µ {field}:")