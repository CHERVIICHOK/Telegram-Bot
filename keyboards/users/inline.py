from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import math
from utils.catalog_mapping import catalog_mapping


def create_paginated_keyboard(items, current_page=1, items_per_page=10, callback_prefix="item",
                              back_callback="back", show_back=True):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    :param items: —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    :param current_page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param items_per_page: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :param callback_prefix: –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
    :param back_callback: callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    :param show_back: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    """
    keyboard = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if not items:
        if show_back:
            keyboard.append([InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=back_callback
            )])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = math.ceil(len(items) / items_per_page)
    current_page = min(max(1, current_page), total_pages)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (current_page - 1) * items_per_page
    page_items = items[start_idx:start_idx + items_per_page]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for item in page_items:
        if isinstance(item, tuple) and len(item) >= 2:  # –ï—Å–ª–∏ item - –∫–æ—Ä—Ç–µ–∂ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ id
            name, item_id = item[0], item[1]
            keyboard.append([InlineKeyboardButton(
                text=name,
                callback_data=f"{callback_prefix}:{item_id}"
            )])
        else:  # –ï—Å–ª–∏ item - –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
            keyboard.append([InlineKeyboardButton(
                text=item,
                callback_data=f"{callback_prefix}:{item}"
            )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    if current_page > 1:
        nav_row.append(InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"page:{callback_prefix}:{current_page - 1}"
        ))
    else:
        nav_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

    nav_row.append(InlineKeyboardButton(
        text=f"{current_page}/{total_pages}",
        callback_data="noop"
    ))

    if current_page < total_pages:
        nav_row.append(InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=f"page:{callback_prefix}:{current_page + 1}"
        ))
    else:
        nav_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

    keyboard.append(nav_row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if show_back:
        keyboard.append([InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=back_callback
        )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_cart_keyboard(current_quantity, current_index, total_items, stock_quantity, product_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    keyboard = []

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    quantity_row = [
        InlineKeyboardButton(text="‚ûñ", callback_data=f"cart:dec:{product_id}"),
        InlineKeyboardButton(text=f"{current_quantity}", callback_data="no_action"),
        InlineKeyboardButton(
            text="‚ûï" if current_quantity < stock_quantity else "",
            callback_data=f"cart:inc:{product_id}" if current_quantity < stock_quantity else "no_action"
        )
    ]
    keyboard.append(quantity_row)
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ—Ä–∑–∏–Ω–µ
    navigation_row = [
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è" if current_index > 0 else " ",
            callback_data="cart:prev" if current_index > 0 else "no_action"
        ),
        InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä",
            callback_data=f"cart:del:{product_id}"
        ),
        InlineKeyboardButton(
            text="‚û°Ô∏è" if current_index < total_items - 1 else " ",
            callback_data="cart:next" if current_index < total_items - 1 else "no_action"
        )
    ]
    keyboard.append(navigation_row)

    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–æ—Ç—É
    keyboard.append([
        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cart:main_menu"),
        InlineKeyboardButton(text="üõçÔ∏è –ö –ø–æ–∫—É–ø–∫–∞–º", callback_data="cart:catalog")
    ])

    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥: –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    keyboard.append([
        InlineKeyboardButton(text="üìù –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", callback_data="cart:checkout")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
def get_age_verification_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞, –º–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç", callback_data="age_verify_yes")
    builder.button(text="–ù–µ—Ç, –º–Ω–µ –Ω–µ—Ç 18 –ª–µ—Ç", callback_data="age_verify_no")
    builder.adjust(1)
    return builder.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
def get_delivery_type_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery_type_pickup")
    builder.button(text="–ö—É—Ä—å–µ—Ä–æ–º", callback_data="delivery_type_courier")
    builder.adjust(1)
    return builder.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
def get_payment_method_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–µ—Ä–µ–≤–æ–¥", callback_data="payment_transfer")
    builder.button(text="–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", callback_data="payment_cash")
    builder.adjust(1)
    return builder.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
def get_order_confirmation_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_order")
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")
    builder.adjust(1)
    return builder.as_markup()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (—Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π)
def get_delivery_date_kb():
    builder = InlineKeyboardBuilder()
    today = datetime.now()

    for i in range(7):
        date = today + timedelta(days=i)
        date_str = date.strftime("%d.%m.%Y")
        weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][date.weekday()]
        display_text = f"{date_str} ({weekday})"
        builder.button(text=display_text, callback_data=f"date_{date_str}")

    builder.adjust(1)
    return builder.as_markup()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
def get_delivery_time_kb():
    builder = InlineKeyboardBuilder()
    time_slots = [
        "10:00 - 12:00",
        "12:00 - 14:00",
        "14:00 - 16:00",
        "16:00 - 18:00",
        "18:00 - 20:00"
    ]

    for slot in time_slots:
        builder.button(text=slot, callback_data=f"time_{slot}")

    builder.adjust(1)
    return builder.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
def get_skip_comment_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")
    return builder.as_markup()


def get_categories_keyboard(categories=None, current_page=1):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if categories is None:
        from database.users.warehouse_connection import fetch_categories
        categories = fetch_categories()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤ ID –¥–ª—è callback_data
    items_with_ids = []
    for category in categories:
        cat_id = catalog_mapping.get_category_id(category)
        items_with_ids.append((category, cat_id))

    return create_paginated_keyboard_with_ids(
        items_with_ids,
        current_page=current_page,
        callback_prefix="category",
        back_callback="cancel_catalog"
    )


def get_product_names_keyboard(product_names, category_name, current_page=1):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cat_id = catalog_mapping.get_category_id(category_name)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ ID
    items_with_ids = []
    for product_name in product_names:
        prod_id = catalog_mapping.get_product_id(category_name, product_name)
        items_with_ids.append((product_name, prod_id))

    return create_paginated_keyboard_with_ids(
        items_with_ids,
        current_page=current_page,
        callback_prefix=f"product_name:{cat_id}",
        back_callback="cancel_category_selection"
    )


def create_paginated_keyboard_with_ids(
        items_with_ids,
        current_page=1,
        items_per_page=7,
        callback_prefix="item",
        back_callback="back",
        page_callback_prefix="page"
):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ID"""
    total_pages = (len(items_with_ids) + items_per_page - 1) // items_per_page
    start_idx = (current_page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(items_with_ids))

    keyboard = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for display_name, item_id in items_with_ids[start_idx:end_idx]:
        keyboard.button(
            text=display_name,
            callback_data=f"{callback_prefix}:{item_id}"
        )

    keyboard.adjust(1)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if total_pages > 1:
        nav_buttons = []
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"{page_callback_prefix}:{callback_prefix}:{current_page - 1}"
            ))

        nav_buttons.append(InlineKeyboardButton(
            text=f"{current_page}/{total_pages}",
            callback_data="noop"
        ))

        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"{page_callback_prefix}:{callback_prefix}:{current_page + 1}"
            ))

        keyboard.row(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=back_callback
    ))

    return keyboard.as_markup()


def get_flavors_keyboard(products, category_name, product_name):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∫—É—Å–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    keyboard = InlineKeyboardBuilder()

    # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä–∞
    cat_id = catalog_mapping.get_category_id(category_name)
    prod_id = catalog_mapping.get_product_id(category_name, product_name)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∫—É—Å–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
    for product in products:
        product_full_name, flavor, price, product_id, description, quantity, image_path = product
        button_text = f"{flavor} - {price} —Ä—É–±."
        keyboard.button(
            text=button_text,
            callback_data=f"select_flavor:{product_id}"
        )

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 1 —Å—Ç–æ–ª–±–µ—Ü
    keyboard.adjust(1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    keyboard.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data=f"back_to_products:{cat_id}:{prod_id}"
        )
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.row(
        InlineKeyboardButton(
            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="cancel_catalog"
        )
    )

    return keyboard.as_markup()


def get_flavor_actions_keyboard(product_id: int, category_name: str, product_name: str):
    # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä–∞
    cat_id = catalog_mapping.get_category_id(category_name)
    prod_id = catalog_mapping.get_product_id(category_name, product_name)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"flavor_action:add_cart:{product_id}"),
        InlineKeyboardButton(text="‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"flavor_action:add_fav:{product_id}")
    )
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∫—É—Å–∞",
        callback_data=f"flavor_action:back_flavors:{cat_id}:{prod_id}"
    ))
    return builder.as_markup()


def get_product_details_keyboard(product_id, category_name, product_name, current_idx=0, total_products=1):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä–∞
    cat_id = catalog_mapping.get_category_id(category_name)
    prod_id = catalog_mapping.get_product_id(category_name, product_name)

    keyboard = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_row = []
    if current_idx > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"product_nav:{cat_id}:{prod_id}:{current_idx - 1}"
        ))
    else:
        nav_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

    nav_row.append(InlineKeyboardButton(
        text=f"{current_idx + 1}/{total_products}",
        callback_data="noop"
    ))

    if current_idx < total_products - 1:
        nav_row.append(InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=f"product_nav:{cat_id}:{prod_id}:{current_idx + 1}"
        ))
    else:
        nav_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

    keyboard.append(nav_row)

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    keyboard.append([InlineKeyboardButton(
        text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
        callback_data=f"add_to_cart:{product_id}"
    )])

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é
    keyboard.append([
        InlineKeyboardButton(
            text="üîô –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤",
            callback_data=f"back_to_products:{cat_id}:{prod_id}"
        )
    ])

    keyboard.append([
        InlineKeyboardButton(
            text="üîù –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="cancel_category_selection"
        )
    ])

    keyboard.append([
        InlineKeyboardButton(
            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="cancel_catalog"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)