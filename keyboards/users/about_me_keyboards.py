from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Optional


def get_about_me_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ '–û —Å–µ–±–µ'"""
    builder = InlineKeyboardBuilder()

    builder.row(InlineKeyboardButton(
        text="üë§ –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        callback_data="about_me:personal_info"
    ))

    builder.row(InlineKeyboardButton(
        text="üìç –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏",
        callback_data="about_me:addresses"
    ))

    builder.row(InlineKeyboardButton(
        text="‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏",
        callback_data="about_me:delivery_time"
    ))

    builder.row(InlineKeyboardButton(
        text="üîí –û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö",
        callback_data="about_me:data_security"
    ))

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å",
        callback_data="about_me:back_to_profile"
    ))

    return builder.as_markup()


def get_personal_info_keyboard(user_info: Optional[Dict]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    builder = InlineKeyboardBuilder()

    first_name = user_info.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') if user_info else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    last_name = user_info.get('last_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') if user_info else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    birth_date = user_info.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') if user_info else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    gender = user_info.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω') if user_info else '–ù–µ —É–∫–∞–∑–∞–Ω'
    email = user_info.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω') if user_info else '–ù–µ —É–∫–∞–∑–∞–Ω'
    phone = user_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω') if user_info else '–ù–µ —É–∫–∞–∑–∞–Ω'

    builder.row(InlineKeyboardButton(
        text=f"–ò–º—è: {first_name}",
        callback_data="personal:edit_first_name"
    ))

    builder.row(InlineKeyboardButton(
        text=f"–§–∞–º–∏–ª–∏—è: {last_name}",
        callback_data="personal:edit_last_name"
    ))

    builder.row(InlineKeyboardButton(
        text=f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}",
        callback_data="personal:edit_birth_date"
    ))

    builder.row(InlineKeyboardButton(
        text=f"üë§ –ü–æ–ª: {gender}",
        callback_data="personal:edit_gender"
    ))

    builder.row(InlineKeyboardButton(
        text=f"üìß Email: {email}",
        callback_data="personal:edit_email"
    ))

    builder.row(InlineKeyboardButton(
        text=f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}",
        callback_data="personal:edit_phone"
    ))

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="personal:back"
    ))

    return builder.as_markup()


def get_gender_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender:male"),
        InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender:female")
    )

    builder.row(InlineKeyboardButton(
        text="üö´ –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å",
        callback_data="gender:skip"
    ))

    builder.row(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="gender:cancel"
    ))

    return builder.as_markup()


def get_addresses_keyboard(addresses: List[Dict]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤"""
    builder = InlineKeyboardBuilder()

    if addresses:
        for i, addr in enumerate(addresses, 1):
            default_mark = " ‚≠ê" if addr['is_default'] else ""
            text = f"üìç –ê–¥—Ä–µ—Å {i}{default_mark}"

            builder.row(InlineKeyboardButton(
                text=text,
                callback_data=f"address:view_{addr['id']}"
            ))

    builder.row(InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å",
        callback_data="address:add_new"
    ))

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="address:back"
    ))

    return builder.as_markup()


def get_address_detail_keyboard(address_id: int, is_default: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥—Ä–µ—Å–µ"""
    builder = InlineKeyboardBuilder()

    builder.row(InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å",
        callback_data=f"address:edit_{address_id}"
    ))

    builder.row(InlineKeyboardButton(
        text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞",
        callback_data=f"address:instructions_{address_id}"
    ))

    if not is_default:
        builder.row(InlineKeyboardButton(
            text="‚≠ê –°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º",
            callback_data=f"address:set_default_{address_id}"
        ))

    builder.row(InlineKeyboardButton(
        text="üóë –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"address:delete_{address_id}"
    ))

    builder.row(InlineKeyboardButton(
        text="üîô –ö —Å–ø–∏—Å–∫—É –∞–¥—Ä–µ—Å–æ–≤",
        callback_data="address:list"
    ))

    return builder.as_markup()


def get_delivery_time_keyboard(preferences: Optional[Dict]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    builder = InlineKeyboardBuilder()

    if preferences:
        current_time = f"{preferences['start_time']} - {preferences['end_time']}"
    else:
        current_time = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    builder.row(InlineKeyboardButton(
        text=f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}",
        callback_data="delivery_time:current"
    ))

    builder.row(InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è",
        callback_data="delivery_time:edit"
    ))

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="delivery_time:back"
    ))

    return builder.as_markup()


def get_time_selection_keyboard(time_type: str, start_time: str = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    builder = InlineKeyboardBuilder()

    all_times = ["09:00", "10:00", "11:00", "12:00", "13:00", "14:00",
                 "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00"]

    # –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–º—É
    if time_type == "end" and start_time:
        start_hour = int(start_time.split(':')[0])
        times = [t for t in all_times if int(t.split(':')[0]) > start_hour]
    else:
        times = all_times

    for i in range(0, len(times), 3):
        row_buttons = []
        for j in range(3):
            if i + j < len(times):
                time = times[i + j]
                row_buttons.append(InlineKeyboardButton(
                    text=time,
                    callback_data=f"time_select:{time_type}:{time}"
                ))
        builder.row(*row_buttons)

    builder.row(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="time_select:cancel"
    ))

    return builder.as_markup()


def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()

    builder.row(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="about_me:cancel_input"
    ))

    return builder.as_markup()


def get_skip_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –æ—Ç–º–µ–Ω–∏—Ç—å"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="about_me:skip"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="about_me:cancel_input")
    )

    return builder.as_markup()
