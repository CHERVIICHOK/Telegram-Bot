from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Any


def get_preorder_categories_keyboard(categories: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞"""
    builder = InlineKeyboardBuilder()

    for category in categories:
        builder.row(InlineKeyboardButton(
            text=f"üì¶ {category['name']}",
            callback_data=f"po:c:{category['id']}"  # po = preorder, c = category
        ))

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
        callback_data="profile:main"
    ))

    return builder.as_markup()


def get_preorder_products_keyboard(category_id: int, products: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()

    for product in products:
        builder.row(InlineKeyboardButton(
            text=f"üõçÔ∏è {product['name']}",
            callback_data=f"po:p:{category_id}:{product['id']}"  # p = product
        ))

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        callback_data="po:main"
    ))

    return builder.as_markup()


def get_preorder_flavors_keyboard(category_id: int, product_id: int,
                                  flavors: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∫—É—Å–∞–º–∏ —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()

    for flavor in flavors:
        builder.row(InlineKeyboardButton(
            text=f"üçì {flavor['flavor']}",
            callback_data=f"po:f:{flavor['id']}"  # f = flavor, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        ))

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
        callback_data=f"po:c:{category_id}"
    ))

    return builder.as_markup()


def get_product_card_keyboard(product_id: int, has_preorder: bool,
                              category_id: int, parent_product_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()

    if has_preorder:
        builder.row(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑",
            callback_data=f"po:cancel:{product_id}"
        ))
    else:
        builder.row(InlineKeyboardButton(
            text="‚úÖ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑",
            callback_data=f"po:make:{product_id}"
        ))

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∫—É—Å–∞–º",
        callback_data=f"po:p:{category_id}:{parent_product_id}"
    ))

    return builder.as_markup()


def get_my_preorders_keyboard(page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        buttons = []
        if page > 1:
            buttons.append(InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"po:my:page:{page - 1}"
            ))

        buttons.append(InlineKeyboardButton(
            text=f"{page}/{total_pages}",
            callback_data="po:my:current"
        ))

        if page < total_pages:
            buttons.append(InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"po:my:page:{page + 1}"
            ))

        builder.row(*buttons)

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
        callback_data="profile:main"
    ))

    return builder.as_markup()


def get_cancellation_reason_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞"""
    builder = InlineKeyboardBuilder()

    reasons = [
        ("üí∞ –ò–∑–º–µ–Ω–∏–ª–∏—Å—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞", "financial"),
        ("‚è∞ –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å", "too_long"),
        ("üîÑ –ù–∞—à—ë–ª –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ", "found_elsewhere"),
        ("‚ùå –ü–µ—Ä–µ–¥—É–º–∞–ª", "changed_mind"),
        ("üìù –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞", "other")
    ]

    for text, reason_code in reasons:
        builder.row(InlineKeyboardButton(
            text=text,
            callback_data=f"po:reason:{reason_code}"
        ))

    builder.row(InlineKeyboardButton(
        text="üîô –û—Ç–º–µ–Ω–∞",
        callback_data="po:cancel_reason"
    ))

    return builder.as_markup()


def get_back_to_card_keyboard(product_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()

    builder.row(InlineKeyboardButton(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä—É",
        callback_data=f"po:f:{product_id}"
    ))

    return builder.as_markup()
