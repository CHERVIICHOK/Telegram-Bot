from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Tuple


def get_stock_threshold_menu_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text="üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–æ–≤–∞—Ä–∞", callback_data="set_product_threshold"),
        InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏", callback_data="view_thresholds"),
        InlineKeyboardButton(text="üì¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º", callback_data="check_low_stock"),
        InlineKeyboardButton(text="üìú –ñ—É—Ä–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="view_notification_log"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_admin_menu")
    )

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É

    return builder.as_markup()


def get_categories_for_threshold_keyboard(categories: List[str]):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ—Ä–æ–≥–æ–≤
    """
    builder = InlineKeyboardBuilder()

    for category in categories:
        builder.add(InlineKeyboardButton(
            text=category,
            callback_data=f"threshold_category:{category}"
        ))

    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_threshold_menu"
    ))

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É

    return builder.as_markup()


def get_products_for_threshold_keyboard(products: List[Tuple[int, str]], category: str):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    builder = InlineKeyboardBuilder()

    for product_id, product_name in products:
        builder.add(InlineKeyboardButton(
            text=product_name,
            callback_data=f"threshold_product:{product_id}"
        ))

    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        callback_data="back_to_threshold_categories"
    ))

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É

    return builder.as_markup()


def get_threshold_confirmation_keyboard(product_id: int, threshold: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞
    """
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data=f"confirm_threshold:{product_id}:{threshold}"
        ),
        InlineKeyboardButton(
            text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å",
            callback_data=f"change_threshold:{product_id}"
        ),
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_threshold_setting"
        )
    )

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É

    return builder.as_markup()


def get_thresholds_list_keyboard(
        thresholds: List[Tuple[int, str, int, int]],
        page: int = 0,
        items_per_page: int = 5
):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    builder = InlineKeyboardBuilder()

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (len(thresholds) + items_per_page - 1) // items_per_page

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(thresholds))
    current_items = thresholds[start_idx:end_idx]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for product_id, product_name, threshold, stock in current_items:
        builder.add(InlineKeyboardButton(
            text=f"{product_name} ({stock}/{threshold})",
            callback_data=f"edit_threshold:{product_id}"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []

    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"threshold_page:{page - 1}"
        ))

    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
            callback_data=f"threshold_page:{page + 1}"
        ))

    if nav_buttons:
        builder.row(*nav_buttons)

    builder.add(InlineKeyboardButton(
        text="üîô –í –º–µ–Ω—é –ø–æ—Ä–æ–≥–æ–≤",
        callback_data="back_to_threshold_menu"
    ))

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É, –∫—Ä–æ–º–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö

    return builder.as_markup()


def get_notification_log_keyboard(page: int = 0):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂—É—Ä–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ",
            callback_data=f"notification_log_page:{page - 1}"
        ),
        InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ",
            callback_data=f"notification_log_page:{page + 1}"
        ),
        InlineKeyboardButton(
            text="üîô –í –º–µ–Ω—é –ø–æ—Ä–æ–≥–æ–≤",
            callback_data="back_to_threshold_menu"
        )
    )

    builder.adjust(2, 1)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –æ–¥–Ω–∞ –≤–æ –≤—Ç–æ—Ä–æ–º

    return builder.as_markup()
