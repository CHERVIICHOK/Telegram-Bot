from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram_calendar import SimpleCalendar
from aiogram.filters.callback_data import CallbackData
import datetime


class PromoAdminCallback(CallbackData, prefix="promo_admin"):
    action: str
    promo_id: int


class DiscountTypeCallback(CallbackData, prefix="d_type"):
    type_name: str


class PromoEditCallback(CallbackData, prefix="promo_edit"):
    field: str  # 'code', 'description', 'value', 'min_amount', 'end_date', 'max_uses'


class ActionAdminCallback(CallbackData, prefix="action_admin"):
    action: str
    action_id: int


class ActionFSMCallback(CallbackData, prefix="action_fsm"):
    step: str


class ActionEditCallback(CallbackData, prefix="action_edit"):
    field: str


class ActionTargetCallback(CallbackData, prefix="action_target"):
    target_type: str


class ActionCatalogCallback(CallbackData, prefix="action_cat"):
    level: str
    item_index: str


class ActionPaginatorCallback(CallbackData, prefix="action_pag"):
    level: str
    page: int


def get_admin_discounts_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üéüÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", callback_data="admin_manage_promos")
    builder.button(text="üî• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏", callback_data="admin_manage_actions")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin_menu")
    builder.adjust(1)
    return builder.as_markup()


def get_promo_management_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_create_start")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="promo_list_all")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_discounts_menu")
    builder.adjust(1)
    return builder.as_markup()


def get_all_promos_keyboard(promos: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    if not promos:
        builder.row(InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", callback_data="no_op"))

    for promo in promos:
        promo_id, code, is_active, current, total, end_date = promo

        status_icon = "‚úÖ" if is_active else "‚ùå"
        try:
            if datetime.datetime.strptime(end_date, '%Y-%m-%d').date() < datetime.date.today():
                status_icon = "üö´"
        except (ValueError, TypeError):
            pass

        # –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∞ –≤–µ–¥–µ—Ç –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        builder.row(
            InlineKeyboardButton(
                text=f"{status_icon} {code} ({current}/{total})",
                callback_data=PromoAdminCallback(action="view", promo_id=promo_id).pack()
            )
        )

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_promos"))
    return builder.as_markup()


def get_promo_admin_view_keyboard(promo_id: int, is_active: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    toggle_text = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if is_active else "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    builder.button(text=toggle_text, callback_data=PromoAdminCallback(action="toggle", promo_id=promo_id).pack())
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=PromoAdminCallback(action="delete", promo_id=promo_id).pack())
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="promo_list_all")
    builder.adjust(2, 1)
    return builder.as_markup()


def get_promo_delete_confirmation_keyboard(promo_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                   callback_data=PromoAdminCallback(action="confirm_delete", promo_id=promo_id).pack())
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="promo_list_all")
    return builder.as_markup()


def get_discount_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∫–∏–¥–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CallbackData."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ—Ü–µ–Ω—Ç (%)", callback_data=DiscountTypeCallback(type_name="percentage").pack())
    builder.button(text="–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ (‚ÇΩ)", callback_data=DiscountTypeCallback(type_name="fixed_amount").pack())
    return builder.as_markup()


def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_action")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    return builder.as_markup()


def get_skip_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_step")
    return builder.as_markup()


def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞' –¥–ª—è FSM."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="fsm_cancel")
    return builder.as_markup()


def get_deal_management_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è '–¢–æ–≤–∞—Ä–æ–º –¥–Ω—è'."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–∞—Ç—É", callback_data="deal_create_start")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞ –¥–∞—Ç—É", callback_data="deal_delete_start")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_discounts_menu")
    builder.adjust(1)
    return builder.as_markup()


def get_promo_code_input_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚öôÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="promo_generate_code")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="fsm_cancel")
    builder.adjust(1)
    return builder.as_markup()


def get_promo_generation_choice_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ—Ç", callback_data="promo_accept_generated")
    builder.button(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="promo_regenerate")
    builder.button(text="‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="promo_enter_manual")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="fsm_cancel")
    builder.adjust(1, 2, 1)
    return builder.as_markup()


def get_promo_confirmation_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å", callback_data="confirm_action")
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ö–æ–¥", callback_data=PromoEditCallback(field="code").pack()),
        InlineKeyboardButton(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=PromoEditCallback(field="description").pack())
    )
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –°–∫–∏–¥–∫–∞", callback_data=PromoEditCallback(field="value").pack()),
        InlineKeyboardButton(text="‚úèÔ∏è –ú–∏–Ω. –∑–∞–∫–∞–∑", callback_data=PromoEditCallback(field="min_amount").pack())
    )
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –î–∞—Ç–∞", callback_data=PromoEditCallback(field="end_date").pack()),
        InlineKeyboardButton(text="‚úèÔ∏è –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π", callback_data=PromoEditCallback(field="max_uses").pack())
    )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    builder.adjust(1, 2, 2, 2)
    return builder.as_markup()


async def get_calendar(min_date: datetime.date | None = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    :param min_date: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç–∞.
    """
    calendar = SimpleCalendar(show_alerts=True)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç. –ï—Å–ª–∏ min_date –∑–∞–¥–∞–Ω–∞, –¥–∞—Ç—ã –¥–æ –Ω–µ–µ –±—É–¥—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã.
    start_range = min_date if min_date else datetime.date.today()

    calendar.set_dates_range(
        datetime.datetime.combine(start_range, datetime.time.min),
        datetime.datetime(2030, 1, 1)
    )

    return await calendar.start_calendar()


def get_action_management_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏—è–º–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–∫—Ü–∏—é", callback_data="action_create_start")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ü–∏–π", callback_data="action_list_all")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_discounts_menu")
    builder.adjust(1)
    return builder.as_markup()


def get_all_actions_keyboard(actions: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∞–∫—Ü–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    today = datetime.date.today()
    for action in actions:
        action_id, title, start_date_str, end_date_str, is_active = action
        start_date = datetime.datetime.strptime(start_date_str, '%Y-%m-%d').date()
        end_date = datetime.datetime.strptime(end_date_str, '%Y-%m-%d').date()

        if not is_active:
            status_icon = "‚ùå"  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
        elif end_date < today:
            status_icon = "üö´"  # –ü—Ä–æ—à–µ–¥—à–∞—è
        elif start_date > today:
            status_icon = "‚è≥"  # –ë—É–¥—É—â–∞—è
        else:
            status_icon = "‚úÖ"  # –ê–∫—Ç–∏–≤–Ω–∞—è

        builder.button(
            text=f"{status_icon} {title}",
            callback_data=ActionAdminCallback(action="view", action_id=action_id).pack()
        )

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_actions"))
    builder.adjust(1)
    return builder.as_markup()


def get_action_admin_view_keyboard(action_id: int, is_active: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    toggle_text = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if is_active else "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    builder.button(text=toggle_text, callback_data=ActionAdminCallback(action="toggle", action_id=action_id).pack())
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=ActionAdminCallback(action="delete", action_id=action_id).pack())
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∞–∫—Ü–∏–π", callback_data="action_list_all")
    builder.adjust(2, 1)
    return builder.as_markup()


def get_action_delete_confirmation_keyboard(action_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                   callback_data=ActionAdminCallback(action="confirm_delete", action_id=action_id).pack())
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="action_list_all")
    return builder.as_markup()


def get_action_fsm_nav_keyboard(back_step: str | None = None) -> InlineKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è FSM —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ù–∞–∑–∞–¥' –∏ '–û—Ç–º–µ–Ω–∞'."""
    builder = InlineKeyboardBuilder()
    if back_step:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=ActionFSMCallback(step=back_step).pack())
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="fsm_cancel")
    builder.adjust(1)
    return builder.as_markup()


def get_action_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —à–∞–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ü–∏–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å", callback_data="action_confirm_creation")
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=ActionEditCallback(field="title").pack()),
        InlineKeyboardButton(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=ActionEditCallback(field="description").pack())
    )
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –°–∫–∏–¥–∫–∞", callback_data=ActionEditCallback(field="discount_value").pack())
    )
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", callback_data=ActionEditCallback(field="start_date").pack()),
        InlineKeyboardButton(text="‚úèÔ∏è –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞", callback_data=ActionEditCallback(field="end_date").pack())
    )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel")
    builder.adjust(1, 2, 1, 2, 1)
    return builder.as_markup()


def get_action_target_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏ –∞–∫—Ü–∏–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞ –≤—Å—é –ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=ActionTargetCallback(target_type="category").pack())
    builder.button(text="–ù–∞ –ª–∏–Ω–µ–π–∫—É –¢–æ–≤–∞—Ä–æ–≤", callback_data=ActionTargetCallback(target_type="product_name").pack())
    builder.button(text="–ù–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¢–æ–≤–∞—Ä (–≤–∫—É—Å)",
                   callback_data=ActionTargetCallback(target_type="product_full_name").pack())
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="fsm_cancel")
    builder.adjust(1)
    return builder.as_markup()


def get_catalog_keyboard(level: str, items: list, page: int = 0) -> InlineKeyboardMarkup:
    """
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    builder = InlineKeyboardBuilder()
    PAGE_SIZE = 8  # –ö–Ω–æ–ø–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    start_index = page * PAGE_SIZE
    end_index = start_index + PAGE_SIZE

    # –°—Ä–µ–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    paginated_items = items[start_index:end_index]

    for index, item in enumerate(paginated_items):
        # –†–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –ø–æ–ª–Ω–æ–º —Å–ø–∏—Å–∫–µ
        original_index = start_index + index

        if level == 'flavor':  # –î–ª—è –≤–∫—É—Å–æ–≤ item —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ (id, name)
            text = item[1]
        else:  # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–π item —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            text = item

        builder.button(
            text=text,
            callback_data=ActionCatalogCallback(level=level, item_index=str(original_index)).pack()
        )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=ActionPaginatorCallback(level=level, page=page - 1).pack()
        ))
    if end_index < len(items):
        nav_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=ActionPaginatorCallback(level=level, page=page + 1).pack()
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="fsm_cancel"))
    builder.adjust(1)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return builder.as_markup()
