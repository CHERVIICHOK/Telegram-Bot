from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import logging

from keyboards.admins.order_timeout_keyboard import (
    get_timeout_main_menu_keyboard,
    get_timeout_settings_keyboard,
    get_interval_settings_keyboard,
    get_text_settings_keyboard,
    get_confirm_timeout_keyboard,
    get_confirm_interval_keyboard,
    get_confirm_text_keyboard
)
from database.admins.settings_db import (
    get_order_processing_timeout,
    update_order_processing_timeout,
    get_notification_interval,
    update_notification_interval,
    get_notification_text,
    update_notification_text,
    DEFAULT_NOTIFICATION_TEXT
)
from filters.admin_filter import AdminFilter
from states.order_timeout_state import TimeoutSettingsStates

logger = logging.getLogger(__name__)

router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())



async def _show_timeout_main_menu(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–π–º–∞—É—Ç–∞"""
    current_timeout = get_order_processing_timeout()
    current_interval = get_notification_interval()

    text = (
        "‚è±Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö</b>\n\n"
        f"üìç –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{current_timeout} –º–∏–Ω.</b>\n"
        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>{current_interval} –º–∏–Ω.</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    )
    keyboard = get_timeout_main_menu_keyboard()

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await message_or_callback.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–π–º–∞—É—Ç–∞
@router.callback_query(F.data == "timeout_settings")
async def show_timeout_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–π–º–∞—É—Ç–∞"""
    await state.clear()
    await _show_timeout_main_menu(callback)
    await callback.answer()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@router.callback_query(F.data == "timeout_first_notification")
async def show_timeout_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    current_timeout = get_order_processing_timeout()
    keyboard = get_timeout_settings_keyboard(current_timeout)

    await callback.message.edit_text(
        "‚è±Ô∏è <b>–í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –∫—É—Ä—å–µ—Ä—ã –ø–æ–ª—É—á–∞—Ç –ø–µ—Ä–≤–æ–µ "
        "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("set_timeout:"))
async def process_set_timeout(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Ç–∞–π–º–∞—É—Ç–∞"""
    minutes = int(callback.data.split(":")[1])

    await callback.message.edit_text(
        f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{minutes} –º–∏–Ω.</b>?",
        reply_markup=get_confirm_timeout_keyboard(minutes),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "custom_timeout")
async def process_custom_timeout(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await state.set_state(TimeoutSettingsStates.entering_custom_time)

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 1440):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25"
    )
    await callback.answer()


@router.message(TimeoutSettingsStates.entering_custom_time)
async def process_custom_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        minutes = int(message.text.strip())

        if minutes < 1 or minutes > 1440:
            await message.answer(
                "‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        await state.clear()

        await message.answer(
            f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{minutes} –º–∏–Ω.</b>?",
            reply_markup=get_confirm_timeout_keyboard(minutes),
            parse_mode="HTML"
        )

    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25"
        )


@router.callback_query(F.data.startswith("confirm_timeout:"))
async def process_confirm_timeout(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞"""
    minutes = int(callback.data.split(":")[1])

    success = update_order_processing_timeout(minutes)

    if success:
        await callback.answer("‚úÖ –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ", show_alert=True)
        await _show_timeout_main_menu(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data == "timeout_interval")
async def show_interval_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    current_interval = get_notification_interval()
    keyboard = get_interval_settings_keyboard(current_interval)

    await callback.message.edit_text(
        "üîÑ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è "
        "–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("set_interval:"))
async def process_set_interval(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    minutes = int(callback.data.split(":")[1])

    await callback.message.edit_text(
        f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>{minutes} –º–∏–Ω.</b>?",
        reply_markup=get_confirm_interval_keyboard(minutes),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "custom_interval")
async def process_custom_interval(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    await state.set_state(TimeoutSettingsStates.entering_custom_interval)

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 1440):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15"
    )
    await callback.answer()


@router.message(TimeoutSettingsStates.entering_custom_interval)
async def process_custom_interval_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    try:
        minutes = int(message.text.strip())

        if minutes < 1 or minutes > 1440:
            await message.answer(
                "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        await state.clear()

        await message.answer(
            f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>{minutes} –º–∏–Ω.</b>?",
            reply_markup=get_confirm_interval_keyboard(minutes),
            parse_mode="HTML"
        )

    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15"
        )


@router.callback_query(F.data.startswith("confirm_interval:"))
async def process_confirm_interval(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    minutes = int(callback.data.split(":")[1])

    success = update_notification_interval(minutes)

    if success:
        await callback.answer("‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω", show_alert=True)
        await _show_timeout_main_menu(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@router.callback_query(F.data == "timeout_text")
async def show_text_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    current_text = get_notification_text()

    await callback.message.edit_text(
        "üìù <b>–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
        "<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n"
        f"<code>{current_text}</code>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>\n"
        "‚Ä¢ <code>{order_id}</code> - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ <code>{elapsed_time}</code> - –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ <code>{notification_count}</code> - –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_text_settings_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "edit_notification_text")
async def process_edit_text(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await state.set_state(TimeoutSettingsStates.entering_notification_text)

    await callback.message.edit_text(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>\n"
        "‚Ä¢ <code>{order_id}</code> - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ <code>{elapsed_time}</code> - –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ <code>{notification_count}</code> - –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –∂–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∂–µ {elapsed_time} –º–∏–Ω.!</code>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(TimeoutSettingsStates.entering_notification_text)
async def process_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    new_text = message.text.strip()

    if len(new_text) < 10:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if len(new_text) > 4000:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç:"
        )
        return

    await state.update_data(new_notification_text=new_text)

    try:
        preview_text = new_text.format(
            order_id=12345,
            elapsed_time=30,
            notification_count=2
        )
    except KeyError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {e}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
            f"‚Ä¢ {{order_id}}\n"
            f"‚Ä¢ {{elapsed_time}}\n"
            f"‚Ä¢ {{notification_count}}"
        )
        return

    await state.clear()
    await state.update_data(new_notification_text=new_text)

    await message.answer(
        f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n"
        f"{preview_text}\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç?",
        reply_markup=get_confirm_text_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_notification_text")
async def process_confirm_text(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
    data = await state.get_data()
    new_text = data.get('new_notification_text')

    if not new_text:
        await callback.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    success = update_notification_text(new_text)

    if success:
        await state.clear()
        await callback.answer("‚úÖ –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω", show_alert=True)
        await _show_timeout_main_menu(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞", show_alert=True)


@router.callback_query(F.data == "reset_notification_text")
async def process_reset_text(callback: CallbackQuery):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"""
    success = update_notification_text(DEFAULT_NOTIFICATION_TEXT)

    if success:
        await callback.answer("‚úÖ –¢–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", show_alert=True)
        await show_text_settings(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–µ–∫—Å—Ç–∞", show_alert=True)


@router.message(Command("timeout_settings"))
async def cmd_timeout_settings(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ç–∞–π–º–∞—É—Ç–∞"""
    await state.clear()
    await _show_timeout_main_menu(message)
