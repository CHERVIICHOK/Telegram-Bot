from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from filters.admin_filter import AdminFilter
from states.stock_thresholds_state import StockThresholdState
from keyboards.admins.stock_thresholds_keyboard import (
    get_stock_threshold_menu_keyboard,
    get_categories_for_threshold_keyboard,
    get_products_for_threshold_keyboard,
    get_threshold_confirmation_keyboard,
    get_thresholds_list_keyboard,
    get_notification_log_keyboard
)
from utils.stock_notification_utils import (
    check_low_stock_products,
)
from database.admins.stock_thresholds_db import (
    create_stock_thresholds_table,
    set_product_threshold,
    get_product_threshold,
    get_all_product_thresholds,
    get_recent_notifications
)
from database.users.database_connection import create_connection
from database.users.warehouse_connection import create_connection_warehouse

import logging

logger = logging.getLogger(__name__)

router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def init_stock_thresholds_tables():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ —Ç–æ–≤–∞—Ä–æ–≤"""
    conn = create_connection()
    create_stock_thresholds_table(conn)
    conn.close()
    logger.info("–¢–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data == "manage_stock_thresholds")
async def show_stock_threshold_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await callback.message.edit_text(
        "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ "
        "–∏ –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º.",
        reply_markup=get_stock_threshold_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤
@router.callback_query(F.data == "back_to_threshold_menu")
async def back_to_threshold_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤"""
    await state.clear()
    await show_stock_threshold_menu(callback)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "set_product_threshold")
async def choose_category_for_threshold(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    wh_conn = create_connection_warehouse()
    cursor = wh_conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM products WHERE is_active = 1")
    categories = [row[0] for row in cursor.fetchall()]
    wh_conn.close()

    await state.set_state(StockThresholdState.select_category)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=get_categories_for_threshold_keyboard(categories)
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data == "back_to_threshold_categories")
async def back_to_threshold_categories(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    await choose_category_for_threshold(callback, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(StockThresholdState.select_category, F.data.startswith("threshold_category:"))
async def choose_product_for_threshold(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split(":", 1)[1]

    wh_conn = create_connection_warehouse()
    cursor = wh_conn.cursor()
    cursor.execute(
        "SELECT id, product_full_name FROM products WHERE category = ? AND is_active = 1",
        (category,)
    )
    products = cursor.fetchall()
    wh_conn.close()

    await state.update_data(category=category)
    await state.set_state(StockThresholdState.select_product)

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=get_products_for_threshold_keyboard(products, category),
        parse_mode="HTML"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞
@router.callback_query(StockThresholdState.select_product, F.data.startswith("threshold_product:"))
async def enter_threshold_value(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    product_id = int(callback.data.split(":", 1)[1])

    wh_conn = create_connection_warehouse()
    cursor = wh_conn.cursor()
    cursor.execute("SELECT product_full_name, quantity FROM products WHERE id = ?", (product_id,))
    product_info = cursor.fetchone()
    wh_conn.close()

    if not product_info:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.",
            reply_markup=get_stock_threshold_menu_keyboard()
        )
        await state.clear()
        await callback.answer()
        return

    product_name, current_stock = product_info

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–æ—Ä–æ–≥ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    conn = create_connection()
    current_threshold = get_product_threshold(conn, product_id)
    conn.close()

    threshold_info = f"(—Ç–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: {current_threshold})" if current_threshold is not None else ""

    await state.update_data(product_id=product_id, product_name=product_name, current_stock=current_stock)
    await state.set_state(StockThresholdState.enter_threshold)

    await callback.message.edit_text(
        f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:\n"
        f"<b>{product_name}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: <b>{current_stock}</b> —à—Ç.\n"
        f"{threshold_info}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        parse_mode="HTML"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
@router.message(StockThresholdState.enter_threshold)
async def process_threshold_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        threshold = int(message.text.strip())
        if threshold <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get("product_id")
    product_name = data.get("product_name")
    current_stock = data.get("current_stock")

    await state.update_data(threshold=threshold)
    await state.set_state(StockThresholdState.confirm_threshold)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ä–æ–≥–∞
    stock_status = "‚ùóÔ∏è –ù–ò–ñ–ï –ü–û–†–û–ì–ê ‚ùóÔ∏è" if current_stock <= threshold else "‚úÖ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞"

    await message.answer(
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n"
        f"–¢–æ–≤–∞—Ä: <b>{product_name}</b>\n"
        f"–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: <b>{current_stock}</b> —à—Ç. ({stock_status})\n"
        f"–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{threshold}</b> —à—Ç.\n\n"
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ —Å—Ç–∞–Ω–µ—Ç —Ä–∞–≤–Ω—ã–º –∏–ª–∏ –º–µ–Ω—å—à–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.",
        reply_markup=get_threshold_confirmation_keyboard(product_id, threshold),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞
@router.callback_query(StockThresholdState.confirm_threshold, F.data.startswith("confirm_threshold:"))
async def confirm_threshold_setting(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    _, product_id, threshold = callback.data.split(":", 2)
    product_id = int(product_id)
    threshold = int(threshold)

    data = await state.get_data()
    product_name = data.get("product_name")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = create_connection()
    set_product_threshold(conn, product_id, threshold)
    conn.close()

    await callback.message.edit_text(
        f"‚úÖ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ <b>{threshold}</b> —à—Ç.",
        reply_markup=get_stock_threshold_menu_keyboard(),
        parse_mode="HTML"
    )

    await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞
@router.callback_query(F.data == "cancel_threshold_setting")
async def cancel_threshold_setting(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_stock_threshold_menu_keyboard()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
@router.callback_query(F.data == "view_thresholds")
async def view_thresholds(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    shop_conn = create_connection()
    wh_conn = create_connection_warehouse()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
    thresholds = get_all_product_thresholds(shop_conn)

    if not thresholds:
        await callback.message.edit_text(
            "‚ÑπÔ∏è –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
            reply_markup=get_stock_threshold_menu_keyboard()
        )
        await callback.answer()
        shop_conn.close()
        wh_conn.close()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    threshold_info = []
    for product_id, threshold in thresholds:
        cursor = wh_conn.cursor()
        cursor.execute(
            "SELECT product_full_name, quantity FROM products WHERE id = ?",
            (product_id,)
        )
        product_info = cursor.fetchone()

        if product_info:
            product_name, quantity = product_info
            threshold_info.append((product_id, product_name, threshold, quantity))

    shop_conn.close()
    wh_conn.close()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –±—ã–ª–∏ –≤–≤–µ—Ä—Ö—É
    threshold_info.sort(key=lambda x: (x[3] > x[2], x[3]))

    await callback.message.edit_text(
        "üìã <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. "
        "–¢–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –≤–≤–µ—Ä—Ö—É —Å–ø–∏—Å–∫–∞.\n\n"
        "–§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫/–ø–æ—Ä–æ–≥)",
        reply_markup=get_thresholds_list_keyboard(threshold_info),
        parse_mode="HTML"
    )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Ä–æ–≥–æ–≤
@router.callback_query(F.data.startswith("threshold_page:"))
async def threshold_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –ø–æ—Ä–æ–≥–æ–≤"""
    page = int(callback.data.split(":", 1)[1])

    shop_conn = create_connection()
    wh_conn = create_connection_warehouse()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
    thresholds = get_all_product_thresholds(shop_conn)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    threshold_info = []
    for product_id, threshold in thresholds:
        cursor = wh_conn.cursor()
        cursor.execute(
            "SELECT product_full_name, quantity FROM products WHERE id = ?",
            (product_id,)
        )
        product_info = cursor.fetchone()

        if product_info:
            product_name, quantity = product_info
            threshold_info.append((product_id, product_name, threshold, quantity))

    shop_conn.close()
    wh_conn.close()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –±—ã–ª–∏ –≤–≤–µ—Ä—Ö—É
    threshold_info.sort(key=lambda x: (x[3] > x[2], x[3]))

    await callback.message.edit_text(
        "üìã <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. "
        "–¢–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –≤–≤–µ—Ä—Ö—É —Å–ø–∏—Å–∫–∞.\n\n"
        "–§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫/–ø–æ—Ä–æ–≥)",
        reply_markup=get_thresholds_list_keyboard(threshold_info, page),
        parse_mode="HTML"
    )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–∞
@router.callback_query(F.data.startswith("edit_threshold:"))
async def edit_threshold(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split(":", 1)[1])

    wh_conn = create_connection_warehouse()
    cursor = wh_conn.cursor()
    cursor.execute("SELECT product_full_name, quantity FROM products WHERE id = ?", (product_id,))
    product_info = cursor.fetchone()
    wh_conn.close()

    if not product_info:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_stock_threshold_menu_keyboard()
        )
        await callback.answer()
        return

    product_name, current_stock = product_info

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥
    conn = create_connection()
    current_threshold = get_product_threshold(conn, product_id)
    conn.close()

    await state.update_data(product_id=product_id, product_name=product_name, current_stock=current_stock)
    await state.set_state(StockThresholdState.enter_threshold)

    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:\n"
        f"<b>{product_name}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: <b>{current_stock}</b> —à—Ç.\n"
        f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: <b>{current_threshold}</b> —à—Ç.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        parse_mode="HTML"
    )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
@router.callback_query(F.data == "check_low_stock")
async def check_low_stock(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ –Ω–∞ –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫"""
    await callback.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º...")

    shop_conn = create_connection()
    wh_conn = create_connection_warehouse()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    await check_low_stock_products(wh_conn, shop_conn, callback.bot)

    await callback.message.edit_text(
        "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n"
        "–ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, "
        "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
        reply_markup=get_stock_threshold_menu_keyboard()
    )

    shop_conn.close()
    wh_conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂—É—Ä–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data == "view_notification_log")
async def view_notification_log(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∂—É—Ä–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ —Ç–æ–≤–∞—Ä–æ–≤"""
    conn = create_connection()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifications = get_recent_notifications(conn, limit=5)
    conn.close()

    if not notifications:
        await callback.message.edit_text(
            "‚ÑπÔ∏è –ñ—É—Ä–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç.",
            reply_markup=get_stock_threshold_menu_keyboard()
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    log_text = "üìú <b>–ñ—É—Ä–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ</b>\n\n"

    for notification in notifications:
        delivery_status = "‚úÖ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" if notification["delivered"] else "‚ùå –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        notification_time = notification["notification_time"].split("T")[0]  # –£–ø—Ä–æ—â–∞–µ–º –¥–∞—Ç—É

        log_text += (
            f"<b>{notification_time}</b> - {notification['product_name']}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫: {notification['current_stock']}/{notification['threshold']} ({delivery_status})\n\n"
        )

    await callback.message.edit_text(
        log_text,
        reply_markup=get_notification_log_keyboard(),
        parse_mode="HTML"
    )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data.startswith("notification_log_page:"))
async def notification_log_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∂—É—Ä–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    page = int(callback.data.split(":", 1)[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –±—ã–ª–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
    if page < 0:
        page = 0
        await callback.answer("–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return

    conn = create_connection()

    # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    notifications = get_recent_notifications(conn, limit=5, offset=page * 5)
    conn.close()

    if not notifications and page > 0:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –≤–µ—Ä–Ω–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é
        await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞")
        return

    if not notifications:
        await callback.message.edit_text(
            "‚ÑπÔ∏è –ñ—É—Ä–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç.",
            reply_markup=get_stock_threshold_menu_keyboard()
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    log_text = "üìú <b>–ñ—É—Ä–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ</b>\n\n"

    for notification in notifications:
        delivery_status = "‚úÖ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" if notification["delivered"] else "‚ùå –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        notification_time = notification["notification_time"].split("T")[0]  # –£–ø—Ä–æ—â–∞–µ–º –¥–∞—Ç—É

        log_text += (
            f"<b>{notification_time}</b> - {notification['product_name']}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫: {notification['current_stock']}/{notification['threshold']} ({delivery_status})\n\n"
        )

    await callback.message.edit_text(
        log_text,
        reply_markup=get_notification_log_keyboard(page),
        parse_mode="HTML"
    )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_admin_menu")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    from keyboards.admins.menu_keyboard import get_admin_menu_keyboard

    await state.clear()
    await callback.message.edit_text(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_admin_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
