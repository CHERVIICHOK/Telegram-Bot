import asyncio
import json
from typing import Dict
from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramRetryAfter

from database.admins.users_db import get_all_users, get_active_users, get_user_regions, count_users
from database.admins.broadcast_db import (
    ensure_broadcast_tables, get_broadcast_templates,
    get_broadcast_template, start_broadcast, update_broadcast_status,
    get_broadcast_history, get_broadcast_details
)
from filters.admin_filter import AdminFilter
from keyboards.admins.broadcast_keyboards import (
    get_broadcast_menu_keyboard, get_broadcast_type_keyboard,
    get_target_selection_keyboard, get_time_selection_keyboard,
    get_active_users_period_keyboard, get_regions_keyboard,
    get_templates_keyboard, get_broadcast_preview_keyboard,
    get_broadcast_history_keyboard, get_broadcast_history_list_keyboard,
    get_confirm_cancel_keyboard, get_back_keyboard
)
from utils.broadcast_utils import (
    parse_button_data, validate_buttons_format,
    format_broadcast_preview,
    format_broadcast_details, parse_scheduled_time
)

router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
ensure_broadcast_tables()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BroadcastStates(StatesGroup):
    selecting_type = State()
    entering_text = State()
    uploading_media = State()
    selecting_target = State()
    selecting_active_period = State()
    selecting_region = State()
    selecting_time = State()
    entering_scheduled_time = State()
    editing_buttons = State()
    entering_button_text = State()
    entering_button_url = State()
    preview = State()

    template_naming = State()
    template_selecting = State()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
BROADCAST_DATA = {}  # user_id -> broadcast_data
TEMP_BUTTONS = {}  # user_id -> [buttons]
REGIONS_CACHE = {}  # –ö–µ—à —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ë–î
TEMPLATES_CACHE = {}  # –ö–µ—à —à–∞–±–ª–æ–Ω–æ–≤
CURRENT_PAGE = {}  # user_id -> page


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.callback_query(F.data == "send_broadcast")
async def cmd_broadcast(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text(
        "üì® <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_broadcast_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_admin_menu")
async def cmd_back_to_admin_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    from keyboards.admins.menu_keyboard import get_admin_menu_keyboard

    await callback.message.edit_text(
        "üîë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_broadcast_menu")
async def cmd_back_to_broadcast_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    await state.clear()

    user_id = callback.from_user.id
    if user_id in BROADCAST_DATA:
        del BROADCAST_DATA[user_id]

    await cmd_broadcast(callback)


# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "create_broadcast")
async def cmd_create_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    BROADCAST_DATA[user_id] = {
        "type": "text",
        "text": "",
        "media_type": None,
        "media_file": None,
        "buttons": [],
        "target_type": "all",
        "total_recipients": 0
    }

    await callback.message.edit_text(
        "üì§ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=get_broadcast_type_keyboard(),
        parse_mode="HTML"
    )

    await state.set_state(BroadcastStates.selecting_type)
    await callback.answer()


@router.callback_query(F.data.startswith("broadcast_type:"), BroadcastStates.selecting_type)
async def process_broadcast_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback.from_user.id
    _, message_type = callback.data.split(":", 1)

    BROADCAST_DATA[user_id]["type"] = message_type

    await callback.message.edit_text(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <a href='https://example.com'>—Å—Å—ã–ª–∫–∞</a>",
        parse_mode="HTML"
    )

    await state.set_state(BroadcastStates.entering_text)
    await callback.answer()


@router.callback_query(F.data == "broadcast_use_template", BroadcastStates.selecting_type)
async def process_use_template(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    templates = get_broadcast_templates()
    TEMPLATES_CACHE[user_id] = templates

    if not templates:
        await callback.message.edit_text(
            "üìù <b>–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É.",
            reply_markup=get_back_keyboard("back_to_broadcast_type"),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "üìë <b>–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",
            reply_markup=get_templates_keyboard(templates),
            parse_mode="HTML"
        )

        await state.set_state(BroadcastStates.template_selecting)

    await callback.answer()


@router.callback_query(F.data.startswith("select_template:"), BroadcastStates.template_selecting)
async def process_template_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
    user_id = callback.from_user.id
    _, template_id = callback.data.split(":", 1)

    template = get_broadcast_template(int(template_id))

    if not template:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω.",
            reply_markup=get_back_keyboard("broadcast_use_template"),
            parse_mode="HTML"
        )
    else:
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
        _, name, content, msg_type, buttons_json, _ = template

        try:
            buttons = json.loads(buttons_json) if buttons_json else []
        except json.JSONDecodeError:
            buttons = []

        BROADCAST_DATA[user_id] = {
            "type": msg_type,
            "text": content,
            "media_type": "photo" if msg_type == "photo" else None,
            "media_file": None,  # –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ
            "buttons": buttons,
            "target_type": "all",
            "total_recipients": 0
        }

        if msg_type == "photo":
            await callback.message.edit_text(
                "üñº <b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ.",
                parse_mode="HTML"
            )
            await state.set_state(BroadcastStates.uploading_media)
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            await callback.message.edit_text(
                "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:</b>",
                reply_markup=get_target_selection_keyboard(),
                parse_mode="HTML"
            )
            await state.set_state(BroadcastStates.selecting_target)

    await callback.answer()


@router.message(BroadcastStates.entering_text)
async def process_broadcast_text(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id

    if not message.text or not message.text.strip():
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
            parse_mode="HTML"
        )
        return

    BROADCAST_DATA[user_id]["text"] = message.text

    if BROADCAST_DATA[user_id]["type"] == "photo":
        await message.answer(
            "üñº <b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ.",
            parse_mode="HTML"
        )
        await state.set_state(BroadcastStates.uploading_media)
    else:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        await message.answer(
            "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:</b>",
            reply_markup=get_target_selection_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(BroadcastStates.selecting_target)


@router.message(BroadcastStates.uploading_media)
async def process_broadcast_media(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id

    if not message.photo:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.",
            parse_mode="HTML"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    file_id = message.photo[-1].file_id
    BROADCAST_DATA[user_id]["media_file"] = file_id
    BROADCAST_DATA[user_id]["media_type"] = "photo"

    await message.answer(
        "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:</b>",
        reply_markup=get_target_selection_keyboard(),
        parse_mode="HTML"
    )

    await state.set_state(BroadcastStates.selecting_target)


@router.callback_query(F.data == "back_to_broadcast_type")
async def cmd_back_to_broadcast_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text(
        "üì§ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=get_broadcast_type_keyboard(),
        parse_mode="HTML"
    )

    await state.set_state(BroadcastStates.selecting_type)
    await callback.answer()


@router.callback_query(F.data.startswith("broadcast_target:"), BroadcastStates.selecting_target)
async def process_target_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    user_id = callback.from_user.id
    _, target_type = callback.data.split(":", 1)

    BROADCAST_DATA[user_id]["target_type"] = target_type

    if target_type == "all":
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = count_users()
        BROADCAST_DATA[user_id]["total_recipients"] = total_users

        await callback.message.edit_text(
            "‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>",
            reply_markup=get_time_selection_keyboard(),
            parse_mode="HTML"
        )

        await state.set_state(BroadcastStates.selecting_time)

    elif target_type == "active":
        await callback.message.edit_text(
            "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n\n"
            "–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —É—á–∏—Ç—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?",
            reply_markup=get_active_users_period_keyboard(),
            parse_mode="HTML"
        )

        await state.set_state(BroadcastStates.selecting_active_period)

    elif target_type == "region":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        regions_dict = get_user_regions()
        regions = list(regions_dict.keys())
        REGIONS_CACHE[user_id] = regions_dict

        if not regions:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=get_back_keyboard("back_to_broadcast_target"),
                parse_mode="HTML"
            )
            return

        CURRENT_PAGE[user_id] = 1

        await callback.message.edit_text(
            "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:</b>",
            reply_markup=get_regions_keyboard(regions),
            parse_mode="HTML"
        )

        await state.set_state(BroadcastStates.selecting_region)

    await callback.answer()


@router.callback_query(F.data == "back_to_broadcast_target")
async def cmd_back_to_broadcast_target(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await callback.message.edit_text(
        "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:</b>",
        reply_markup=get_target_selection_keyboard(),
        parse_mode="HTML"
    )

    await state.set_state(BroadcastStates.selecting_target)
    await callback.answer()


@router.callback_query(F.data.startswith("active_period:"), BroadcastStates.selecting_active_period)
async def process_active_period(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user_id = callback.from_user.id
    _, days = callback.data.split(":", 1)
    days = int(days)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    active_users = get_active_users(days)

    BROADCAST_DATA[user_id]["active_days"] = days
    BROADCAST_DATA[user_id]["total_recipients"] = len(active_users)

    await callback.message.edit_text(
        f"‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(active_users)}",
        reply_markup=get_time_selection_keyboard(),
        parse_mode="HTML"
    )

    await state.set_state(BroadcastStates.selecting_time)
    await callback.answer()


@router.callback_query(F.data.startswith("regions_page:"), BroadcastStates.selecting_region)
async def process_regions_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    user_id = callback.from_user.id
    _, page = callback.data.split(":", 1)
    page = int(page)

    CURRENT_PAGE[user_id] = page

    regions = list(REGIONS_CACHE[user_id].keys())

    await callback.message.edit_text(
        "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:</b>",
        reply_markup=get_regions_keyboard(regions, page),
        parse_mode="HTML"
    )

    await callback.answer()


@router.callback_query(F.data.startswith("select_region:"), BroadcastStates.selecting_region)
async def process_region_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    user_id = callback.from_user.id
    _, region = callback.data.split(":", 1)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    users_in_region = REGIONS_CACHE[user_id].get(region, [])

    BROADCAST_DATA[user_id]["region"] = region
    BROADCAST_DATA[user_id]["total_recipients"] = len(users_in_region)

    await callback.message.edit_text(
        f"‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n\n"
        f"–í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: {region}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users_in_region)}",
        reply_markup=get_time_selection_keyboard(),
        parse_mode="HTML"
    )

    await state.set_state(BroadcastStates.selecting_time)
    await callback.answer()


@router.callback_query(F.data.startswith("broadcast_time:"), BroadcastStates.selecting_time)
async def process_time_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    user_id = callback.from_user.id
    _, time_option = callback.data.split(":", 1)

    if time_option == "now":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ–π—á–∞—Å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        await show_broadcast_preview(callback.message, user_id, state)
    elif time_option == "schedule":
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        await callback.message.edit_text(
            "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è\n"
            "–∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023 15:30) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã",
            reply_markup=get_back_keyboard("back_to_broadcast_time"),
            parse_mode="HTML"
        )

        await state.set_state(BroadcastStates.entering_scheduled_time)

    await callback.answer()


@router.callback_query(F.data == "back_to_broadcast_time")
async def cmd_back_to_broadcast_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    await callback.message.edit_text(
        "‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>",
        reply_markup=get_time_selection_keyboard(),
        parse_mode="HTML"
    )

    await state.set_state(BroadcastStates.selecting_time)
    await callback.answer()


@router.message(BroadcastStates.entering_scheduled_time)
async def process_scheduled_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    user_id = message.from_user.id
    time_string = message.text.strip()

    scheduled_time = parse_scheduled_time(time_string)

    if not scheduled_time:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "- –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è\n"
            "- –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023 15:30) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã",
            reply_markup=get_back_keyboard("back_to_broadcast_time"),
            parse_mode="HTML"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
    if scheduled_time <= datetime.now():
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.",
            reply_markup=get_back_keyboard("back_to_broadcast_time"),
            parse_mode="HTML"
        )
        return

    BROADCAST_DATA[user_id]["scheduled_time"] = scheduled_time.strftime("%Y-%m-%d %H:%M:%S")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
    await show_broadcast_preview(message, user_id, state)


async def show_broadcast_preview(message, user_id, state):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_data = BROADCAST_DATA[user_id]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await state.set_state(BroadcastStates.preview)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    preview_text = format_broadcast_preview(broadcast_data)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    has_buttons = bool(broadcast_data.get("buttons", []))
    keyboard = get_broadcast_preview_keyboard(has_buttons, broadcast_data.get("buttons", []))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    if broadcast_data.get("media_type") == "photo" and broadcast_data.get("media_file"):
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å —Ñ–æ—Ç–æ
        await message.answer_photo(
            photo=broadcast_data["media_file"],
            caption=preview_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        await message.edit_text(
            preview_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )


@router.callback_query(F.data == "edit_broadcast_text", BroadcastStates.preview)
async def cmd_edit_broadcast_text(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.",
        parse_mode="HTML"
    )

    await state.set_state(BroadcastStates.entering_text)
    await callback.answer()


@router.callback_query(F.data.startswith("add_broadcast_buttons"), BroadcastStates.preview)
async def cmd_add_broadcast_buttons(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    user_id = callback.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    TEMP_BUTTONS[user_id] = []

    await callback.message.edit_text(
        "üîò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏|https://example.com</code>\n\n"
        "–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–ù–∞—à —Å–∞–π—Ç|https://example.com\n"
        "–ù–∞—à –∫–∞–Ω–∞–ª|https://t.me/example</code>",
        reply_markup=get_back_keyboard("back_to_preview"),
        parse_mode="HTML"
    )

    await state.set_state(BroadcastStates.editing_buttons)
    await callback.answer()


@router.callback_query(F.data == "edit_broadcast_buttons", BroadcastStates.preview)
async def cmd_edit_broadcast_buttons(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback.from_user.id
    buttons = BROADCAST_DATA[user_id].get("buttons", [])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    buttons_text = ""
    for button in buttons:
        if "text" in button and "url" in button:
            buttons_text += f"{button['text']}|{button['url']}\n"

    await callback.message.edit_text(
        "üîò <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫</b>\n\n"
        "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏|https://example.com</code>\n\n"
        "–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.\n"
        "–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:\n\n"
        f"<code>{buttons_text}</code>",
        reply_markup=get_back_keyboard("back_to_preview"),
        parse_mode="HTML"
    )

    await state.set_state(BroadcastStates.editing_buttons)
    await callback.answer()


@router.callback_query(F.data == "back_to_preview", BroadcastStates.editing_buttons)
async def cmd_back_to_preview(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback.from_user.id

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if user_id in TEMP_BUTTONS:
        del TEMP_BUTTONS[user_id]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
    await show_broadcast_preview(callback.message, user_id, state)
    await callback.answer()


@router.message(BroadcastStates.editing_buttons)
async def process_buttons_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–æ–∫"""
    user_id = message.from_user.id
    buttons_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫
    is_valid, error_message = validate_buttons_format(buttons_text)

    if not is_valid:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–æ–∫</b>\n\n"
            f"{error_message}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞.",
            reply_markup=get_back_keyboard("back_to_preview"),
            parse_mode="HTML"
        )
        return

    # –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
    buttons = parse_button_data(buttons_text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏
    BROADCAST_DATA[user_id]["buttons"] = buttons

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
    await show_broadcast_preview(message, user_id, state)


@router.callback_query(F.data == "confirm_broadcast", BroadcastStates.preview)
async def cmd_confirm_broadcast(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback.from_user.id
    broadcast_data = BROADCAST_DATA[user_id]

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    recipients_count = broadcast_data.get("total_recipients", 0)

    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É {recipients_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=get_confirm_cancel_keyboard("start_sending", "cancel_sending"),
        parse_mode="HTML"
    )

    await callback.answer()


@router.callback_query(F.data == "start_sending")
async def cmd_start_sending(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback.from_user.id
    broadcast_data = BROADCAST_DATA.get(user_id, {})

    if not broadcast_data:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_broadcast_menu_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    broadcast_id = start_broadcast(broadcast_data)

    if broadcast_id == -1:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_broadcast_menu_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()
        await callback.answer()
        return

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if "scheduled_time" in broadcast_data:
        scheduled_time = broadcast_data["scheduled_time"]
        await callback.message.edit_text(
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
            f"–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {scheduled_time}.",
            reply_markup=get_broadcast_menu_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()
        await callback.answer()

        # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∑–∞–¥–∞—á–∏ Celery –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        return

    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback.message.edit_text(
        f"üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id} –∑–∞–ø—É—â–µ–Ω–∞</b>\n\n"
        f"–ò–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...",
        reply_markup=get_broadcast_menu_keyboard(),
        parse_mode="HTML"
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await state.clear()
    if user_id in BROADCAST_DATA:
        del BROADCAST_DATA[user_id]

    await callback.answer()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(send_broadcast(bot, broadcast_id, broadcast_data))


async def send_broadcast(bot: Bot, broadcast_id: int, broadcast_data: Dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    target_type = broadcast_data.get("target_type", "all")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    if target_type == "all":
        users = get_all_users()
        recipients = [user[0] for user in users]  # user_id - –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞
    elif target_type == "active":
        days = broadcast_data.get("active_days", 30)
        recipients = get_active_users(days)
    elif target_type == "region":
        region = broadcast_data.get("region", "")
        regions_dict = get_user_regions()
        recipients = regions_dict.get(region, [])
    else:
        recipients = []

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
    update_broadcast_status(broadcast_id, "pending", 0)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    text = broadcast_data.get("text", "")
    media_type = broadcast_data.get("media_type")
    media_file = broadcast_data.get("media_file")
    buttons = broadcast_data.get("buttons", [])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    markup = None
    if buttons:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=button["text"], url=button["url"])]
            for button in buttons
        ])

    # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    sent_count = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for user_id in recipients:
        try:
            if media_type == "photo" and media_file:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=media_file,
                    caption=text,
                    reply_markup=markup
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=markup
                )

            sent_count += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if sent_count % 10 == 0:
                update_broadcast_status(broadcast_id, "pending", sent_count)

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
            await asyncio.sleep(0.05)

        except TelegramRetryAfter as e:
            # –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∂–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(e.retry_after)

            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                if media_type == "photo" and media_file:
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=media_file,
                        caption=text,
                        reply_markup=markup
                    )
                else:
                    await bot.send_message(
                        chat_id=user_id,
                        text=text,
                        reply_markup=markup
                    )

                sent_count += 1
            except Exception:
                continue

        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            continue

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
    update_broadcast_status(broadcast_id, "completed", sent_count)


@router.callback_query(F.data == "cancel_sending")
async def cmd_cancel_sending(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text(
        "‚ùå <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
        reply_markup=get_broadcast_menu_keyboard(),
        parse_mode="HTML"
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await state.clear()
    user_id = callback.from_user.id
    if user_id in BROADCAST_DATA:
        del BROADCAST_DATA[user_id]

    await callback.answer()


@router.callback_query(F.data == "cancel_broadcast")
async def cmd_cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        reply_markup=get_broadcast_menu_keyboard(),
        parse_mode="HTML"
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await state.clear()
    user_id = callback.from_user.id
    if user_id in BROADCAST_DATA:
        del BROADCAST_DATA[user_id]

    await callback.answer()


# –†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
@router.callback_query(F.data == "broadcast_templates")
async def cmd_broadcast_templates(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    templates = get_broadcast_templates()
    TEMPLATES_CACHE[user_id] = templates

    if not templates:
        await callback.message.edit_text(
            "üìù <b>–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω.",
            reply_markup=get_back_keyboard("back_to_broadcast_menu"),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "üìë <b>–®–∞–±–ª–æ–Ω—ã —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:",
            reply_markup=get_templates_keyboard(templates),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data == "create_new_template")
async def cmd_create_new_template(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await cmd_create_broadcast(callback, state)


@router.callback_query(F.data.startswith("templates_page:"))
async def cmd_templates_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    user_id = callback.from_user.id
    _, page = callback.data.split(":", 1)
    page = int(page)

    templates = TEMPLATES_CACHE.get(user_id, [])

    await callback.message.edit_text(
        "üìë <b>–®–∞–±–ª–æ–Ω—ã —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=get_templates_keyboard(templates, page),
        parse_mode="HTML"
    )

    await callback.answer()


# –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫
@router.callback_query(F.data == "broadcast_history")
async def cmd_broadcast_history(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    broadcasts = get_broadcast_history()

    if not broadcasts:
        await callback.message.edit_text(
            "üìù <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.",
            reply_markup=get_back_keyboard("back_to_broadcast_menu"),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
            reply_markup=get_broadcast_history_list_keyboard(broadcasts),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data.startswith("history_page:"))
async def cmd_history_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    _, page = callback.data.split(":", 1)
    page = int(page)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    broadcasts = get_broadcast_history()

    await callback.message.edit_text(
        "üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=get_broadcast_history_list_keyboard(broadcasts, page),
        parse_mode="HTML"
    )

    await callback.answer()


@router.callback_query(F.data.startswith("view_broadcast:"))
async def cmd_view_broadcast(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    _, broadcast_id = callback.data.split(":", 1)
    broadcast_id = int(broadcast_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    broadcast = get_broadcast_details(broadcast_id)

    if not broadcast:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_back_keyboard("broadcast_history"),
            parse_mode="HTML"
        )
    else:
        details_text = format_broadcast_details(broadcast)

        await callback.message.edit_text(
            details_text,
            reply_markup=get_broadcast_history_keyboard(broadcast_id),
            parse_mode="HTML"
        )

    await callback.answer()
