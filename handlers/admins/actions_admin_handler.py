import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from database.discounts_db import DiscountsDatabase
from database.warehouse_db import WarehouseDatabase
from states.discounts_admin_states import AdminActionStates
from keyboards.admins.discounts_admin_keyboards import (
    get_action_management_menu, get_all_actions_keyboard, ActionAdminCallback,
    get_action_admin_view_keyboard, get_action_delete_confirmation_keyboard,
    get_discount_type_keyboard, DiscountTypeCallback, get_calendar,
    get_action_fsm_nav_keyboard, get_action_confirmation_keyboard,
    get_action_target_type_keyboard, ActionTargetCallback,
    get_catalog_keyboard, ActionCatalogCallback, ActionPaginatorCallback,
    ActionEditCallback
)

actions_admin_router = Router()
db = DiscountsDatabase()
warehouse_db = WarehouseDatabase()

TOTAL_FSM_STEPS = 5


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_action_progress(step: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º."""
    filled = "‚ñà‚ñà"
    empty = "‚ñë‚ñë"
    return f"<code>{filled * step}{empty * (TOTAL_FSM_STEPS - step)}</code>"


def get_action_breadcrumbs(step_name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É '—Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫'."""
    return f"<i>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏ / –°–æ–∑–¥–∞–Ω–∏–µ / {step_name}</i>"


def format_action_details(action_data: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω–æ–º."""
    action = {
        'id': action_data[0], 'title': action_data[1], 'description': action_data[2],
        'product_id': action_data[3], 'discount_type': action_data[4], 'discount_value': action_data[5],
        'start_date': action_data[6], 'end_date': action_data[7], 'is_active': action_data[8],
        'created_at': action_data[9], 'created_by_id': action_data[10], 'created_by_username': action_data[11]
    }

    discount_str = f"{int(action['discount_value'])}%" if action[
                                                              'discount_type'] == 'percentage' else f"{int(action['discount_value'])} ‚ÇΩ"

    details = [
        f"üî• <b>{action['title']}</b>",
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {action['description']}",
        f"üí∏ <b>–°–∫–∏–¥–∫–∞:</b> {discount_str}",
        f"<b>üóìÔ∏è –°—Ä–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> —Å {action['start_date']} –ø–æ {action['end_date']}",
    ]
    if action['product_id']:
        product_name = warehouse_db.get_product_name_by_id(action['product_id'])
        details.append(f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product_name} (ID: <code>{action['product_id']}</code>)")

    details.append("\n<b>-- –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ --</b>")
    details.append(f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–∞' if action['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
    if action['created_by_username']:
        details.append(f"<b>–°–æ–∑–¥–∞–ª:</b> @{action['created_by_username']}")

    return "\n".join(details)


# --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–ø—Ä–æ—Å–º–æ—Ç—Ä, —É–¥–∞–ª–µ–Ω–∏–µ, –Ω–∞–≤–∏–≥–∞—Ü–∏—è) ---

@actions_admin_router.callback_query(F.data == "admin_manage_actions")
async def manage_actions_menu(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–∫—Ü–∏–π:", reply_markup=get_action_management_menu())
    await callback.answer()


@actions_admin_router.callback_query(F.data == "action_list_all")
async def list_all_actions(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    all_actions = db.get_all_actions()
    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ü–∏–π:\n(‚úÖ-–∞–∫—Ç–∏–≤–Ω–∞—è, ‚è≥-–±—É–¥—É—â–∞—è, üö´-–ø—Ä–æ—à–µ–¥—à–∞—è, ‚ùå-–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)",
        reply_markup=get_all_actions_keyboard(all_actions)
    )
    await callback.answer()


@actions_admin_router.callback_query(ActionAdminCallback.filter("view" == F.action))
async def admin_view_action(callback: CallbackQuery, callback_data: ActionAdminCallback):
    action_raw = db.get_action_details(callback_data.action_id)
    if not action_raw:
        await callback.answer("–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    text = format_action_details(action_raw)
    await callback.message.edit_text(text, reply_markup=get_action_admin_view_keyboard(callback_data.action_id,
                                                                                       bool(action_raw[8])), parse_mode='HTML')
    await callback.answer()


@actions_admin_router.callback_query(ActionAdminCallback.filter("toggle" == F.action))
async def toggle_action_status(callback: CallbackQuery, callback_data: ActionAdminCallback):
    action_details = db.get_action_details(callback_data.action_id)
    new_status = not action_details[8]  # is_active
    db.update_action_status(callback_data.action_id, new_status)
    await callback.answer(f"–°—Ç–∞—Ç—É—Å –∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {'–∞–∫—Ç–∏–≤–Ω–∞' if new_status else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}.")
    await admin_view_action(callback, callback_data)


@actions_admin_router.callback_query(ActionAdminCallback.filter("delete" == F.action))
async def delete_action_confirm(callback: CallbackQuery, callback_data: ActionAdminCallback):
    action_details = db.get_action_details(callback_data.action_id)
    title = action_details[1] if action_details else "???"
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é '<b>{title}</b>'?\n\n<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>",
        reply_markup=get_action_delete_confirmation_keyboard(callback_data.action_id), parse_mode='HTML'
    )
    await callback.answer()


@actions_admin_router.callback_query(ActionAdminCallback.filter("confirm_delete" == F.action))
async def delete_action_final(callback: CallbackQuery, callback_data: ActionAdminCallback, state: FSMContext):
    db.delete_action(callback_data.action_id)
    await callback.answer("–ê–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    await list_all_actions(callback, state)


# --- FSM –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ô –ê–ö–¶–ò–ò ---

@actions_admin_router.callback_query(F.data == "action_create_start")
async def action_create_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(AdminActionStates.enter_title)
    await callback.message.edit_text(
        f"{get_action_progress(1)}\n{get_action_breadcrumbs('–ù–∞–∑–≤–∞–Ω–∏–µ')}\n\n"
        "<b>–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏.</b>\n\n"
        "–≠—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥—è—Ç –∫–ª–∏–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–í–µ—Å–µ–Ω–Ω–∏–µ —Å–∫–∏–¥–∫–∏!').",
        reply_markup=get_action_fsm_nav_keyboard(), parse_mode='HTML'
    )


@actions_admin_router.message(AdminActionStates.enter_title)
async def process_action_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AdminActionStates.enter_description)
    await message.answer(
        f"{get_action_progress(2)}\n{get_action_breadcrumbs('–û–ø–∏—Å–∞–Ω–∏–µ')}\n\n"
        "<b>–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏.</b>",
        reply_markup=get_action_fsm_nav_keyboard(), parse_mode='HTML'
    )


@actions_admin_router.message(AdminActionStates.enter_description)
async def process_action_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AdminActionStates.choose_target_type)
    await message.answer(
        f"{get_action_progress(3)}\n{get_action_breadcrumbs('–í—ã–±–æ—Ä —Ü–µ–ª–∏')}\n\n"
        "<b>–®–∞–≥ 3/5: –í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —á—Ç–æ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∫–∏–¥–∫–∞.</b>",
        reply_markup=get_action_target_type_keyboard(), parse_mode='HTML'
    )


@actions_admin_router.callback_query(ActionTargetCallback.filter(), AdminActionStates.choose_target_type)
async def process_target_type(callback: CallbackQuery, callback_data: ActionTargetCallback, state: FSMContext):
    await state.update_data(target_type=callback_data.target_type)
    categories = warehouse_db.get_all_categories()
    if not categories:
        await callback.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤!", show_alert=True)
        return
    await state.update_data(available_categories=categories)
    await state.set_state(AdminActionStates.choose_category)
    await callback.message.edit_text(
        f"{get_action_progress(3)}\n{get_action_breadcrumbs('–í—ã–±–æ—Ä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
        reply_markup=get_catalog_keyboard(level='category', items=categories, page=0), parse_mode='HTML'
    )


@actions_admin_router.callback_query(ActionPaginatorCallback.filter())
async def process_pagination(callback: CallbackQuery, callback_data: ActionPaginatorCallback, state: FSMContext):
    data = await state.get_data()
    level, page = callback_data.level, callback_data.page
    items_map = {
        'category': data.get('available_categories', []),
        'product_name': data.get('available_product_names', []),
        'flavor': data.get('available_flavors', [])
    }
    await callback.message.edit_reply_markup(
        reply_markup=get_catalog_keyboard(level=level, items=items_map.get(level, []), page=page)
    )
    await callback.answer()


@actions_admin_router.callback_query(ActionCatalogCallback.filter(), StateFilter(AdminActionStates.choose_category,
                                                                                 AdminActionStates.choose_product_name,
                                                                                 AdminActionStates.choose_flavor))
async def process_catalog_choice(callback: CallbackQuery, callback_data: ActionCatalogCallback, state: FSMContext):
    data = await state.get_data()
    target_type, level, selected_index = data.get('target_type'), callback_data.level, int(callback_data.item_index)

    if level == 'category':
        category_name = data.get('available_categories', [])[selected_index]
        await state.update_data(category_name=category_name)
        if target_type == 'category':
            await state.update_data(product_id=None, target_name=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}")
            await go_to_discount_step(callback, state)
        else:
            product_names = warehouse_db.get_product_names_by_category(category_name)
            await state.update_data(available_product_names=product_names)
            await state.set_state(AdminActionStates.choose_product_name)
            await callback.message.edit_text(
                f"{get_action_progress(3)}\n{get_action_breadcrumbs('–í—ã–±–æ—Ä –õ–∏–Ω–µ–π–∫–∏')}\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–µ–π–∫—É —Ç–æ–≤–∞—Ä–æ–≤:</b>",
                reply_markup=get_catalog_keyboard(level='product_name', items=product_names, page=0), parse_mode='HTML'
            )
    elif level == 'product_name':
        product_name = data.get('available_product_names', [])[selected_index]
        await state.update_data(product_name=product_name)
        if target_type == 'product_name':
            await state.update_data(product_id=None, target_name=f"–õ–∏–Ω–µ–π–∫–∞: {product_name}")
            await go_to_discount_step(callback, state)
        else:
            flavors = warehouse_db.get_flavors_by_product_name(product_name)
            await state.update_data(available_flavors=flavors)
            await state.set_state(AdminActionStates.choose_flavor)
            await callback.message.edit_text(
                f"{get_action_progress(3)}\n{get_action_breadcrumbs('–í—ã–±–æ—Ä –í–∫—É—Å–∞')}\n\n"
                f"–õ–∏–Ω–µ–π–∫–∞: <b>{product_name}</b>\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä:</b>",
                reply_markup=get_catalog_keyboard(level='flavor', items=flavors, page=0), parse_mode='HTML'
            )
    elif level == 'flavor':
        product_id, product_full_name = data.get('available_flavors', [])[selected_index]
        await state.update_data(product_id=product_id, target_name=product_full_name)
        await go_to_discount_step(callback, state)


async def go_to_discount_step(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminActionStates.choose_discount_type)
    await callback.message.edit_text(
        f"{get_action_progress(4)}\n{get_action_breadcrumbs('–¢–∏–ø —Å–∫–∏–¥–∫–∏')}\n\n"
        "<b>–®–∞–≥ 4/5: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∏–¥–∫–∏.</b>",
        reply_markup=get_discount_type_keyboard(), parse_mode='HTML'
    )


@actions_admin_router.callback_query(DiscountTypeCallback.filter(), AdminActionStates.choose_discount_type)
async def process_action_discount_type(callback: CallbackQuery, callback_data: DiscountTypeCallback, state: FSMContext):
    await state.update_data(discount_type=callback_data.type_name)
    await state.set_state(AdminActionStates.enter_discount_value)
    await callback.message.edit_text(
        f"{get_action_progress(4)}\n{get_action_breadcrumbs('–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏')}\n\n"
        "<b>–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ).</b>",
        reply_markup=get_action_fsm_nav_keyboard(), parse_mode='HTML'
    )


@actions_admin_router.message(AdminActionStates.enter_discount_value)
async def process_action_discount_value(message: Message, state: FSMContext):
    try:
        value = float(message.text)
        if value <= 0:
            await message.answer("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        await state.update_data(discount_value=value)
        await state.set_state(AdminActionStates.enter_start_date)
        await message.answer(
            f"{get_action_progress(5)}\n{get_action_breadcrumbs('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞')}\n\n"
            "<b>–®–∞–≥ 5/5: –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏.</b>",
            reply_markup=await get_calendar(), parse_mode='HTML'
        )
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@actions_admin_router.callback_query(SimpleCalendarCallback.filter(),
                                     StateFilter(AdminActionStates.enter_start_date, AdminActionStates.enter_end_date))
async def process_action_date_selection(callback: CallbackQuery, callback_data: SimpleCalendarCallback,
                                        state: FSMContext):
    calendar = SimpleCalendar(show_alerts=True)
    selected, date = await calendar.process_selection(callback, callback_data)
    current_state_str = await state.get_state()

    if selected:
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –î–ê–¢–´ –ù–ê–ß–ê–õ–ê ---
        if current_state_str == AdminActionStates.enter_start_date:
            selected_start_date = date.date()
            await state.update_data(start_date=selected_start_date.strftime('%Y-%m-%d'))
            await state.set_state(AdminActionStates.enter_end_date)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è, –ø–µ—Ä–µ–¥–∞–≤–∞—è –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é
            await callback.message.edit_text(
                f"{get_action_progress(5)}\n{get_action_breadcrumbs('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è')}\n\n"
                "<b>–®–∞–≥ 5/5: –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏.</b>",
                reply_markup=await get_calendar(min_date=selected_start_date), parse_mode='HTML'
            )

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –î–ê–¢–´ –û–ö–û–ù–ß–ê–ù–ò–Ø ---
        elif current_state_str == AdminActionStates.enter_end_date:
            data = await state.get_data()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—É—é –¥–∞—Ç—É –∏–∑ state –≤ –æ–±—ä–µ–∫—Ç date
            start_date_obj = datetime.datetime.strptime(data['start_date'], '%Y-%m-%d').date()
            selected_end_date = date.date()

            # --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
            # –î–æ–±–∞–≤–ª—è–µ–º –∂–µ—Å—Ç–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ UI –¥–∞–ª —Å–±–æ–π
            if selected_end_date < start_date_obj:
                await callback.answer(
                    "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞!",
                    show_alert=True
                )
                # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –∏—Å—á–µ–∑–ª–∞
                await callback.message.edit_reply_markup(
                    reply_markup=await get_calendar(min_date=start_date_obj)
                )
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ

            # –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∏–¥–µ–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            await state.update_data(end_date=selected_end_date.strftime('%Y-%m-%d'))
            await show_action_confirmation_step(callback, state)


async def show_action_confirmation_step(callback_or_message: CallbackQuery | Message, state: FSMContext):
    data = await state.get_data()
    discount_str = f"{int(data.get('discount_value', 0))}%" if data.get(
        'discount_type') == 'percentage' else f"{int(data.get('discount_value', 0))} ‚ÇΩ"
    target_str = data.get('target_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    text = (
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data.get('title')}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data.get('description')}\n"
        f"<b>–¶–µ–ª—å –∞–∫—Ü–∏–∏:</b> {target_str}\n"
        f"<b>–°–∫–∏–¥–∫–∞:</b> {discount_str}\n"
        f"<b>–ù–∞—á–∞–ª–æ:</b> {data.get('start_date')}\n"
        f"<b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {data.get('end_date')}\n"
    )
    await state.set_state(AdminActionStates.confirm_creation)
    if isinstance(callback_or_message, CallbackQuery):
        await callback_or_message.message.edit_text(text, reply_markup=get_action_confirmation_keyboard(),
                                                    parse_mode='HTML')
    else:
        await callback_or_message.answer(text, reply_markup=get_action_confirmation_keyboard(), parse_mode='HTML')


@actions_admin_router.callback_query(ActionEditCallback.filter(), AdminActionStates.confirm_creation)
async def edit_action_field(callback: CallbackQuery, callback_data: ActionEditCallback, state: FSMContext):
    await callback.answer(f"–õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—è '{callback_data.field}' –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.",
                          show_alert=True)


@actions_admin_router.callback_query(F.data == "action_confirm_creation", AdminActionStates.confirm_creation)
async def save_action_to_db(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data['created_by_id'] = callback.from_user.id
    data['created_by_username'] = callback.from_user.username
    try:
        db.add_action(data)
        await state.clear()
        await callback.message.edit_text(f"‚úÖ –ê–∫—Ü–∏—è '<b>{data['title']}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", parse_mode='HTML')
        await callback.message.answer("–í—ã –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏—è–º–∏.", reply_markup=get_action_management_menu(),
                                      )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏: {e}")
    finally:
        await callback.answer()
