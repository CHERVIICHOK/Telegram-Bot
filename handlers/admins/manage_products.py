from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.admins.products_db import (
    get_paginated_products, get_product_details, add_product,
    update_product, toggle_product_status, get_categories,
    add_category, update_category, delete_category, ensure_product_status_column
)
from filters.admin_filter import AdminFilter
from keyboards.admins.product_keyboards import (
    get_products_menu_keyboard, get_category_selection_keyboard,
    get_products_list_keyboard, get_product_details_keyboard,
    get_edit_product_keyboard, get_categories_management_keyboard,
    get_confirm_cancel_keyboard, get_back_keyboard
)
from utils.product_utils import (
    format_product_details, validate_product_data,
    prepare_product_data, get_field_description
)

router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ProductStates(StatesGroup):
    choosing_category = State()
    entering_product_name = State()
    entering_flavor = State()
    entering_price = State()
    entering_description = State()
    entering_quantity = State()
    entering_image_path = State()

    editing_product = State()
    editing_field = State()

    adding_category = State()
    editing_category = State()
    confirming_category_delete = State()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
CURRENT_CATEGORY = {}  # user_id -> category
CURRENT_PAGE = {}  # user_id -> page
CURRENT_PRODUCT = {}  # user_id -> product_id
TEMP_PRODUCT_DATA = {}  # user_id -> dict

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü is_active —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
ensure_product_status_column()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.callback_query(F.data == "manage_products")
async def cmd_manage_products(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    await callback.message.edit_text(
        "üõçÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_products_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_admin_menu")
async def cmd_back_to_admin_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    from keyboards.admins.menu_keyboard import get_admin_menu_keyboard

    await callback.message.edit_text(
        "üîë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_products_menu")
async def cmd_back_to_products_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    await state.clear()
    await cmd_manage_products(callback)


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(F.data == "view_products")
async def cmd_view_products(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
    user_id = callback.from_user.id
    CURRENT_PAGE[user_id] = 1

    categories = get_categories()

    await callback.message.edit_text(
        "üóÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:</b>",
        reply_markup=get_category_selection_keyboard(categories, action="view"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("view_category:"))
async def cmd_view_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = callback.from_user.id
    _, category, page_str = callback.data.split(":", 2)
    page = int(page_str) if page_str.isdigit() else 1

    CURRENT_PAGE[user_id] = page
    CURRENT_CATEGORY[user_id] = None if category == "all" else category

    await show_products_list(callback.message, user_id)
    await callback.answer()


@router.callback_query(F.data.startswith("products_page:"))
async def cmd_products_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    user_id = callback.from_user.id
    data_parts = callback.data.split(":", 2)

    page = int(data_parts[1])
    category = None if data_parts[2] == "all" else data_parts[2]

    CURRENT_PAGE[user_id] = page
    CURRENT_CATEGORY[user_id] = category

    await show_products_list(callback.message, user_id)
    await callback.answer()


@router.callback_query(F.data == "back_to_categories")
async def cmd_back_to_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await cmd_view_products(callback)


@router.callback_query(F.data.startswith("product_details:"))
async def cmd_product_details(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞"""
    user_id = callback.from_user.id
    _, product_id = callback.data.split(":", 1)

    CURRENT_PRODUCT[user_id] = int(product_id)

    product = get_product_details(int(product_id))
    if not product:
        await callback.message.edit_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_back_keyboard("back_to_products_list")
        )
        await callback.answer()
        return

    is_active = product[9] if len(product) > 9 else 1

    await callback.message.edit_text(
        format_product_details(product),
        reply_markup=get_product_details_keyboard(product_id, is_active=bool(is_active)),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_products_list")
async def cmd_back_to_products_list(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    user_id = callback.from_user.id
    await show_products_list(callback.message, user_id)
    await callback.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "add_product")
async def cmd_add_product(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    user_id = callback.from_user.id
    TEMP_PRODUCT_DATA[user_id] = {}

    categories = get_categories()

    await callback.message.edit_text(
        "üóÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:</b>",
        reply_markup=get_category_selection_keyboard(categories, action="add"),
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.choosing_category)
    await callback.answer()


@router.callback_query(F.data.startswith("select_category:"), ProductStates.choosing_category)
async def process_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    user_id = callback.from_user.id
    _, category = callback.data.split(":", 1)

    TEMP_PRODUCT_DATA[user_id]['category'] = category

    await callback.message.edit_text(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>"
    )

    await state.set_state(ProductStates.entering_product_name)
    await callback.answer()


@router.message(ProductStates.choosing_category)
async def process_category_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    category = message.text.strip()

    if not category:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    TEMP_PRODUCT_DATA[user_id]['category'] = category

    await message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>",
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.entering_product_name)


@router.message(ProductStates.entering_product_name)
async def process_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    product_name = message.text.strip()

    if not product_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    TEMP_PRODUCT_DATA[user_id]['product_name'] = product_name

    await message.answer(
        "üç¨ <b>–í–≤–µ–¥–∏—Ç–µ –í–∫—É—Å —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):</b>\n"
        "–ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –í–∫—É—Å–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'",
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.entering_flavor)


@router.message(ProductStates.entering_flavor)
async def process_flavor(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –í–∫—É—Å–∞ —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    flavor = message.text.strip()

    if flavor == '-':
        flavor = ''

    TEMP_PRODUCT_DATA[user_id]['flavor'] = flavor

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    product_name = TEMP_PRODUCT_DATA[user_id]['product_name']
    if flavor:
        TEMP_PRODUCT_DATA[user_id]['product_full_name'] = f"{product_name} {flavor}"
    else:
        TEMP_PRODUCT_DATA[user_id]['product_full_name'] = product_name

    await message.answer(
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):</b>",
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.entering_price)


@router.message(ProductStates.entering_price)
async def process_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    price_text = message.text.strip()

    try:
        price = float(price_text)
        if price < 0:
            raise ValueError("Negative price")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    TEMP_PRODUCT_DATA[user_id]['price'] = price

    await message.answer(
        "üìã <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'",
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.entering_description)


@router.message(ProductStates.entering_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    description = message.text.strip()

    if description == '-':
        description = ''

    TEMP_PRODUCT_DATA[user_id]['description'] = description

    await message.answer(
        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b>",
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.entering_quantity)


@router.message(ProductStates.entering_quantity)
async def process_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    quantity_text = message.text.strip()

    try:
        quantity = int(quantity_text)
        if quantity < 0:
            raise ValueError("Negative quantity")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    TEMP_PRODUCT_DATA[user_id]['quantity'] = quantity

    await message.answer(
        "üñº <b>–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞:</b>\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'",
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.entering_image_path)


@router.message(ProductStates.entering_image_path)
async def process_image_path(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    image_path = message.text.strip()

    if image_path == '-':
        image_path = ''

    TEMP_PRODUCT_DATA[user_id]['image_path'] = image_path
    TEMP_PRODUCT_DATA[user_id]['is_active'] = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    product_id = add_product(TEMP_PRODUCT_DATA[user_id])

    if product_id != -1:
        product = get_product_details(product_id)

        await message.answer(
            "‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n" +
            format_product_details(product),
            reply_markup=get_products_menu_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_products_menu_keyboard(),
            parse_mode="HTML"
        )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    TEMP_PRODUCT_DATA.pop(user_id, None)
    await state.clear()


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("edit_product:"))
async def cmd_edit_product(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    _, product_id = callback.data.split(":", 1)

    await callback.message.edit_text(
        "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:</b>",
        reply_markup=get_edit_product_keyboard(product_id),
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.editing_product)
    await callback.answer()


@router.callback_query(F.data.startswith("edit_product_field:"), ProductStates.editing_product)
async def cmd_edit_product_field(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    _, product_id, field = callback.data.split(":", 2)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(product_id=int(product_id), field=field)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
    product = get_product_details(int(product_id))
    field_value = ""

    if product:
        if field == "category":
            field_value = product[1]
        elif field == "product_name":
            field_value = product[2]
        elif field == "flavor":
            field_value = product[4]
        elif field == "price":
            field_value = product[5]
        elif field == "description":
            field_value = product[6]
        elif field == "quantity":
            field_value = product[7]
        elif field == "image_path":
            field_value = product[8]

    field_description = get_field_description(field)

    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {field_description}</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{field_value}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.editing_field)
    await callback.answer()


@router.message(ProductStates.editing_field)
async def process_field_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    new_value = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    product_id = data.get('product_id')
    field = data.get('field')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    is_valid, error_message = validate_product_data(field, new_value)

    if not is_valid:
        await message.answer(f"‚ùå {error_message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = prepare_product_data(field, new_value)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = update_product(product_id, update_data)

    if success:
        product = get_product_details(product_id)

        await message.answer(
            "‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n" +
            format_product_details(product),
            reply_markup=get_product_details_keyboard(product_id,
                                                      is_active=bool(product[9] if len(product) > 9 else 1)),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_product_details_keyboard(product_id),
            parse_mode="HTML"
        )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("toggle_product:"))
async def cmd_toggle_product(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    _, product_id, new_status = callback.data.split(":", 2)

    success = toggle_product_status(int(product_id), bool(int(new_status)))

    if success:
        product = get_product_details(int(product_id))

        await callback.message.edit_text(
            "‚úÖ <b>–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n" +
            format_product_details(product),
            reply_markup=get_product_details_keyboard(product_id, is_active=bool(int(new_status))),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞!</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_product_details_keyboard(product_id),
            parse_mode="HTML"
        )

    await callback.answer()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@router.callback_query(F.data == "manage_categories")
async def cmd_manage_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    await callback.message.edit_text(
        "üóÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_categories_management_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "add_category")
async def cmd_add_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.adding_category)
    await callback.answer()


@router.message(ProductStates.adding_category)
async def process_add_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_name = message.text.strip()

    if not category_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    success = add_category(category_name)

    if success:
        await message.answer(
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>",
            reply_markup=get_categories_management_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            f"‚ùå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>",
            reply_markup=get_categories_management_keyboard(),
            parse_mode="HTML"
        )

    await state.clear()


@router.callback_query(F.data == "edit_categories")
async def cmd_edit_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    categories = get_categories()

    await callback.message.edit_text(
        "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
        reply_markup=get_category_selection_keyboard(categories, action="edit"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_category:"))
async def cmd_edit_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _, category = callback.data.split(":", 1)

    await state.update_data(old_category=category)

    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.editing_category)
    await callback.answer()


@router.message(ProductStates.editing_category)
async def process_edit_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    new_category = message.text.strip()

    if not new_category:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    old_category = data.get('old_category')

    success = update_category(old_category, new_category)

    if success:
        await message.answer(
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ —Å '{old_category}' –Ω–∞ '{new_category}'!</b>",
            reply_markup=get_categories_management_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_categories_management_keyboard(),
            parse_mode="HTML"
        )

    await state.clear()


@router.callback_query(F.data == "delete_categories")
async def cmd_delete_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    categories = get_categories()

    await callback.message.edit_text(
        "‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!",
        reply_markup=get_category_selection_keyboard(categories, action="delete"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_category:"))
async def cmd_delete_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    _, category = callback.data.split(":", 1)

    await state.update_data(category_to_delete=category)

    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'?</b>\n\n"
        "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!",
        reply_markup=get_confirm_cancel_keyboard("delete_category"),
        parse_mode="HTML"
    )

    await state.set_state(ProductStates.confirming_category_delete)
    await callback.answer()


@router.callback_query(F.data == "confirm_delete_category", ProductStates.confirming_category_delete)
async def cmd_confirm_delete_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    category = data.get('category_to_delete')

    success = delete_category(category)

    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>\n"
            "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.",
            reply_markup=get_categories_management_keyboard(),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_categories_management_keyboard(),
            parse_mode="HTML"
        )

    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel_delete_category", ProductStates.confirming_category_delete)
async def cmd_cancel_delete_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.message.edit_text(
        "üîÑ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>",
        reply_markup=get_categories_management_keyboard(),
        parse_mode="HTML"
    )

    await state.clear()
    await callback.answer()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def show_products_list(message, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    category = CURRENT_CATEGORY.get(user_id)
    page = CURRENT_PAGE.get(user_id, 1)

    products, total_pages = get_paginated_products(category, page)

    header = f"üì¶ <b>–¢–æ–≤–∞—Ä—ã{'</b>' if not category else f' –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}</b>'}"
    products_text = ""

    if not products:
        products_text = "\n\n–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    await message.edit_text(
        f"{header}{products_text}",
        reply_markup=get_products_list_keyboard(products, category, page, total_pages),
        parse_mode="HTML"
    )
