import logging
from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.enums import ParseMode

from filters.admin_filter import AdminFilter
from states.client_contact_state import ClientContactStates
from keyboards.admins.client_contact_keyboards import (
    get_message_type_keyboard,
    get_confirm_keyboard,
    get_back_to_menu_keyboard,
    get_cancel_keyboard, get_inline_cancel_keyboard
)
from keyboards.admins.menu_keyboard import get_admin_menu_keyboard
from database.admins.client_contact_db import (
    log_message_sent,
    get_client_info, get_client_orders
)

logger = logging.getLogger(__name__)

router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())


@router.message(ClientContactStates.waiting_for_client_id)
async def process_client_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –∫–ª–∏–µ–Ω—Ç–∞"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_admin_menu_keyboard()
        )
        await state.clear()
        return

    try:
        client_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–ª–∏–µ–Ω—Ç–∞:"
        )
        return

    client_info = get_client_info(client_id)

    if client_info:
        info_text = (
            f"‚úÖ <b>–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:</b>\n"
            f"ID: {client_id}\n"
        )
        if client_info.get('first_name'):
            info_text += f"–ò–º—è: {client_info['first_name']}\n"
        if client_info.get('last_name'):
            info_text += f"–§–∞–º–∏–ª–∏—è: {client_info['last_name']}\n"
        if client_info.get('username'):
            info_text += f"Username: @{client_info['username']}\n"
        if client_info.get('first_login_date'):
            info_text += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {client_info['first_login_date']}\n"

        orders = get_client_orders(client_id, limit=3)
        if orders:
            info_text += f"\nüì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã: {len(orders)}"

        info_text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:"
    else:
        info_text = (
            f"<b>‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —Å ID <code>{client_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ ID.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:"
        )

    await state.update_data(client_id=client_id, client_info=client_info)
    await message.answer(
        info_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_message_type_keyboard()
    )
    await state.set_state(ClientContactStates.waiting_for_message_type)


@router.callback_query(F.data == "client_contact", AdminFilter())
async def start_client_contact(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
    await callback.message.edit_text(
        "üí¨ <b>–°–≤—è–∑—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
        "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_inline_cancel_keyboard()
    )

    await callback.message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ Telegram-ID –∏–∑ –∑–∞–∫–∞–∑–∞:</b>",
        parse_mode='HTML')

    await state.set_state(ClientContactStates.waiting_for_client_id)
    await callback.answer()


@router.message(ClientContactStates.waiting_for_client_id)
async def process_client_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –∫–ª–∏–µ–Ω—Ç–∞"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_admin_menu_keyboard()
        )
        await state.clear()
        return

    try:
        client_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–ª–∏–µ–Ω—Ç–∞:"
        )
        return

    client_info = get_client_info(client_id)

    if client_info:
        info_text = (
            f"‚úÖ <b>–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:</b>\n"
            f"ID: {client_id}\n"
        )
        if client_info.get('first_name'):
            info_text += f"–ò–º—è: {client_info['first_name']}\n"
        if client_info.get('username'):
            info_text += f"Username: @{client_info['username']}\n"
        if client_info.get('phone'):
            info_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {client_info['phone']}\n"

        info_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:"
    else:
        info_text = (
            f"<b>‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —Å ID <code>{client_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ ID.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:"
        )

    await state.update_data(client_id=client_id, client_info=client_info)
    await message.answer(
        info_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_message_type_keyboard()
    )
    await state.set_state(ClientContactStates.waiting_for_message_type)


@router.callback_query(
    ClientContactStates.waiting_for_message_type,
    F.data.in_(["msg_type_text", "msg_type_image"])
)
async def process_message_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_type = "text" if callback.data == "msg_type_text" else "image"
    await state.update_data(message_type=message_type)

    if message_type == "text":
        await callback.message.edit_text(
            "üìù <b>–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:\n\n"
            "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=get_inline_cancel_keyboard()
        )
        await state.set_state(ClientContactStates.waiting_for_text_message)
    else:
        await callback.message.edit_text(
            "üñºÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:",
            parse_mode=ParseMode.HTML
        )
        await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(ClientContactStates.waiting_for_image)

    await callback.answer()


@router.message(ClientContactStates.waiting_for_text_message, F.text)
async def process_text_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_admin_menu_keyboard()
        )
        await state.clear()
        return

    await state.update_data(message_text=message.text)
    data = await state.get_data()

    preview_text = (
        f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ID {data['client_id']}\n"
        f"–¢–∏–ø: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n{message.text}"
    )

    await message.answer(
        preview_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_confirm_keyboard(data['client_id'])
    )
    await state.set_state(ClientContactStates.confirm_sending)


@router.message(ClientContactStates.waiting_for_image, F.photo)
async def process_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    photo = message.photo[-1]
    await state.update_data(photo_file_id=photo.file_id)

    await message.answer(
        "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–º–µ—Å—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º "
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É '.' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ClientContactStates.waiting_for_image_caption)


@router.message(ClientContactStates.waiting_for_image_caption, F.text)
async def process_image_caption(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_admin_menu_keyboard()
        )
        await state.clear()
        return

    caption = None if message.text == "." else message.text
    await state.update_data(message_text=caption)

    data = await state.get_data()

    preview_text = (
        f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ID {data['client_id']}\n"
        f"–¢–∏–ø: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
    )
    if caption:
        preview_text += f"–ü–æ–¥–ø–∏—Å—å: {caption}"

    await message.answer_photo(
        photo=data['photo_file_id'],
        caption=preview_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_confirm_keyboard(data['client_id'])
    )
    await state.set_state(ClientContactStates.confirm_sending)


@router.callback_query(
    ClientContactStates.confirm_sending,
    F.data.startswith("confirm_send_")
)
async def confirm_and_send(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")

    data = await state.get_data()
    client_id = data['client_id']
    admin_id = callback.from_user.id

    try:
        if data['message_type'] == 'text':
            await bot.send_message(
                chat_id=client_id,
                text=data['message_text'],
                parse_mode=ParseMode.HTML
            )
        else:
            await bot.send_photo(
                chat_id=client_id,
                photo=data['photo_file_id'],
                caption=data.get('message_text'),
                parse_mode=ParseMode.HTML if data.get('message_text') else None
            )

        log_message_sent(
            admin_id=admin_id,
            client_id=client_id,
            message_text=data.get('message_text'),
            message_type=data['message_type'],
            image_file_id=data.get('photo_file_id'),
            success=True
        )

        await callback.message.answer(
            "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_menu_keyboard()
        )

    except TelegramForbiddenError:
        error_msg = "–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        log_message_sent(
            admin_id=admin_id,
            client_id=client_id,
            message_text=data.get('message_text'),
            message_type=data['message_type'],
            image_file_id=data.get('photo_file_id'),
            success=False,
            error_message=error_msg
        )

        await callback.message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_msg}\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Å –Ω–∏–º –¥–∏–∞–ª–æ–≥.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_menu_keyboard()
        )

    except TelegramBadRequest as e:
        error_msg = str(e)
        log_message_sent(
            admin_id=admin_id,
            client_id=client_id,
            message_text=data.get('message_text'),
            message_type=data['message_type'],
            image_file_id=data.get('photo_file_id'),
            success=False,
            error_message=error_msg
        )

        await callback.message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {error_msg}",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"Unexpected error sending message: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "üõ† –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º.",
            reply_markup=get_back_to_menu_keyboard()
        )

    await state.clear()


@router.callback_query(F.data == "edit_message")
async def edit_message(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    data = await state.get_data()

    if data['message_type'] == 'text':
        await callback.message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(ClientContactStates.waiting_for_text_message)
    else:
        await callback.message.answer(
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(ClientContactStates.waiting_for_image)

    await callback.answer()


@router.callback_query(F.data == "client_contact_cancel", StateFilter("*"))
async def cancel_client_contact(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
    try:
        await callback.message.edit_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_admin_menu_keyboard()
        )
    except TelegramBadRequest:
        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_admin_menu_keyboard()
        )

    await callback.message.answer(
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=ReplyKeyboardRemove()
    )

    await state.clear()
    await callback.answer()


@router.message(ClientContactStates.waiting_for_image, ~F.photo)
async def process_wrong_type_for_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_admin_menu_keyboard()
        )
        await state.clear()
        return

    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'",
        reply_markup=get_cancel_keyboard()
    )


@router.callback_query(F.data == "admin_menu")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_menu_keyboard()
    )
    await state.clear()
    await callback.answer()
