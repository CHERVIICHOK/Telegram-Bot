import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.admins.staff_db import (
    get_staff_roles, get_staff_by_role, get_all_active_staff,
    get_staff_by_id, add_staff_member, update_staff_role,
    update_staff_access_level, toggle_staff_status, delete_staff_member,
    get_staff_by_telegram_id, get_all_available_roles
)
from filters.admin_filter import AdminFilter
from keyboards.admins.staff_keyboards import (
    get_staff_management_keyboard, get_staff_roles_keyboard,
    get_staff_list_keyboard, get_staff_detail_keyboard,
    get_role_selection_keyboard, get_confirmation_keyboard,
    get_skip_keyboard, get_staff_statuses_keyboard, get_cancel_keyboard, get_cancel_keyboard_create_status,
    get_description_step_keyboard
)
from states.staff_state import StaffAddStates, StaffEditStates, StaffStatusCreateState
from database.admins.staff_db import (
    get_all_staff_statuses, add_new_staff_status, get_staff_status_details
)

logger = logging.getLogger(__name__)

router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
@router.callback_query(F.data == "manage_staff")
async def staff_management_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üßë‚Äçüíº –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º",
        reply_markup=get_staff_management_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª—è–º)
@router.callback_query(F.data == "staff_view")
async def staff_view_roles(callback: CallbackQuery):
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π (–≤–∫–ª—é—á–∞—è –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ)
    roles = get_all_available_roles()

    await callback.message.edit_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_staff_roles_keyboard(roles)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
@router.callback_query(F.data.startswith("staff_role_"))
async def staff_list_by_role(callback: CallbackQuery):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–ª—å –∏–∑ callback_data
    role = callback.data.split("_")[2]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
    staff_list = get_staff_by_role(role)

    if not staff_list:
        await callback.message.edit_text(
            f"‚ùî –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —Ä–æ–ª—å—é '{role}' <b>–Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>.",
            reply_markup=get_staff_roles_keyboard(get_staff_roles()),
            parse_mode='HTML'
        )
        return

    await callback.message.edit_text(
        f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—å—é '{role}':",
        reply_markup=get_staff_list_keyboard(staff_list)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@router.callback_query(F.data == "staff_all")
async def staff_list_all(callback: CallbackQuery):
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    staff_list = get_all_active_staff()

    if not staff_list:
        await callback.message.edit_text(
            "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=get_staff_roles_keyboard(get_staff_roles())
        )
        return

    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö <b>–∞–∫—Ç–∏–≤–Ω—ã—Ö</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:",
        reply_markup=get_staff_list_keyboard(staff_list),
        parse_mode='HTML'
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
@router.callback_query(F.data.startswith("staff_id_"))
async def staff_detail(callback: CallbackQuery):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ callback_data
    staff_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    staff = get_staff_by_id(staff_id)

    if not staff:
        await callback.message.edit_text(
            "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_staff_management_keyboard()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    staff_info = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
        f"ID: {staff['id']}\n"
        f"Telegram ID: {staff['telegram_id']}\n"
        f"Username: {staff['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ò–º—è: {staff['first_name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {staff['last_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {staff['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–†–æ–ª—å: {staff['role']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {staff['access_level']}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if staff['is_active'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {staff['created_at']}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {staff['last_login'] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
    )

    await callback.message.edit_text(
        staff_info,
        reply_markup=get_staff_detail_keyboard(staff_id, staff['is_active']),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
@router.callback_query(F.data == "staff_management")
async def return_to_staff_management(callback: CallbackQuery):
    await callback.answer()
    await staff_management_menu(callback)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data == "admin_menu")
async def return_to_admin_menu(callback: CallbackQuery):
    await callback.answer()
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
    await callback.message.edit_text(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...",
        reply_markup=None
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("staff_change_role_"))
async def change_staff_role(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ callback_data
    staff_id = int(callback.data.split("_")[3])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(staff_id=staff_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π, –≤–∫–ª—é—á–∞—è –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ
    roles = get_all_available_roles()

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=get_role_selection_keyboard(roles, "staff_set_role")
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    await state.set_state(StaffEditStates.new_role)


@router.callback_query(StaffEditStates.new_role, F.data.startswith("staff_set_role_"))
async def set_staff_role(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å –∏–∑ callback_data
    new_role = callback.data.split("_")[3]

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    staff_id = data.get("staff_id")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    success = update_staff_role(staff_id, new_role)

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        staff = get_staff_by_id(staff_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        staff_info = (
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞)</b>\n\n"
            f"ID: {staff['id']}\n"
            f"Telegram ID: {staff['telegram_id']}\n"
            f"Username: {staff['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–ò–º—è: {staff['first_name']}\n"
            f"–§–∞–º–∏–ª–∏—è: {staff['last_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {staff['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–†–æ–ª—å: {staff['role']}\n"
            f"–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {staff['access_level']}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if staff['is_active'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {staff['created_at']}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {staff['last_login'] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
        )

        await callback.message.edit_text(
            staff_info,
            reply_markup=get_staff_detail_keyboard(staff_id, staff['is_active']),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
            reply_markup=get_staff_detail_keyboard(staff_id, True)
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
@router.callback_query(F.data.startswith("staff_change_access_"))
async def change_staff_access(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ callback_data
    staff_id = int(callback.data.split("_")[3])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(staff_id=staff_id)

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5):",
        reply_markup=None
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
    await state.set_state(StaffEditStates.new_access_level)


@router.message(StaffEditStates.new_access_level)
async def set_staff_access_level(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    try:
        new_level = int(message.text)
        if not 1 <= new_level <= 5:
            await message.answer(
                "–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=None
            )
            return
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:",
            reply_markup=None
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    staff_id = data.get("staff_id")

    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    success = update_staff_access_level(staff_id, new_level)

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        staff = get_staff_by_id(staff_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        staff_info = (
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω)</b>\n\n"
            f"ID: {staff['id']}\n"
            f"Telegram ID: {staff['telegram_id']}\n"
            f"Username: {staff['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–ò–º—è: {staff['first_name']}\n"
            f"–§–∞–º–∏–ª–∏—è: {staff['last_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {staff['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–†–æ–ª—å: {staff['role']}\n"
            f"–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {staff['access_level']}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if staff['is_active'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {staff['created_at']}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {staff['last_login'] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
        )

        await message.answer(
            staff_info,
            reply_markup=get_staff_detail_keyboard(staff_id, staff['is_active']),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
            reply_markup=get_staff_detail_keyboard(staff_id, True)
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("staff_toggle_status_"))
async def toggle_staff_active_status(callback: CallbackQuery):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ callback_data
    staff_id = int(callback.data.split("_")[3])

    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    success = toggle_staff_status(staff_id)

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        staff = get_staff_by_id(staff_id)

        status_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if not staff['is_active'] else "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        staff_info = (
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Å—Ç–∞—Ç—É—Å {status_text})</b>\n\n"
            f"ID: {staff['id']}\n"
            f"Telegram ID: {staff['telegram_id']}\n"
            f"Username: {staff['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–ò–º—è: {staff['first_name']}\n"
            f"–§–∞–º–∏–ª–∏—è: {staff['last_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {staff['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–†–æ–ª—å: {staff['role']}\n"
            f"–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {staff['access_level']}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if staff['is_active'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {staff['created_at']}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {staff['last_login'] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
        )

        await callback.message.edit_text(
            staff_info,
            reply_markup=get_staff_detail_keyboard(staff_id, staff['is_active']),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
            reply_markup=get_staff_detail_keyboard(staff_id, True)
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("staff_delete_"))
async def confirm_delete_staff(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ callback_data
    staff_id = int(callback.data.split("_")[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(staff_id=staff_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    staff = get_staff_by_id(staff_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?\n\n"
        f"–ò–º—è: {staff['first_name']} {staff['last_name'] or ''}\n"
        f"–†–æ–ª—å: {staff['role']}\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirmation_keyboard("delete", staff_id)
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(StaffEditStates.confirm_delete)


@router.callback_query(StaffEditStates.confirm_delete, F.data.startswith("staff_confirm_delete_"))
async def delete_staff_confirmed(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ callback_data
    staff_id = int(callback.data.split("_")[3])

    # –£–¥–∞–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    success = delete_staff_member(staff_id)

    if success:
        await callback.message.edit_text(
            "‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_staff_management_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
            reply_markup=get_staff_management_keyboard()
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@router.callback_query(F.data == "staff_add")
async def start_add_staff(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\n"
        "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789",
        reply_markup=get_cancel_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ Telegram ID
    await state.set_state(StaffAddStates.telegram_id)


@router.message(StaffAddStates.telegram_id)
async def process_telegram_id(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID
    try:
        telegram_id = int(message.text)
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
            reply_markup=get_cancel_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
        )
        return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID
    existing_staff = get_staff_by_telegram_id(telegram_id)
    if existing_staff:
        await message.answer(
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n"
            f"–ò–º—è: {existing_staff['first_name']} {existing_staff['last_name'] or ''}\n"
            f"–†–æ–ª—å: {existing_staff['role']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π Telegram ID:",
            reply_markup=get_cancel_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
        )
        return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(telegram_id=telegram_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=get_cancel_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤–≤–æ–¥ –∏–º–µ–Ω–∏
    await state.set_state(StaffAddStates.first_name)


@router.message(StaffAddStates.first_name)
async def process_first_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(first_name=message.text)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=get_cancel_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏
    await state.set_state(StaffAddStates.last_name)


@router.message(StaffAddStates.last_name)
async def process_last_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–º–≤–æ–ª –ø—Ä–æ–ø—É—Å–∫–∞
    last_name = None if message.text == '-' else message.text
    await state.update_data(last_name=last_name)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=get_skip_keyboard()
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(StaffAddStates.phone)


@router.message(StaffAddStates.phone)
async def process_phone(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(phone=message.text)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏, –≤–∫–ª—é—á–∞—è –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ
    roles = get_all_available_roles()

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=get_role_selection_keyboard(roles)
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤—ã–±–æ—Ä —Ä–æ–ª–∏
    await state.set_state(StaffAddStates.role)


@router.callback_query(StaffAddStates.phone, F.data == "staff_skip")
async def skip_phone(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º None –≤–º–µ—Å—Ç–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(phone=None)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏, –≤–∫–ª—é—á–∞—è –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ
    roles = get_all_available_roles()

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=get_role_selection_keyboard(roles)
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤—ã–±–æ—Ä —Ä–æ–ª–∏
    await state.set_state(StaffAddStates.role)


@router.callback_query(StaffAddStates.role, F.data.startswith("staff_select_role_"))
async def process_role(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å –∏–∑ callback_data
    role = callback.data.split("_")[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(role=role)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5):",
        reply_markup=None
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤–≤–æ–¥ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
    await state.set_state(StaffAddStates.access_level)


@router.message(StaffAddStates.access_level)
async def process_access_level(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    try:
        access_level = int(message.text)
        if not 1 <= access_level <= 5:
            await message.answer(
                "–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
            )
            return
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:",
            reply_markup=get_cancel_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(access_level=access_level)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"Telegram ID: {data['telegram_id']}\n"
        f"–ò–º—è: {data['first_name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {data.get('last_name') or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone') or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–†–æ–ª—å: {data['role']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {data['access_level']}\n\n"
        f"‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"
    )

    await message.answer(
        confirm_text,
        reply_markup=get_confirmation_keyboard("add")
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await state.set_state(StaffAddStates.confirm)


@router.callback_query(StaffAddStates.confirm, F.data == "staff_confirm_add")
async def confirm_add_staff(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = add_staff_member(
        telegram_id=data['telegram_id'],
        username=None,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        first_name=data['first_name'],
        last_name=data.get('last_name'),
        phone=data.get('phone'),
        role=data['role'],
        access_level=data['access_level']
    )

    if success:
        await callback.message.edit_text(
            "‚úÖ –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_staff_management_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=get_staff_management_keyboard()
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
@router.callback_query(F.data == "staff_cancel")
async def cancel_staff_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()

    if current_state:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—á–∏—â–∞–µ–º –µ–≥–æ
        await state.clear()

    await callback.message.edit_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_staff_management_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
@router.callback_query(F.data == "staff_view_statuses")
async def view_staff_statuses(callback: CallbackQuery):
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    statuses = get_all_staff_statuses()

    if not statuses:
        await callback.message.edit_text(
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ (—Ä–æ–ª–µ–π) —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
            reply_markup=get_staff_management_keyboard()
        )
        return

    await callback.message.edit_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (—Ä–æ–ª–∏) —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:",
        reply_markup=get_staff_statuses_keyboard(statuses)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(F.data.startswith("staff_status_view_"))
async def view_staff_status_details(callback: CallbackQuery):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ callback_data
    status_name = callback.data.split("_")[3]

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç—É—Å–∞
    status_details = get_staff_status_details(status_name)

    if not status_details:
        await callback.message.edit_text(
            f"–°—Ç–∞—Ç—É—Å '{status_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_staff_management_keyboard()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å—Ç–∞—Ç—É—Å–∞
    message_text = (
        f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ (—Ä–æ–ª–∏)</b>\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {status_details['role_name']}\n"
    )

    if 'description' in status_details and status_details['description']:
        message_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {status_details['description']}\n"

    if 'created_at' in status_details and status_details['created_at']:
        message_text += f"üìÖ –°–æ–∑–¥–∞–Ω: {status_details['created_at']}\n"

    if 'count' in status_details:
        message_text += f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é: {status_details['count']}\n"

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    statuses = get_all_staff_statuses()

    await callback.message.edit_text(
        message_text,
        reply_markup=get_staff_statuses_keyboard(statuses),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(F.data == "staff_create_status")
async def start_create_status(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    await callback.message.edit_text(
        "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (—Ä–æ–ª–∏) —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:",
        reply_markup=get_cancel_keyboard_create_status()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    await state.set_state(StaffStatusCreateState.status_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@router.message(StaffStatusCreateState.status_name)
async def process_status_name(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status_name = message.text.strip()

    if not status_name:
        await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å
    existing_statuses = get_all_staff_statuses()
    if status_name in existing_statuses:
        await message.answer(
            f"–°—Ç–∞—Ç—É—Å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{status_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(status_name=status_name)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):",
        reply_markup=get_description_step_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
    await state.set_state(StaffStatusCreateState.status_description)


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
@router.callback_query(F.data == "staff_cancel")
async def cancel_staff_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
    await callback.message.edit_text(
        "üîÑ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\nüßë‚Äçüíº –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º",
        reply_markup=get_staff_management_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@router.message(StaffStatusCreateState.status_description)
async def process_status_description(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–º–≤–æ–ª –ø—Ä–æ–ø—É—Å–∫–∞
    description = None if message.text == '-' else message.text
    await state.update_data(status_description=description)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['status_name']}\n"
    )

    if data.get('status_description'):
        confirm_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {data['status_description']}\n\n"
    else:
        confirm_text += "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n\n"

    confirm_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:"

    await message.answer(
        confirm_text,
        reply_markup=get_confirmation_keyboard("status")
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
    await state.set_state(StaffStatusCreateState.confirm)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(StaffStatusCreateState.status_description, F.data == "staff_skip_description")
async def skip_status_description(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º None –≤–º–µ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏—è
    await state.update_data(status_description=None)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['status_name']}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:"
    )

    await callback.message.edit_text(
        confirm_text,
        reply_markup=get_confirmation_keyboard("status")
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
    await state.set_state(StaffStatusCreateState.confirm)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(StaffStatusCreateState.confirm, F.data == "staff_confirm_status")
async def confirm_create_status(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success, message = add_new_staff_status(
        status_name=data['status_name'],
        status_description=data.get('status_description')
    )

    if success:
        await callback.message.edit_text(
            f"‚úÖ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å '{data['status_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é\n"
            f"‚Ä¢ –ù–∞–∑–Ω–∞—á–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ '{data['status_name']}'",
            reply_markup=get_staff_management_keyboard()
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {message}",
            reply_markup=get_staff_management_keyboard()
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data == "staff_management")
async def return_to_staff_management(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üßë‚Äçüíº –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º",
        reply_markup=get_staff_management_keyboard()
    )
