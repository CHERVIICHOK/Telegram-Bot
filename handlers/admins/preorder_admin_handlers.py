from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from datetime import datetime
import os
import logging
import openpyxl
from openpyxl import Workbook
from io import BytesIO

from database.preorder_db import preorder_db
from keyboards.admins.preorder_admin_keyboards import (
    get_preorder_admin_menu_keyboard,
    get_preorder_products_list_keyboard,
    get_product_admin_keyboard,
    get_confirm_delete_keyboard,
    get_add_product_cancel_keyboard,
    get_confirm_add_keyboard,
    get_skip_step_keyboard,
    get_category_selection_keyboard,
    get_product_name_selection_keyboard,
    get_edit_field_keyboard,
    get_stats_keyboard,
    get_bulk_upload_keyboard,
    get_bulk_upload_confirm_keyboard
)
from states.preorder_states import AddPreorderProduct, BulkUploadProducts
from filters.admin_filter import AdminFilter

logger = logging.getLogger(__name__)
router = Router()

router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())


@router.callback_query(F.data == "manage_preorders")
async def show_preorder_admin_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞–º–∏"""
    await callback.message.edit_text(
        "üõçÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_preorder_admin_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin:main")
async def back_to_admin_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from keyboards.admins.menu_keyboard import get_admin_menu_keyboard

    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_admin_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "preorder_admin:menu")
async def back_to_preorder_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤"""
    await show_preorder_admin_menu(callback)


@router.callback_query(F.data == "preorder_admin:add")
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    await state.set_state(AddPreorderProduct.category)

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = preorder_db.get_all_categories()

    if categories:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:",
            reply_markup=get_category_selection_keyboard(categories)
        )
    else:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_add_product_cancel_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data.startswith("preorder_admin:select_category:"), AddPreorderProduct.category)
async def select_existing_category(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split(":", 3)[2]
    await state.update_data(category=category)
    await state.set_state(AddPreorderProduct.product_name)

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    product_names = preorder_db.get_all_product_names()

    if product_names:
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ:",
            reply_markup=get_product_name_selection_keyboard(product_names)
        )
    else:
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_add_product_cancel_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "preorder_admin:new_category", AddPreorderProduct.category)
async def request_new_category(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_add_product_cancel_keyboard()
    )
    await callback.answer()


@router.message(AddPreorderProduct.category)
async def process_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.update_data(category=message.text)
    await state.set_state(AddPreorderProduct.product_name)

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    product_names = preorder_db.get_all_product_names()

    if product_names:
        await message.answer(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ:",
            reply_markup=get_product_name_selection_keyboard(product_names)
        )
    else:
        await message.answer(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_add_product_cancel_keyboard()
        )


@router.callback_query(F.data.startswith("preorder_admin:select_product:"), AddPreorderProduct.product_name)
async def select_existing_product(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_name = callback.data.split(":", 3)[2]
    await state.update_data(product_name=product_name)
    await state.set_state(AddPreorderProduct.flavor)

    data = await state.get_data()
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"–¢–æ–≤–∞—Ä: {product_name}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=get_add_product_cancel_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "preorder_admin:new_product", AddPreorderProduct.product_name)
async def request_new_product(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=get_add_product_cancel_keyboard()
    )
    await callback.answer()


@router.message(AddPreorderProduct.product_name)
async def process_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(product_name=message.text)
    await state.set_state(AddPreorderProduct.flavor)

    data = await state.get_data()
    await message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"–¢–æ–≤–∞—Ä: {message.text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=get_add_product_cancel_keyboard()
    )


@router.message(AddPreorderProduct.flavor)
async def process_flavor(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫—É—Å–∞"""
    await state.update_data(flavor=message.text)
    await state.set_state(AddPreorderProduct.description)

    data = await state.get_data()
    await message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"–¢–æ–≤–∞—Ä: {data['product_name']}\n"
        f"–í–∫—É—Å: {message.text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=get_skip_step_keyboard()
    )


@router.callback_query(F.data == "preorder_admin:skip_step", AddPreorderProduct.description)
async def skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
    await state.update_data(description=None)
    await state.set_state(AddPreorderProduct.price)

    data = await state.get_data()
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"–¢–æ–≤–∞—Ä: {data['product_name']}\n"
        f"–í–∫—É—Å: {data['flavor']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=get_skip_step_keyboard()
    )
    await callback.answer()


@router.message(AddPreorderProduct.description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.update_data(description=message.text)
    await state.set_state(AddPreorderProduct.price)

    data = await state.get_data()
    await message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"–¢–æ–≤–∞—Ä: {data['product_name']}\n"
        f"–í–∫—É—Å: {data['flavor']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=get_skip_step_keyboard()
    )


@router.callback_query(F.data == "preorder_admin:skip_step", AddPreorderProduct.price)
async def skip_price(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ü–µ–Ω—É"""
    await state.update_data(price=None)
    await state.set_state(AddPreorderProduct.expected_date)

    data = await state.get_data()
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"–¢–æ–≤–∞—Ä: {data['product_name']}\n"
        f"–í–∫—É—Å: {data['flavor']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é –¥–∞—Ç—É –ø–æ—Å—Ç–∞–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
        reply_markup=get_skip_step_keyboard()
    )
    await callback.answer()


@router.message(AddPreorderProduct.price)
async def process_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã"""
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await state.set_state(AddPreorderProduct.expected_date)

        data = await state.get_data()
        await message.answer(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
            f"–¢–æ–≤–∞—Ä: {data['product_name']}\n"
            f"–í–∫—É—Å: {data['flavor']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é –¥–∞—Ç—É –ø–æ—Å—Ç–∞–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
            reply_markup=get_skip_step_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
            reply_markup=get_skip_step_keyboard()
        )


@router.callback_query(F.data == "preorder_admin:skip_step", AddPreorderProduct.expected_date)
async def skip_date(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–∞—Ç—É"""
    await state.update_data(expected_date=None)
    await state.set_state(AddPreorderProduct.image)

    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
        reply_markup=get_skip_step_keyboard()
    )
    await callback.answer()


@router.message(AddPreorderProduct.expected_date)
async def process_expected_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date = datetime.strptime(message.text, '%d.%m.%Y')
        await state.update_data(expected_date=date.strftime('%Y-%m-%d'))
        await state.set_state(AddPreorderProduct.image)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
            reply_markup=get_skip_step_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=get_skip_step_keyboard()
        )


@router.message(AddPreorderProduct.image, F.photo)
async def process_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("product_images", exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = message.photo[-1]
    file_info = await message.bot.get_file(photo.file_id)
    file_path = f"product_images/preorder_{photo.file_id}.jpg"

    await message.bot.download_file(file_info.file_path, file_path)

    await state.update_data(image_path=file_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    new_message = await message.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    await show_product_summary(new_message, state)


@router.callback_query(F.data == "preorder_admin:skip_step", AddPreorderProduct.image)
async def skip_image(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    await state.update_data(image_path=None)
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–≤–æ–¥–∫–∏
    await callback.message.delete()
    new_message = await callback.message.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    await show_product_summary(new_message, state)
    await callback.answer()


async def show_product_summary(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()

    summary = "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
    summary += f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
    summary += f"üõçÔ∏è –¢–æ–≤–∞—Ä: {data['product_name']}\n"
    summary += f"üçì –í–∫—É—Å: {data['flavor']}\n"

    if data.get('description'):
        summary += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
    else:
        summary += "üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"

    if data.get('price'):
        summary += f"üí∞ –¶–µ–Ω–∞: {data['price']} ‚ÇΩ\n"
    else:
        summary += "üí∞ –¶–µ–Ω–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞\n"

    if data.get('expected_date'):
        expected_date = datetime.strptime(data['expected_date'], '%Y-%m-%d').strftime('%d.%m.%Y')
        summary += f"üìÖ –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {expected_date}\n"
    else:
        summary += "üìÖ –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: –ù–µ —É–∫–∞–∑–∞–Ω–∞\n"

    summary += f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–æ–±–∞–≤–ª–µ–Ω–æ' if data.get('image_path') else '–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'}"

    await state.set_state(AddPreorderProduct.confirm)
    await message.edit_text(
        summary,
        reply_markup=get_confirm_add_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "preorder_admin:edit_summary", AddPreorderProduct.confirm)
async def show_edit_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_field_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("preorder_admin:edit:"), AddPreorderProduct.confirm)
async def edit_field(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ"""
    field = callback.data.split(":", 2)[2]
    await state.set_state(AddPreorderProduct.edit_field)
    await state.update_data(editing_field=field)

    field_names = {
        'category': '–∫–∞—Ç–µ–≥–æ—Ä–∏—é',
        'product_name': '–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
        'flavor': '–≤–∫—É—Å',
        'description': '–æ–ø–∏—Å–∞–Ω–∏–µ',
        'price': '—Ü–µ–Ω—É',
        'expected_date': '–¥–∞—Ç—É –ø–æ—Å—Ç–∞–≤–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)',
        'image': '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    }

    if field == 'image':
        await callback.message.edit_text(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
            reply_markup=get_skip_step_keyboard()
        )
    else:
        text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_names.get(field, field)}':"
        if field in ['description', 'price', 'expected_date']:
            text += "\n\n–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:"
            keyboard = get_skip_step_keyboard()
        else:
            keyboard = get_add_product_cancel_keyboard()

        await callback.message.edit_text(text, reply_markup=keyboard)

    await callback.answer()


@router.message(AddPreorderProduct.edit_field)
async def process_edit_field(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è"""
    data = await state.get_data()
    field = data.get('editing_field')

    if field == 'price':
        try:
            value = float(message.text)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
    elif field == 'expected_date':
        try:
            date = datetime.strptime(message.text, '%d.%m.%Y')
            value = date.strftime('%Y-%m-%d')
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:")
            return
    else:
        value = message.text

    await state.update_data({field: value})
    await state.set_state(AddPreorderProduct.confirm)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    new_message = await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    await show_product_summary(new_message, state)


@router.message(AddPreorderProduct.edit_field, F.photo)
async def process_edit_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("product_images", exist_ok=True)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    data = await state.get_data()
    if data.get('image_path') and os.path.exists(data['image_path']):
        os.remove(data['image_path'])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = message.photo[-1]
    file_info = await message.bot.get_file(photo.file_id)
    file_path = f"product_images/preorder_{photo.file_id}.jpg"

    await message.bot.download_file(file_info.file_path, file_path)

    await state.update_data(image_path=file_path)
    await state.set_state(AddPreorderProduct.confirm)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    new_message = await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    await show_product_summary(new_message, state)


@router.callback_query(F.data == "preorder_admin:skip_step", AddPreorderProduct.edit_field)
async def skip_edit_field(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è"""
    data = await state.get_data()
    field = data.get('editing_field')

    if field in ['description', 'price', 'expected_date', 'image']:
        await state.update_data({field: None})

    await state.set_state(AddPreorderProduct.confirm)
    await callback.message.delete()
    new_message = await callback.message.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    await show_product_summary(new_message, state)
    await callback.answer()


@router.callback_query(F.data == "preorder_admin:back_to_confirm")
async def back_to_confirm(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é"""
    await state.set_state(AddPreorderProduct.confirm)
    await show_product_summary(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "preorder_admin:confirm_add", AddPreorderProduct.confirm)
async def confirm_add_product(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()

    product_id = preorder_db.add_preorder_product(
        category=data['category'],
        product_name=data['product_name'],
        flavor=data['flavor'],
        description=data.get('description'),
        price=data.get('price'),
        expected_date=data.get('expected_date'),
        image_path=data.get('image_path')
    )

    if product_id:
        await callback.message.edit_text(
            "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_preorder_admin_menu_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=get_preorder_admin_menu_keyboard()
        )

    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "preorder_admin:cancel_add")
async def cancel_add_product(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    data = await state.get_data()
    if data.get('image_path') and os.path.exists(data['image_path']):
        os.remove(data['image_path'])

    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_preorder_admin_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "preorder_admin:list")
async def show_products_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞"""
    await display_products_list(callback, page=1)


@router.callback_query(F.data.startswith("preorder_admin:list_page:"))
async def show_products_list_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    page = int(callback.data.split(":", 2)[2])
    await display_products_list(callback, page=page)


async def display_products_list(callback: CallbackQuery, page: int):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    data = preorder_db.get_all_preorder_products(page=page)

    if not data['items']:
        await callback.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç",
            reply_markup=get_preorder_admin_menu_keyboard()
        )
    else:
        text = "üìã <b>–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞:</b>\n\n"
        if data['total_pages'] > 1:
            text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {data['total_pages']}\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"

        await callback.message.edit_text(
            text,
            reply_markup=get_preorder_products_list_keyboard(
                data['items'], page, data['total_pages']
            ),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data.startswith("preorder_admin:view:"))
async def view_product_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split(":", 2)[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product = preorder_db.get_product_by_id(product_id)

    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    text = f"<b>{product['product_name']}</b>\n\n"
    text += f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}\n"
    text += f"üçì –í–∫—É—Å: {product['flavor']}\n"

    if product['description']:
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"

    if product['price']:
        text += f"üí∞ –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
    else:
        text += "üí∞ –¶–µ–Ω–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞\n"

    if product['expected_date']:
        expected_date = datetime.strptime(product['expected_date'], '%Y-%m-%d').strftime('%d.%m.%Y')
        text += f"üìÖ –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {expected_date}\n"
    else:
        text += "üìÖ –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: –ù–µ —É–∫–∞–∑–∞–Ω–∞\n"

    text += f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {product['views']}\n"
    text += f"üìä –ü—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤: {product.get('preorder_count', 0)}\n"
    text += f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–ï—Å—Ç—å' if product['image_path'] else '–ù–µ—Ç'}"

    await callback.message.edit_text(
        text,
        reply_markup=get_product_admin_keyboard(product_id),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("preorder_admin:delete:"))
async def request_delete_confirmation(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    product_id = int(callback.data.split(":", 2)[2])

    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?\n"
        "–í—Å–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã –Ω–∞ –Ω–µ–≥–æ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã.",
        reply_markup=get_confirm_delete_keyboard(product_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("preorder_admin:confirm_delete:"))
async def confirm_delete_product(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split(":", 2)[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    product = preorder_db.get_product_by_id(product_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–º
    users_to_notify = preorder_db.get_users_with_preorder(product_id)

    if preorder_db.delete_preorder_product(product_id):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        if users_to_notify and product:
            bot: Bot = callback.bot
            for user_id in users_to_notify:
                try:
                    await bot.send_message(
                        user_id,
                        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä <b>{product['product_name']} ({product['flavor']})</b> "
                        f"–±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–ª–∏–∂–∞–π—à–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏.\n\n"
                        f"–í–∞—à –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
                        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤!",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(
                                text="üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã",
                                callback_data="profile:preorders"
                            )
                        ]])
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await callback.message.edit_text(
            "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n"
            f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(users_to_notify)}",
            reply_markup=get_preorder_admin_menu_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=get_preorder_admin_menu_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "preorder_admin:stats")
async def show_preorder_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤"""
    await display_stats(callback, page=1)


@router.callback_query(F.data.startswith("preorder_admin:stats_page:"))
async def show_stats_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    page = int(callback.data.split(":", 2)[2])
    await display_stats(callback, page=page)


async def display_stats(callback: CallbackQuery, page: int):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    all_products_data = preorder_db.get_all_preorder_products(page=1, per_page=1000)
    all_products = all_products_data['items']

    total_products = len(all_products)
    total_preorders = sum(p.get('preorder_count', 0) for p in all_products)
    total_views = sum(p['views'] for p in all_products)

    # –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞–º
    products_with_orders = [p for p in all_products if p.get('preorder_count', 0) > 0]
    top_products = sorted(products_with_orders, key=lambda x: x.get('preorder_count', 0), reverse=True)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ç–æ–ø–∞
    items_per_page = 10
    total_pages = max(1, (len(top_products) + items_per_page - 1) // items_per_page)
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_products = top_products[start_idx:end_idx]

    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤</b>\n\n"
        f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}\n"
        f"üìã –í—Å–µ–≥–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤: {total_preorders}\n"
        f"üëÅ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {total_views}\n\n"
    )

    if page_products:
        text += "<b>üèÜ –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞–º:</b>\n"
        for i, product in enumerate(page_products, start_idx + 1):
            text += f"{i}. {product['product_name']} ({product['flavor']}) - {product['preorder_count']} –∑–∞–∫–∞–∑–æ–≤\n"

        if total_pages > 1:
            text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"
    elif page == 1:
        text += "\n–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞–º–∏."

    cancellation_stats = preorder_db.get_cancellation_stats()

    if cancellation_stats['total'] > 0:
        text += f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–∞–∑–æ–≤:</b>\n"
        text += f"–í—Å–µ–≥–æ –æ—Ç–∫–∞–∑–æ–≤: {cancellation_stats['total']}\n\n"

        text += "<b>–ü–æ –ø—Ä–∏—á–∏–Ω–∞–º:</b>\n"
        reason_names = {
            'financial': 'üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞',
            'too_long': '‚è∞ –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å',
            'found_elsewhere': 'üîÑ –ù–∞—à—ë–ª –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ',
            'changed_mind': '‚ùå –ü–µ—Ä–µ–¥—É–º–∞–ª',
            'other': 'üìù –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞'
        }

        for reason, count in cancellation_stats['by_reason']:
            reason_text = reason_names.get(reason, reason)
            percentage = (count / cancellation_stats['total']) * 100
            text += f"‚Ä¢ {reason_text}: {count} ({percentage:.1f}%)\n"

    await callback.message.edit_text(
        text,
        reply_markup=get_stats_keyboard(page, total_pages),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "preorder_admin:current_page")
@router.callback_query(F.data == "preorder_admin:current_stats_page")
async def handle_current_page_click(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    await callback.answer()


@router.callback_query(F.data == "preorder_admin:bulk_upload")
async def start_bulk_upload(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    await state.set_state(BulkUploadProducts.upload_file)

    await callback.message.edit_text(
        "üì§ <b>–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Excel —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:\n"
        "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "‚Ä¢ –í–∫—É—Å\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "‚Ä¢ –¶–µ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "‚Ä¢ –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω:",
        reply_markup=get_bulk_upload_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "preorder_admin:download_template")
async def download_template(callback: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞"""
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω Excel
    wb = Workbook()
    ws = wb.active
    ws.title = "–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–í–∫—É—Å", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏"]
    for col, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col, value=header)
        cell.font = openpyxl.styles.Font(bold=True)

    # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    examples = [
        ["–ñ–∏–¥–∫–æ—Å—Ç–∏", "Brusko", "–ö–ª—É–±–Ω–∏–∫–∞", "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å", "350", "25.12.2024"],
        ["–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "OXVA Xlim", "–ß–µ—Ä–Ω—ã–π", "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø–æ–¥-–º–æ–¥", "1500", "30.12.2024"],
        ["–ö–∞—Ä—Ç—Ä–∏–¥–∂–∏", "Voopoo PnP", "0.8 –û–º", "–°–º–µ–Ω–Ω—ã–π –∏—Å–ø–∞—Ä–∏—Ç–µ–ª—å", "", ""]
    ]

    for row_idx, row_data in enumerate(examples, 2):
        for col_idx, value in enumerate(row_data, 1):
            ws.cell(row=row_idx, column=col_idx, value=value)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = min(max_length + 2, 30)
        ws.column_dimensions[column].width = adjusted_width

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buffer = BytesIO()
    wb.save(buffer)
    buffer.seek(0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await callback.message.answer_document(
        BufferedInputFile(
            buffer.read(),
            filename="template_preorder_products.xlsx"
        ),
        caption="üì• –®–∞–±–ª–æ–Ω –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ."
    )
    await callback.answer()


@router.message(BulkUploadProducts.upload_file, F.document)
async def process_excel_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞"""
    document = message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not document.file_name.endswith(('.xlsx', '.xls')):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)",
            reply_markup=get_bulk_upload_keyboard()
        )
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_info = await message.bot.get_file(document.file_id)
    file_bytes = BytesIO()
    await message.bot.download_file(file_info.file_path, file_bytes)
    file_bytes.seek(0)

    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        wb = openpyxl.load_workbook(file_bytes, read_only=True)
        ws = wb.active

        products = []
        errors = []

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        rows = list(ws.iter_rows(min_row=2, values_only=True))

        for row_idx, row in enumerate(rows, 2):
            if not any(row):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                continue

            try:
                category = str(row[0]).strip() if row[0] else None
                product_name = str(row[1]).strip() if row[1] else None
                flavor = str(row[2]).strip() if row[2] else None
                description = str(row[3]).strip() if row[3] and str(row[3]).strip() else None

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                price = None
                if row[4]:
                    try:
                        price = float(str(row[4]).replace(',', '.'))
                    except ValueError:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã")
                        continue

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
                expected_date = None
                if row[5]:
                    if isinstance(row[5], datetime):
                        expected_date = row[5].strftime('%Y-%m-%d')
                    else:
                        try:
                            date_str = str(row[5]).strip()
                            date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                            expected_date = date_obj.strftime('%Y-%m-%d')
                        except ValueError:
                            errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                            continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if not all([category, product_name, flavor]):
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                    continue

                products.append({
                    'category': category,
                    'product_name': product_name,
                    'flavor': flavor,
                    'description': description,
                    'price': price,
                    'expected_date': expected_date
                })

            except Exception as e:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - {str(e)}")

        wb.close()

        if not products:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n" +
                ("\n–û—à–∏–±–∫–∏:\n" + "\n".join(errors) if errors else ""),
                reply_markup=get_preorder_admin_menu_keyboard()
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(products=products, errors=errors)
        await state.set_state(BulkUploadProducts.confirm)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:</b>\n\n"
        summary += f"‚úÖ –¢–æ–≤–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ: {len(products)}\n"
        if errors:
            summary += f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}\n\n"
            summary += "<b>–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:</b>\n"
            for error in errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                summary += f"‚Ä¢ {error}\n"
            if len(errors) > 10:
                summary += f"\n... –∏ –µ—â–µ {len(errors) - 10} –æ—à–∏–±–æ–∫"

        await message.answer(
            summary,
            reply_markup=get_bulk_upload_confirm_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
            reply_markup=get_preorder_admin_menu_keyboard()
        )
        await state.clear()


@router.callback_query(F.data == "preorder_admin:confirm_bulk", BulkUploadProducts.confirm)
async def confirm_bulk_upload(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É"""
    data = await state.get_data()
    products = data.get('products', [])

    success_count = 0
    failed_count = 0

    for product in products:
        try:
            product_id = preorder_db.add_preorder_product(
                category=product['category'],
                product_name=product['product_name'],
                flavor=product['flavor'],
                description=product['description'],
                price=product['price'],
                expected_date=product['expected_date']
            )
            if product_id:
                success_count += 1
            else:
                failed_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
            failed_count += 1

    result_text = f"‚úÖ <b>–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
    result_text += f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count} —Ç–æ–≤–∞—Ä–æ–≤\n"
    if failed_count > 0:
        result_text += f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {failed_count} —Ç–æ–≤–∞—Ä–æ–≤"

    await callback.message.edit_text(
        result_text,
        reply_markup=get_preorder_admin_menu_keyboard(),
        parse_mode="HTML"
    )

    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "preorder_admin:cancel_bulk")
async def cancel_bulk_upload(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_preorder_admin_menu_keyboard()
    )
    await callback.answer()
