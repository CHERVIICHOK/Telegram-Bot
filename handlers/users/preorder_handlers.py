from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, Message
from datetime import datetime
import logging

from database.preorder_db import preorder_db
from keyboards.users.preorder_keyboards import (
    get_preorder_categories_keyboard,
    get_preorder_products_keyboard,
    get_preorder_flavors_keyboard,
    get_product_card_keyboard,
    get_my_preorders_keyboard, get_cancellation_reason_keyboard, get_back_to_card_keyboard
)

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "profile:preorders")
async def show_preorder_categories(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞"""
    categories = preorder_db.get_categories_with_ids()

    if not categories:
        await callback.message.edit_text(
            "üö´ –ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞.\n"
            "–ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!",
            reply_markup=get_my_preorders_keyboard(1, 1)
        )
    else:
        await callback.message.edit_text(
            "üì¶ <b>–¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –ø–æ—Å—Ç—É–ø—è—Ç –≤ –ø—Ä–æ–¥–∞–∂—É</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_preorder_categories_keyboard(categories),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data == "po:main")
async def back_to_categories(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    await show_preorder_categories(callback)


@router.callback_query(F.data.startswith("po:c:"))
async def show_category_products(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split(":")[2])
    category_name = preorder_db.get_category_by_id(category_id)

    if not category_name:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    products = preorder_db.get_products_ids_by_category(category_id)

    if not products:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
        return

    breadcrumbs = f"üìç {category_name}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    if callback.message.photo:
        await callback.message.delete()
        await callback.message.answer(
            f"{breadcrumbs}\n\n"
            f"üõçÔ∏è <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=get_preorder_products_keyboard(category_id, products),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            f"{breadcrumbs}\n\n"
            f"üõçÔ∏è <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=get_preorder_products_keyboard(category_id, products),
            parse_mode="HTML"
        )
    await callback.answer()


@router.callback_query(F.data.startswith("po:p:"))
async def show_product_flavors(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∫—É—Å—ã —Ç–æ–≤–∞—Ä–∞"""
    parts = callback.data.split(":")
    category_id = int(parts[2])
    product_id = int(parts[3])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product_info = preorder_db.get_product_by_id(product_id)
    if not product_info:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    category_name = preorder_db.get_category_by_id(category_id)
    flavors = preorder_db.get_flavors_ids_by_product(category_id, product_id)

    if not flavors:
        await callback.answer("–£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∫—É—Å–æ–≤", show_alert=True)
        return

    breadcrumbs = f"üìç {category_name} ‚Üí {product_info['product_name']}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    if callback.message.photo:
        await callback.message.delete()
        await callback.message.answer(
            f"{breadcrumbs}\n\n"
            f"üçì <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã {product_info['product_name']}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:",
            reply_markup=get_preorder_flavors_keyboard(category_id, product_id, flavors),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            f"{breadcrumbs}\n\n"
            f"üçì <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã {product_info['product_name']}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:",
            reply_markup=get_preorder_flavors_keyboard(category_id, product_id, flavors),
            parse_mode="HTML"
        )
    await callback.answer()


@router.callback_query(F.data.startswith("po:f:"))
async def show_product_card(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split(":")[2])

    product = preorder_db.get_product_by_id(product_id)

    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
    user_id = callback.from_user.id
    preorder_db.increment_views(product['id'], user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö
    preorders_count = preorder_db.get_product_preorders_count(product['id'])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑
    has_preorder = preorder_db.has_preorder(user_id, product['id'])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    expected_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    if product['expected_date']:
        expected_date = datetime.strptime(product['expected_date'], '%Y-%m-%d').strftime('%d.%m.%Y')

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    category_id = preorder_db.get_category_id(product['category'])

    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
    parent_products = preorder_db.get_products_ids_by_category(category_id)
    parent_product_id = next((p['id'] for p in parent_products if p['name'] == product['product_name']), product_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    breadcrumbs = f"üìç {product['category']} ‚Üí {product['product_name']} ‚Üí {product['flavor']}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    text = (
        f"{breadcrumbs}\n"
        f"{'‚îÅ' * 30}\n\n"
        f"<b>{product['product_name']}</b>\n"
        f"üçì –í–∫—É—Å: {product['flavor']}\n\n"
    )

    if product['description']:
        text += f"üìù {product['description']}\n\n"

    if product['price']:
        text += f"üí∞ –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
    else:
        text += "üí∞ –¶–µ–Ω–∞: –£—Ç–æ—á–Ω—è–µ—Ç—Å—è\n"

    text += (
        f"üìÖ –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {expected_date}\n"
        f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {product['views']}\n"
        f"üë• –û–∂–∏–¥–∞—é—Ç: {preorders_count} —á–µ–ª.\n"  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    )

    if has_preorder:
        text += "\n‚úÖ <b>–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä</b>"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
    if callback.message.photo:
        await callback.message.delete()

        if product['image_path']:
            try:
                photo = FSInputFile(product['image_path'])
                await callback.message.answer_photo(
                    photo=photo,
                    caption=text,
                    reply_markup=get_product_card_keyboard(
                        product['id'], has_preorder, category_id, parent_product_id
                    ),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await callback.message.answer(
                    text,
                    reply_markup=get_product_card_keyboard(
                        product['id'], has_preorder, category_id, parent_product_id
                    ),
                    parse_mode="HTML"
                )
        else:
            await callback.message.answer(
                text,
                reply_markup=get_product_card_keyboard(
                    product['id'], has_preorder, category_id, parent_product_id
                ),
                parse_mode="HTML"
            )
    else:
        if product['image_path']:
            try:
                photo = FSInputFile(product['image_path'])
                await callback.message.delete()
                await callback.message.answer_photo(
                    photo=photo,
                    caption=text,
                    reply_markup=get_product_card_keyboard(
                        product['id'], has_preorder, category_id, parent_product_id
                    ),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await callback.message.edit_text(
                    text,
                    reply_markup=get_product_card_keyboard(
                        product['id'], has_preorder, category_id, parent_product_id
                    ),
                    parse_mode="HTML"
                )
        else:
            await callback.message.edit_text(
                text,
                reply_markup=get_product_card_keyboard(
                    product['id'], has_preorder, category_id, parent_product_id
                ),
                parse_mode="HTML"
            )

    await callback.answer()


@router.callback_query(F.data.startswith("po:make:"))
async def make_preorder(callback: CallbackQuery):
    """–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑"""
    product_id = int(callback.data.split(":")[2])
    user_id = callback.from_user.id

    if preorder_db.add_preorder(user_id, product_id):
        await callback.answer("‚úÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!", show_alert=True)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        product = preorder_db.get_product_by_id(product_id)
        if product:
            category_id = preorder_db.get_category_id(product['category'])
            parent_products = preorder_db.get_products_ids_by_category(category_id)
            parent_product_id = next((p['id'] for p in parent_products if p['name'] == product['product_name']),
                                     product_id)

            new_keyboard = get_product_card_keyboard(
                product_id, True, category_id, parent_product_id
            )
            await callback.message.edit_reply_markup(reply_markup=new_keyboard)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞", show_alert=True)


@router.callback_query(F.data.startswith("po:cancel:"))
async def request_cancellation_reason(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞"""
    product_id = int(callback.data.split(":")[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(cancelling_product_id=product_id)

    await callback.message.edit_text(
        "‚ùì <b>–ü–æ—á–µ–º—É –≤—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑?</b>\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ:",
        reply_markup=get_cancellation_reason_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("po:reason:"))
async def process_cancellation_reason(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞"""
    reason_code = callback.data.split(":")[2]
    data = await state.get_data()
    product_id = data.get('cancelling_product_id')

    if not product_id:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_id = callback.from_user.id

    if reason_code == "other":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø—Ä–∏—á–∏–Ω—É
        await state.set_state("waiting_custom_reason")
        await callback.message.edit_text(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:",
            reply_markup=get_back_to_card_keyboard(product_id)
        )
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∏ –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑
        preorder_db.save_cancellation_reason(user_id, product_id, reason_code)

        if preorder_db.cancel_preorder(user_id, product_id):
            await callback.message.edit_text(
                "‚úÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
                reply_markup=get_back_to_card_keyboard(product_id)
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞",
                reply_markup=get_back_to_card_keyboard(product_id)
            )

        await state.clear()

    await callback.answer()


@router.message(StateFilter("waiting_custom_reason"))
async def process_custom_reason(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞"""
    data = await state.get_data()
    product_id = data.get('cancelling_product_id')

    if not product_id:
        await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    user_id = message.from_user.id
    custom_reason = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∏ –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑
    preorder_db.save_cancellation_reason(user_id, product_id, "other", custom_reason)

    if preorder_db.cancel_preorder(user_id, product_id):
        await message.answer(
            "‚úÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
            reply_markup=get_back_to_card_keyboard(product_id)
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞",
            reply_markup=get_back_to_card_keyboard(product_id)
        )

    await state.clear()


@router.callback_query(F.data == "po:cancel_reason")
async def cancel_reason_dialog(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã"""
    data = await state.get_data()
    product_id = data.get('cancelling_product_id')

    if product_id:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞
        await state.clear()
        callback.data = f"po:f:{product_id}"
        await show_product_card(callback)
    else:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(F.data == "profile:my_preorders")
async def show_my_preorders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await display_user_preorders(callback, page=1)


@router.callback_query(F.data.startswith("po:my:page:"))
async def show_preorders_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤"""
    page = int(callback.data.split(":")[3])
    await display_user_preorders(callback, page=page)


async def display_user_preorders(callback: CallbackQuery, page: int):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = callback.from_user.id
    data = preorder_db.get_user_preorders(user_id, page=page)

    if not data['items']:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤."
    else:
        text = "üìã <b>–í–∞—à–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã:</b>\n\n"
        start_idx = (page - 1) * 6 + 1

        for i, order in enumerate(data['items'], start_idx):
            expected_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            if order['expected_date']:
                expected_date = datetime.strptime(
                    order['expected_date'], '%Y-%m-%d'
                ).strftime('%d.%m.%Y')

            price_text = f"{order['price']} ‚ÇΩ" if order['price'] else "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è"

            text += (
                f"{i}. {order['product_name']} ({order['flavor']})\n"
                f"   üí∞ {price_text}\n"
                f"   üìÖ –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_date}\n\n"
            )

        if data['total_pages'] > 1:
            text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {data['total_pages']}"

    await callback.message.edit_text(
        text,
        reply_markup=get_my_preorders_keyboard(page, data['total_pages']),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "po:my:current")
async def handle_current_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    await callback.answer()