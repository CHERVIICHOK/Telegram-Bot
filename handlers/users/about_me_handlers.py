import logging
import re
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from database.users.about_me_db import (
    get_user_personal_info, update_user_personal_info,
    get_user_addresses, add_user_address, update_user_address,
    delete_user_address, set_default_address,
    get_delivery_preferences, update_delivery_preferences,
    log_user_action, update_courier_instructions
)
from keyboards.users.about_me_keyboards import (
    get_about_me_menu_keyboard, get_personal_info_keyboard,
    get_gender_keyboard, get_addresses_keyboard,
    get_address_detail_keyboard,
    get_delivery_time_keyboard, get_time_selection_keyboard,
    get_cancel_keyboard, get_skip_keyboard
)
from keyboards.users.profile_keyboards import get_profile_keyboard
from states.about_me_state import AboutMeStates

logger = logging.getLogger(__name__)
router = Router()


# ==================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é "–û —Å–µ–±–µ" ====================

@router.callback_query(F.data == "profile:about_me")
async def show_about_me_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ '–û —Å–µ–±–µ'"""
    await callback.answer()

    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    log_user_action(callback.from_user.id, "viewed_about_me_menu")

    await callback.message.edit_text(
        "üìù <b>–û —Å–µ–±–µ</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.",
        reply_markup=get_about_me_menu_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.MAIN_MENU)


@router.callback_query(F.data == "about_me:data_security")
async def show_data_security_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    await callback.answer()

    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    log_user_action(callback.from_user.id, "viewed_data_security")

    security_text = (
        "üîí <b>–û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "üõ° <b>–ó–∞—á–µ–º –Ω–∞–º –Ω—É–∂–Ω–∞ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?</b>\n"
        "‚Ä¢ –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
        "‚Ä¢ –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ –î–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è\n"
        "‚Ä¢ –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n\n"
        "üîê <b>–ö–∞–∫ –º—ã –∑–∞—â–∏—â–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ?</b>\n"
        "‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã\n"
        "‚Ä¢ –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n"
        "‚úÖ –ú—ã —Å–æ–±–ª—é–¥–∞–µ–º –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ –∑–∞—â–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    )

    await callback.message.edit_text(
        security_text,
        reply_markup=get_about_me_menu_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "about_me:back_to_profile", StateFilter(AboutMeStates))
async def back_to_profile(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    await callback.answer()
    await state.clear()

    await callback.message.edit_text(
        "üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML"
    )


# ==================== –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ====================

@router.callback_query(F.data == "about_me:personal_info")
async def show_personal_info(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await callback.answer(
        "–ú—ã –±—É–¥–µ–º —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
        show_alert=True
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    log_user_action(callback.from_user.id, "viewed_personal_info")

    user_info = get_user_personal_info(callback.from_user.id)

    text = "üë§ <b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
    text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"

    await callback.message.edit_text(
        text,
        reply_markup=get_personal_info_keyboard(user_info),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.PERSONAL_INFO_MENU)


@router.callback_query(F.data == "personal:back", StateFilter(AboutMeStates.PERSONAL_INFO_MENU))
async def back_from_personal_info(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_about_me_menu(callback, state)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏
@router.callback_query(F.data == "personal:edit_first_name")
async def edit_first_name(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏"""
    await callback.answer()

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    log_user_action(callback.from_user.id, "started_editing_first_name")

    await callback.message.edit_text(
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</b>",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.EDITING_FIRST_NAME)


@router.message(StateFilter(AboutMeStates.EDITING_FIRST_NAME))
async def process_first_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è"""
    first_name = message.text.strip()

    if len(first_name) < 2:
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return

    if update_user_personal_info(message.from_user.id, 'first_name', first_name):
        await message.answer("‚úÖ", reply_markup=None)
        await show_personal_info_message(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏
@router.callback_query(F.data == "personal:edit_last_name")
async def edit_last_name(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏"""
    await callback.answer()

    log_user_action(callback.from_user.id, "started_editing_last_name")

    await callback.message.edit_text(
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:</b>",
        reply_markup=get_skip_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.EDITING_LAST_NAME)


@router.message(StateFilter(AboutMeStates.EDITING_LAST_NAME))
async def process_last_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ñ–∞–º–∏–ª–∏—é"""
    last_name = message.text.strip()

    if len(last_name) < 2:
        await message.answer(
            "‚ùå –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_skip_keyboard()
        )
        return

    if update_user_personal_info(message.from_user.id, 'last_name', last_name):
        await message.answer("‚úÖ", reply_markup=None)
        await show_personal_info_message(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–º–∏–ª–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@router.callback_query(F.data == "personal:edit_birth_date")
async def edit_birth_date(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    await callback.answer()

    log_user_action(callback.from_user.id, "started_editing_birth_date")

    await callback.message.edit_text(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú:</b>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.09",
        reply_markup=get_skip_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.EDITING_BIRTH_DATE)


@router.message(StateFilter(AboutMeStates.EDITING_BIRTH_DATE))
async def process_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_date = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    date_pattern = r'^\d{2}\.\d{2}$'
    if not re.match(date_pattern, birth_date):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.09",
            reply_markup=get_skip_keyboard()
        )
        return

    try:
        date_obj = datetime.strptime(birth_date, "%d.%m")

        if date_obj > datetime.now():
            await message.answer(
                "‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!",
                reply_markup=get_skip_keyboard()
            )
            return

        # # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É
        # if date_obj.year < 1930:
        #     await message.answer(
        #         "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.",
        #         reply_markup=get_skip_keyboard()
        #     )
        #     return

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
            reply_markup=get_skip_keyboard()
        )
        return

    if update_user_personal_info(message.from_user.id, 'birth_date', birth_date):
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        await show_personal_info_message(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –í—ã–±–æ—Ä –ø–æ–ª–∞
@router.callback_query(F.data == "personal:edit_gender")
async def edit_gender(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    await callback.answer()

    log_user_action(callback.from_user.id, "started_editing_gender")

    await callback.message.edit_text(
        "üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:</b>",
        reply_markup=get_gender_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.SELECTING_GENDER)


@router.callback_query(F.data.startswith("gender:"), StateFilter(AboutMeStates.SELECTING_GENDER))
async def process_gender_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞"""
    action = callback.data.split(':')[1]

    if action == "cancel":
        await callback.answer()
        log_user_action(callback.from_user.id, "cancelled_editing_gender")
        await show_personal_info(callback, state)
        return

    gender_map = {
        'male': '–ú—É–∂—Å–∫–æ–π',
        'female': '–ñ–µ–Ω—Å–∫–∏–π',
        'skip': '–ù–µ —É–∫–∞–∑–∞–Ω'
    }

    gender = gender_map.get(action)

    if update_user_personal_info(callback.from_user.id, 'gender', gender):
        await callback.answer("–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", show_alert=True)
        await show_personal_info(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∞", show_alert=True)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email
@router.callback_query(F.data == "personal:edit_email")
async def edit_email(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email"""
    await callback.answer()

    log_user_action(callback.from_user.id, "started_editing_email")

    await callback.message.edit_text(
        "üìß <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:</b>",
        reply_markup=get_skip_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.EDITING_EMAIL)


@router.message(StateFilter(AboutMeStates.EDITING_EMAIL))
async def process_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π email"""
    email = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, email):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.",
            reply_markup=get_skip_keyboard()
        )
        return

    if update_user_personal_info(message.from_user.id, 'email', email):
        await message.answer("‚úÖ", reply_markup=None)
        await show_personal_info_message(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.callback_query(F.data == "personal:edit_phone")
async def edit_phone(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await callback.answer()

    log_user_action(callback.from_user.id, "started_editing_phone")

    await callback.message.edit_text(
        "üì± <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n"
        "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX",
        reply_markup=get_skip_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.EDITING_PHONE)


@router.message(StateFilter(AboutMeStates.EDITING_PHONE))
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"""
    phone = message.text.strip()

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    phone_digits = re.sub(r'\D', '', phone)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    if phone_digits.startswith('7') and len(phone_digits) == 11:
        formatted_phone = f"+{phone_digits}"
    elif phone_digits.startswith('8') and len(phone_digits) == 11:
        formatted_phone = f"+7{phone_digits[1:]}"
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX",
            reply_markup=get_skip_keyboard()
        )
        return

    if update_user_personal_info(message.from_user.id, 'phone', formatted_phone):
        await message.answer("‚úÖ", reply_markup=None)
        await show_personal_info_message(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ==================== –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ ====================

@router.callback_query(F.data == "about_me:addresses")
async def show_addresses(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤"""
    await callback.answer(
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–µ–µ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É",
        show_alert=True
    )

    log_user_action(callback.from_user.id, "viewed_addresses")

    addresses = get_user_addresses(callback.from_user.id)

    text = "üìç <b>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
    if addresses:
        text += "–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:\n\n"
        for i, addr in enumerate(addresses, 1):
            default_mark = " ‚≠ê" if addr['is_default'] else ""
            text += f"{i}. {addr['address']}{default_mark}\n"
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤."

    await callback.message.edit_text(
        text,
        reply_markup=get_addresses_keyboard(addresses),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.ADDRESS_MENU)


@router.callback_query(F.data == "address:back", StateFilter(AboutMeStates))
async def back_from_addresses(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∞–¥—Ä–µ—Å–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_about_me_menu(callback, state)


@router.callback_query(F.data == "address:list", StateFilter(AboutMeStates))
async def show_address_list(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤"""
    await show_addresses(callback, state)


@router.callback_query(F.data.startswith("address:view_"))
async def view_address_detail(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∞–¥—Ä–µ—Å–∞"""
    await callback.answer()

    address_id = int(callback.data.split('_')[1])
    addresses = get_user_addresses(callback.from_user.id)

    address = next((addr for addr in addresses if addr['id'] == address_id), None)

    if not address:
        await callback.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await show_addresses(callback, state)
        return

    text = f"üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
    text += f"{address['address']}\n"

    if address.get('courier_instructions'):
        text += f"\nüìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞:</b>\n{address['courier_instructions']}\n"

    if address['is_default']:
        text += "\n‚≠ê <i>–û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å</i>"

    await callback.message.edit_text(
        text,
        reply_markup=get_address_detail_keyboard(address_id, address['is_default']),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "address:add_new")
async def add_new_address(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    await callback.answer()

    log_user_action(callback.from_user.id, "started_adding_address")

    await callback.message.edit_text(
        "üìç <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10, –∫–≤. 5",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.ADDING_ADDRESS)


@router.message(StateFilter(AboutMeStates.ADDING_ADDRESS))
async def process_new_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
    address = message.text.strip()

    if len(address) < 10:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å, –¥–µ–ª–∞–µ–º –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–º
    addresses = get_user_addresses(message.from_user.id)
    is_default = len(addresses) == 0

    if add_user_address(message.from_user.id, address, is_default):
        await message.answer("‚úÖ", reply_markup=None)
        await show_addresses_message(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("address:edit_"))
async def edit_address(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"""
    await callback.answer()

    address_id = int(callback.data.split('_')[1])
    await state.update_data(editing_address_id=address_id)

    log_user_action(callback.from_user.id, "started_editing_address", f"id:{address_id}")

    await callback.message.edit_text(
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:</b>",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.EDITING_ADDRESS)


@router.message(StateFilter(AboutMeStates.EDITING_ADDRESS))
async def process_edited_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
    address = message.text.strip()

    if len(address) < 10:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_cancel_keyboard()
        )
        return

    data = await state.get_data()
    address_id = data['editing_address_id']

    if update_user_address(address_id, message.from_user.id, address):
        await message.answer("‚úÖ", reply_markup=None)
        await show_addresses_message(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("address:set_default_"))
async def set_address_default(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    address_id = int(callback.data.split('_')[2])

    if set_default_address(address_id, callback.from_user.id):
        await callback.answer("‚úÖ –ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π!", show_alert=True)
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π callback
        callback.data = f"address:view_{address_id}"
        await view_address_detail(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–¥—Ä–µ—Å–∞", show_alert=True)


@router.callback_query(F.data.startswith("address:delete_"))
async def delete_address(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –∞–¥—Ä–µ—Å"""
    address_id = int(callback.data.split('_')[1])

    if delete_user_address(address_id, callback.from_user.id):
        await callback.answer("‚úÖ –ê–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω!", show_alert=True)
        await show_addresses(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞", show_alert=True)


# ==================== –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ ====================

@router.callback_query(F.data == "about_me:delivery_time")
async def show_delivery_time(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await callback.answer(
        "–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –≤ —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª",
        show_alert=True
    )

    log_user_action(callback.from_user.id, "viewed_delivery_time")

    preferences = get_delivery_preferences(callback.from_user.id)

    text = "‚è∞ <b>–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
    text += "–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤. "
    text += "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."

    await callback.message.edit_text(
        text,
        reply_markup=get_delivery_time_keyboard(preferences),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.DELIVERY_TIME_MENU)


@router.callback_query(F.data == "delivery_time:current")
async def show_current_delivery_time(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'"""
    preferences = get_delivery_preferences(callback.from_user.id)

    if preferences:
        text = f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {preferences['start_time']} - {preferences['end_time']}"
    else:
        text = "–í—ã –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏"

    await callback.answer(text, show_alert=True)


@router.callback_query(F.data == "delivery_time:back", StateFilter(AboutMeStates))
async def back_from_delivery_time(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_about_me_menu(callback, state)


@router.callback_query(F.data == "delivery_time:edit")
async def edit_delivery_time(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await callback.answer()

    log_user_action(callback.from_user.id, "started_editing_delivery_time")

    await callback.message.edit_text(
        "‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b>",
        reply_markup=get_time_selection_keyboard("start"),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.SELECTING_START_TIME)


@router.callback_query(F.data.startswith("time_select:"), StateFilter(AboutMeStates.SELECTING_START_TIME))
async def process_start_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await callback.answer()

    parts = callback.data.split(':')

    if parts[1] == "cancel":
        log_user_action(callback.from_user.id, "cancelled_editing_delivery_time", "at_start_time")
        await show_delivery_time(callback, state)
        return

    start_time = f"{parts[2]}:{parts[3]}"
    await state.update_data(start_time=start_time)

    await callback.message.edit_text(
        f"‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
        f"–ù–∞—á–∞–ª–æ: {start_time}",
        reply_markup=get_time_selection_keyboard("end", start_time),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.SELECTING_END_TIME)


@router.callback_query(F.data.startswith("time_select:"), StateFilter(AboutMeStates.SELECTING_END_TIME))
async def process_end_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    parts = callback.data.split(':')

    if parts[1] == "cancel":
        await callback.answer()
        log_user_action(callback.from_user.id, "cancelled_editing_delivery_time", "at_end_time")
        await show_delivery_time(callback, state)
        return

    end_time = f"{parts[2]}:{parts[3]}"
    data = await state.get_data()
    start_time = data['start_time']

    if update_delivery_preferences(callback.from_user.id, start_time, end_time):
        await callback.answer("‚úÖ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", show_alert=True)
        await show_delivery_time(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("address:instructions_"))
async def edit_courier_instructions(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –∫—É—Ä—å–µ—Ä–∞"""
    await callback.answer()

    address_id = int(callback.data.split('_')[1])
    await state.update_data(editing_instructions_for_address=address_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    addresses = get_user_addresses(callback.from_user.id)
    address = next((addr for addr in addresses if addr['id'] == address_id), None)

    current_instructions = ""
    if address and address.get('courier_instructions'):
        current_instructions = f"\n\n–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n{address['courier_instructions']}"

    log_user_action(callback.from_user.id, "started_editing_courier_instructions", f"id:{address_id}")

    await callback.message.edit_text(
        f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞</b>\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ (–∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞, —ç—Ç–∞–∂, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –∏ —Ç.–¥.)\n"
        f"–ú–∞–∫—Å–∏–º—É–º 150 —Å–∏–º–≤–æ–ª–æ–≤.{current_instructions}",
        reply_markup=get_skip_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.EDITING_COURIER_INSTRUCTIONS)


@router.message(StateFilter(AboutMeStates.EDITING_COURIER_INSTRUCTIONS))
async def process_courier_instructions(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞"""
    instructions = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(instructions) > 150:
        await message.answer(
            f"‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ ({len(instructions)}/150 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
            reply_markup=get_skip_keyboard()
        )
        return

    data = await state.get_data()
    address_id = data['editing_instructions_for_address']

    if update_courier_instructions(address_id, message.from_user.id, instructions):
        await message.answer("‚úÖ", reply_markup=None)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∞–¥—Ä–µ—Å–∞
        addresses = get_user_addresses(message.from_user.id)
        address = next((addr for addr in addresses if addr['id'] == address_id), None)

        if address:
            text = f"üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
            text += f"{address['address']}\n"

            if instructions:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                text += f"\nüìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞:</b>\n{instructions}\n"

            if address['is_default']:
                text += "\n‚≠ê <i>–û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å</i>"

            await message.answer(
                text,
                reply_markup=get_address_detail_keyboard(address_id, address['is_default']),
                parse_mode="HTML"
            )
            await state.set_state(AboutMeStates.ADDRESS_MENU)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "about_me:cancel_input", StateFilter(AboutMeStates))
async def cancel_input(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–≤–æ–¥–∞"""
    await callback.answer()

    current_state = await state.get_state()

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
    state_to_action = {
        AboutMeStates.EDITING_FIRST_NAME: "cancelled_editing_first_name",
        AboutMeStates.EDITING_LAST_NAME: "cancelled_editing_last_name",
        AboutMeStates.EDITING_BIRTH_DATE: "cancelled_editing_birth_date",
        AboutMeStates.EDITING_EMAIL: "cancelled_editing_email",
        AboutMeStates.EDITING_PHONE: "cancelled_editing_phone",
        AboutMeStates.ADDING_ADDRESS: "cancelled_adding_address",
        AboutMeStates.EDITING_ADDRESS: "cancelled_editing_address",
        AboutMeStates.EDITING_COURIER_INSTRUCTIONS: "cancelled_editing_courier_instructions"
    }

    if current_state in state_to_action:
        log_user_action(callback.from_user.id, state_to_action[current_state])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_state in [AboutMeStates.EDITING_FIRST_NAME, AboutMeStates.EDITING_LAST_NAME,
                         AboutMeStates.EDITING_BIRTH_DATE, AboutMeStates.EDITING_EMAIL,
                         AboutMeStates.EDITING_PHONE]:
        await show_personal_info(callback, state)
    elif current_state in [AboutMeStates.ADDING_ADDRESS, AboutMeStates.EDITING_ADDRESS]:
        await show_addresses(callback, state)
    elif current_state == AboutMeStates.EDITING_COURIER_INSTRUCTIONS:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –¥–µ—Ç–∞–ª—è–º –∞–¥—Ä–µ—Å–∞
        data = await state.get_data()
        if 'editing_instructions_for_address' in data:
            callback.data = f"address:view_{data['editing_instructions_for_address']}"
            await view_address_detail(callback, state)
        else:
            await show_addresses(callback, state)
    else:
        await show_about_me_menu(callback, state)

# ==================== –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ====================

@router.callback_query(F.data == "about_me:cancel_input", StateFilter(AboutMeStates))
async def cancel_input(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–≤–æ–¥–∞"""
    await callback.answer()

    current_state = await state.get_state()

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
    state_to_action = {
        AboutMeStates.EDITING_FIRST_NAME: "cancelled_editing_first_name",
        AboutMeStates.EDITING_LAST_NAME: "cancelled_editing_last_name",
        AboutMeStates.EDITING_BIRTH_DATE: "cancelled_editing_birth_date",
        AboutMeStates.EDITING_EMAIL: "cancelled_editing_email",
        AboutMeStates.EDITING_PHONE: "cancelled_editing_phone",
        AboutMeStates.ADDING_ADDRESS: "cancelled_adding_address",
        AboutMeStates.EDITING_ADDRESS: "cancelled_editing_address"
    }

    if current_state in state_to_action:
        log_user_action(callback.from_user.id, state_to_action[current_state])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_state in [AboutMeStates.EDITING_FIRST_NAME, AboutMeStates.EDITING_LAST_NAME,
                         AboutMeStates.EDITING_BIRTH_DATE, AboutMeStates.EDITING_EMAIL,
                         AboutMeStates.EDITING_PHONE]:
        await show_personal_info(callback, state)
    elif current_state in [AboutMeStates.ADDING_ADDRESS, AboutMeStates.EDITING_ADDRESS]:
        await show_addresses(callback, state)
    else:
        await show_about_me_menu(callback, state)


@router.callback_query(F.data == "about_me:skip", StateFilter(AboutMeStates))
async def skip_input(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –≤–≤–æ–¥–∞"""
    await callback.answer("–ü–æ–ª–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", show_alert=True)

    current_state = await state.get_state()

    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—Å–∫
    state_to_action = {
        AboutMeStates.EDITING_LAST_NAME: "skipped_last_name",
        AboutMeStates.EDITING_BIRTH_DATE: "skipped_birth_date",
        AboutMeStates.EDITING_EMAIL: "skipped_email",
        AboutMeStates.EDITING_PHONE: "skipped_phone",
        AboutMeStates.EDITING_COURIER_INSTRUCTIONS: "skipped_courier_instructions"
    }

    if current_state in state_to_action:
        log_user_action(callback.from_user.id, state_to_action[current_state])

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–µ–Ω—é
    if current_state in [AboutMeStates.EDITING_LAST_NAME, AboutMeStates.EDITING_BIRTH_DATE,
                         AboutMeStates.EDITING_EMAIL, AboutMeStates.EDITING_PHONE]:
        await show_personal_info(callback, state)
    elif current_state == AboutMeStates.EDITING_COURIER_INSTRUCTIONS:
        data = await state.get_data()
        if 'editing_instructions_for_address' in data:
            # –û—á–∏—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ –±—ã–ª–∏
            update_courier_instructions(data['editing_instructions_for_address'], callback.from_user.id, "")
            callback.data = f"address:view_{data['editing_instructions_for_address']}"
            await view_address_detail(callback, state)
        else:
            await show_addresses(callback, state)


# ==================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====================

async def show_personal_info_message(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_info = get_user_personal_info(message.from_user.id)

    text = "üë§ <b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
    text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"

    await message.answer(
        text,
        reply_markup=get_personal_info_keyboard(user_info),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.PERSONAL_INFO_MENU)


async def show_addresses_message(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    addresses = get_user_addresses(message.from_user.id)

    text = "üìç <b>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
    if addresses:
        text += "–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:\n\n"
        for i, addr in enumerate(addresses, 1):
            default_mark = " ‚≠ê" if addr['is_default'] else ""
            text += f"{i}. {addr['address']}{default_mark}\n"
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤."

    await message.answer(
        text,
        reply_markup=get_addresses_keyboard(addresses),
        parse_mode="HTML"
    )
    await state.set_state(AboutMeStates.ADDRESS_MENU)
