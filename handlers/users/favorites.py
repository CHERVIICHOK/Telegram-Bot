import os
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from database.users.favorites_db import (
    get_user_favorites,
    add_product_to_favorites,
    remove_product_from_favorites
)
from database.users.warehouse_connection import create_connection_warehouse, close_connection_warehouse
from keyboards.users.favorites_keyboards import (
    get_empty_favorites_keyboard,
    get_favorites_keyboard,
)
from keyboards.users.profile_keyboards import get_profile_keyboard
from states.favorites_state import FavoritesState
from database.users.database import add_to_cart

router = Router()


def fetch_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ —Å–∫–ª–∞–¥–∞"""
    conn = create_connection_warehouse()
    try:
        cursor = conn.cursor()
        cursor.execute('''
        SELECT DISTINCT category 
        FROM products 
        WHERE is_active = 1 AND quantity > 0
        ORDER BY category
        ''')

        categories = [row[0] for row in cursor.fetchall()]
        return categories
    finally:
        close_connection_warehouse(conn)


@router.callback_query(F.data == "profile:favorites")
async def show_favorites(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ"""
    await state.set_state(FavoritesState.viewing_favorites)

    telegram_id = callback.from_user.id
    favorites = get_user_favorites(telegram_id)

    if favorites:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        await show_favorite_item(callback.message, telegram_id, 0)
    else:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            reply_markup=get_empty_favorites_keyboard()
        )

    await callback.answer()


async def show_favorite_item(message, telegram_id, index):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    favorites = get_user_favorites(telegram_id)

    if not favorites or index >= len(favorites):
        await message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            reply_markup=get_empty_favorites_keyboard()
        )
        return

    product = favorites[index]
    category = product[1]
    product_name = product[2]
    product_full_name = product[3]
    flavor = product[4]
    price = product[5]
    description = product[6]
    quantity = product[7]

    product_info = (
        f"<b>{product_full_name}</b>\n\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
        f"<b>–í–∫—É—Å:</b> {flavor}\n"
        f"<b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n"
        f"<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {quantity} —à—Ç.\n\n"
    )

    if description != "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ":
        product_info += "{description}\n\n"

    markup = get_favorites_keyboard(favorites, index)

    image_path = f"C:\\Users\\Iskander\\PycharmProjects\\ZK\\IMAGES\\{category}_{product_name}.jpg"

    if os.path.isfile(image_path):
        photo = FSInputFile(image_path)
        await message.delete()
        await message.answer_photo(
            photo=photo,
            caption=product_info,
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        await message.edit_text(
            product_info,
            reply_markup=markup,
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("favorites:next:"))
async def navigate_favorites_next(callback: CallbackQuery):
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º"""
    current_index = int(callback.data.split(":")[2])
    telegram_id = callback.from_user.id

    await show_favorite_item(callback.message, telegram_id, current_index + 1)
    await callback.answer()


@router.callback_query(F.data.startswith("favorites:prev:"))
async def navigate_favorites_prev(callback: CallbackQuery):
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç–æ–≤–∞—Ä—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º"""
    current_index = int(callback.data.split(":")[2])
    telegram_id = callback.from_user.id

    await show_favorite_item(callback.message, telegram_id, current_index - 1)
    await callback.answer()


@router.callback_query(F.data.startswith("favorites:add_to_cart:"))
async def add_favorite_to_cart(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id = int(callback.data.split(":")[2])
    user_id = callback.from_user.id

    result = add_to_cart(user_id, product_id, 1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ–º 1 –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞

    if result:
        await callback.answer(
            text="‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            show_alert=True
        )
    else:
        await callback.answer(
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            show_alert=True
        )


@router.callback_query(F.data.startswith("favorites:remove:"))
async def remove_from_favorites(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    product_id = int(callback.data.split(":")[2])
    telegram_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    favorites = get_user_favorites(telegram_id)

    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —É–¥–∞–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    current_index = None
    for i, item in enumerate(favorites):
        if item[0] == product_id:  # product_id - –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ—Ä—Ç–µ–∂–µ
            current_index = i
            break

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
    result = remove_product_from_favorites(telegram_id, product_id)

    if result:
        await callback.answer(
            text="‚úîÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!",
            show_alert=True
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        new_favorites = get_user_favorites(telegram_id)

        if not new_favorites:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
                reply_markup=get_empty_favorites_keyboard()
            )
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∏–Ω–¥–µ–∫—Å –ø–æ–∫–∞–∑–∞—Ç—å
            if current_index is not None:
                # –ï—Å–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
                if current_index >= len(new_favorites):
                    new_index = max(0, current_index - 1)
                else:
                    # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å —Ç–µ–º –∂–µ –∏–Ω–¥–µ–∫—Å–æ–º (–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π)
                    new_index = current_index

                await show_favorite_item(callback.message, telegram_id, new_index)
            else:
                # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å
                await show_favorite_item(callback.message, telegram_id, 0)
    else:
        await callback.answer(
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!",
            show_alert=True
        )


@router.callback_query(F.data == "favorites:back_to_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    await state.clear()

    try:
        await callback.message.edit_text(
            "–ü—Ä–æ—Ñ–∏–ª—å:",
            reply_markup=get_profile_keyboard()
        )
    except Exception:
        await callback.message.delete()
        await callback.message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å:",
            reply_markup=get_profile_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data.startswith("favorites_catalog:add:"))
async def add_to_favorites_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    product_id = int(callback.data.split(":")[2])
    user_id = callback.from_user.id

    result = add_product_to_favorites(user_id, product_id)

    if result:
        await callback.answer(
            text="‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
            show_alert=True
        )

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            callback_data="favorites_catalog:back_to_favorites"
        ))
        builder.row(InlineKeyboardButton(
            text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤",
            callback_data=f"favorites_catalog:back_to_products:{(await state.get_data())['selected_category']}"
        ))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        state_data = await state.get_data()
        if 'photo_message_id' in state_data:
            # –ù–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=builder.as_markup()
            )
        else:
            await callback.message.edit_text(
                "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=builder.as_markup()
            )
    else:
        await callback.answer(
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
            show_alert=True
        )


@router.callback_query(F.data == "favorites_catalog:back_to_favorites")
async def back_to_favorites_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    await show_favorites(callback, state)


@router.callback_query(F.data == "favorites:noop")
async def favorites_noop_callback(callback: CallbackQuery):
    """Handles clicks on inactive navigation buttons."""
    await callback.answer(cache_time=5)
