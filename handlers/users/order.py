import datetime
import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
import re

from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.admins.orders_bd import update_order_status
from database.admins.staff_db import get_staff_by_role
from database.discounts_db import DiscountsDatabase
from states.order_state import OrderState
from keyboards.users.order_keyboards import (
    get_payment_method_kb,
    get_order_confirmation_kb, get_delivery_date_kb, get_delivery_time_kb,
    get_skip_comment_kb, get_cancel_kb, get_back_cancel_kb, get_edit_order_kb, get_skip_phone_number_kb,
    get_delivery_address_kb, get_promo_code_kb
)
from database.users.database import (
    get_db_connection, save_order_item, get_cart_items,
    clear_cart, save_incomplete_order, get_incomplete_order, delete_incomplete_order, get_product_category,
    get_user_past_addresses, calculate_cart_total, save_order_with_promo
)
from utils.order_timeout_manager import order_timeout_manager

router = Router()

logger = logging.getLogger(__name__)

discounts_db = DiscountsDatabase()


def calculate_discount(promo_data, cart_total, cart_items):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –∫–æ—Ä–∑–∏–Ω—ã
    """
    if not promo_data:
        return 0.0, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    if cart_total < promo_data['min_order_amount']:
        return 0.0, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promo_data['min_order_amount']:.2f} ‚ÇΩ"

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    if promo_data['discount_type'] == 'percentage':
        discount = cart_total * (promo_data['discount_value'] / 100)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å–∫–∏–¥–∫—É —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–∫—Å–∏–º—É–º 50% –æ—Ç —Å—É–º–º—ã)
        max_discount = cart_total * 0.5
        discount = min(discount, max_discount)
    else:  # fixed_amount
        discount = promo_data['discount_value']

    # –°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
    discount = min(discount, cart_total)

    return discount, "–°–∫–∏–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!"


def calculate_action_discount(cart_items):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–∏–¥–∫—É –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–æ–±—â–∞—è_—Å–∫–∏–¥–∫–∞, –¥–µ—Ç–∞–ª–∏_–∞–∫—Ü–∏–π, –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ_–∞–∫—Ü–∏–∏)
    """
    applicable_actions = discounts_db.get_active_actions_for_products(cart_items)

    if not applicable_actions:
        return 0.0, [], []

    total_action_discount = 0.0
    action_details = []
    applied_actions = []

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∞–∫—Ü–∏—è–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    processed_items = set()

    for action in applicable_actions:
        action_discount = 0.0
        affected_items = []

        for item in action['applicable_items']:
            item_key = f"{item['product_id']}_{item['product_full_name']}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—Ä—É–≥–æ–π –∞–∫—Ü–∏–µ–π
            if item_key not in processed_items:
                item_total = item['total_price']

                if action['discount_type'] == 'percentage':
                    item_discount = item_total * (action['discount_value'] / 100)
                else:  # fixed_amount
                    # –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
                    item_discount = min(action['discount_value'] * item['quantity'], item_total)

                action_discount += item_discount
                affected_items.append({
                    'product_name': item['product_full_name'],
                    'quantity': item['quantity'],
                    'original_price': item_total,
                    'discount': item_discount
                })
                processed_items.add(item_key)

        if action_discount > 0:
            total_action_discount += action_discount
            action_details.append({
                'title': action['title'],
                'description': action['description'],
                'discount_amount': action_discount,
                'affected_items': affected_items
            })
            applied_actions.append(action)

    return total_action_discount, action_details, applied_actions


def compare_discounts(promo_discount, promo_data, action_discount, action_details):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–∫–∏–¥–∫–∏ –æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –∞–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Ç–∏–ø_—Å–∫–∏–¥–∫–∏, —Ä–∞–∑–º–µ—Ä_—Å–∫–∏–¥–∫–∏, –¥–µ—Ç–∞–ª–∏)
    """
    if promo_discount > action_discount:
        return 'promo', promo_discount, {
            'promo_code': promo_data['code'] if promo_data else '',
            'promo_data': promo_data
        }
    elif action_discount > 0:
        return 'action', action_discount, {
            'action_details': action_details
        }
    else:
        return 'none', 0.0, {}


def format_discount_info(discount_type, discount_amount, discount_details):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if discount_type == 'none' or discount_amount <= 0:
        return ""

    info = f"üí∞ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞: {discount_amount:.2f} ‚ÇΩ\n"

    if discount_type == 'promo':
        promo_code = discount_details.get('promo_code', '')
        info += f"üìã –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}\n"
    elif discount_type == 'action':
        info += "üéâ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏:\n"
        for action in discount_details.get('action_details', []):
            info += f"‚Ä¢ {action['title']}: -{action['discount_amount']:.2f} ‚ÇΩ\n"

    return info


def check_available_discounts(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö
    """
    cart_total, cart_items = calculate_cart_total(user_id)
    action_discount, action_details, applied_actions = calculate_action_discount(cart_items)

    if action_discount > 0:
        return {
            'has_discounts': True,
            'discount_amount': action_discount,
            'action_details': action_details,
            'message': f"üéâ –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∞–∫—Ü–∏–∏! –≠–∫–æ–Ω–æ–º–∏—è: {action_discount:.2f} ‚ÇΩ"
        }

    return {
        'has_discounts': False,
        'discount_amount': 0.0,
        'action_details': [],
        'message': ""
    }


# –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@router.callback_query(F.data == "cart:checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    cart_items = get_cart_items(callback.from_user.id)

    if not cart_items:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ü–∏–∏
    discount_info = check_available_discounts(callback.from_user.id)

    conn = get_db_connection()
    incomplete_state, incomplete_data = get_incomplete_order(conn, callback.from_user.id)

    if incomplete_state and incomplete_data:
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="resume_order")
        builder.button(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_order")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order_process")
        builder.adjust(1)

        message_text = "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ?"
        if discount_info['has_discounts']:
            message_text += f"\n\n{discount_info['message']}"

        await callback.message.answer(
            message_text,
            reply_markup=builder.as_markup()
        )
        return

    await state.set_state(OrderState.name)

    message_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    if discount_info['has_discounts']:
        message_text = f"{discount_info['message']}\n\n{message_text}"

    await callback.message.answer(
        message_text,
        reply_markup=get_cancel_kb()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(StateFilter(OrderState.name))
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()

    if len(name) < 2:
        await message.answer(
            "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:",
            reply_markup=get_cancel_kb()
        )
        return

    await state.update_data(name=name)

    current_data = await state.get_data()
    if 'phone' in current_data and 'delivery_date' in current_data:
        await show_order_confirmation(message, state, message.from_user.id)
        return

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ—Ç–æ–∫
    await state.set_state(OrderState.phone)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...",
        reply_markup=get_skip_phone_number_kb()
    )

    conn = get_db_connection()
    save_incomplete_order(conn, message.from_user.id, "name", await state.get_data())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(StateFilter(OrderState.phone))
async def process_phone(message: Message, state: FSMContext):
    phone = message.text.strip()

    phone_pattern = r'^\+?[0-9]{10,12}$'
    if not re.match(phone_pattern, phone):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7... –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_skip_phone_number_kb()
        )
        return

    await state.update_data(phone=phone)

    current_data = await state.get_data()
    if 'delivery_date' in current_data and 'delivery_time' in current_data:
        await show_order_confirmation(message, state, message.from_user.id)
        return

    await state.set_state(OrderState.delivery_date)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23.03.2025):",
        reply_markup=get_delivery_date_kb()
    )

    conn = get_db_connection()
    save_incomplete_order(conn, message.from_user.id, "phone", await state.get_data())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.callback_query(lambda c: c.data == "skip_phone_number")
async def process_skip_phone(callback: CallbackQuery, state: FSMContext):
    await state.update_data(phone="")

    current_data = await state.get_data()
    if 'delivery_date' in current_data and 'delivery_time' in current_data:
        await show_order_confirmation(callback.message, state, callback.from_user.id)
        return

    await state.set_state(OrderState.delivery_date)

    await callback.answer()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23.03.2025):",
        reply_markup=get_delivery_date_kb()
    )

    conn = get_db_connection()
    save_incomplete_order(conn, callback.from_user.id, "phone", await state.get_data())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
@router.message(StateFilter(OrderState.delivery_date))
async def process_manual_date(message: Message, state: FSMContext):
    manual_date = message.text.strip()

    date_pattern = r'^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(202[4-9])$'
    if not re.match(date_pattern, manual_date):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.03.2024) –∏–ª–∏ "
            "–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_delivery_date_kb()
        )
        return

    try:
        day, month, year = map(int, manual_date.split('.'))
        input_date = datetime.date(year, month, day)
        today = datetime.date.today()

        if input_date < today:
            await message.answer(
                "–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:",
                reply_markup=get_delivery_date_kb()
            )
            return
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=get_delivery_date_kb()
        )
        return

    await state.update_data(delivery_date=manual_date)

    current_data = await state.get_data()
    if 'delivery_time' in current_data and 'delivery_type' in current_data:
        await show_order_confirmation(message, state, message.from_user.id)
        return

    await state.set_state(OrderState.delivery_time)
    await message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {manual_date}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:20):",
        reply_markup=get_delivery_time_kb()
    )

    conn = get_db_connection()
    save_incomplete_order(conn, message.from_user.id, "delivery_date", await state.get_data())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
@router.callback_query(StateFilter(OrderState.delivery_date), F.data.startswith("date_"))
async def process_delivery_date(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.replace("date_", "")

    await state.update_data(delivery_date=date_str)

    current_data = await state.get_data()
    if 'delivery_time' in current_data and 'delivery_type' in current_data:
        await show_order_confirmation(callback.message, state, callback.from_user.id)
        return

    await state.set_state(OrderState.delivery_time)
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_str}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:20):",
        reply_markup=get_delivery_time_kb()
    )

    conn = get_db_connection()
    save_incomplete_order(conn, callback.from_user.id, "delivery_date", await state.get_data())

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.message(StateFilter(OrderState.delivery_time))
async def process_manual_time(message: Message, state: FSMContext):
    manual_time = message.text.strip()

    time_pattern = r'^([01]?[0-9]|2[0-3]):([0-5][0-9])$'
    if not re.match(time_pattern, manual_time):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:20):",
            reply_markup=get_delivery_time_kb()
        )
        return

    await state.update_data(delivery_time=manual_time)

    await state.update_data(delivery_type="–ö—É—Ä—å–µ—Ä–æ–º")

    current_data = await state.get_data()
    if 'delivery_address' in current_data and 'payment_method' in current_data:
        await show_order_confirmation(message, state, message.from_user.id)
        return

    await state.set_state(OrderState.delivery_address)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
        reply_markup=get_back_cancel_kb("delivery_time")
    )

    conn = get_db_connection()
    save_incomplete_order(conn, message.from_user.id, "delivery_time", await state.get_data())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.callback_query(StateFilter(OrderState.delivery_time), F.data.startswith("time_"))
async def process_delivery_time(callback: CallbackQuery, state: FSMContext):
    time_slot = callback.data.replace("time_", "")
    await state.update_data(delivery_time=time_slot)
    await state.update_data(delivery_type="–ö—É—Ä—å–µ—Ä–æ–º")

    current_data = await state.get_data()
    if 'delivery_address' in current_data and 'payment_method' in current_data:
        await show_order_confirmation(callback.message, state, callback.from_user.id)
        return

    await state.set_state(OrderState.delivery_address)

    past_addresses = get_user_past_addresses(callback.from_user.id)

    if past_addresses:
        await state.update_data(past_addresses=past_addresses)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:",
            reply_markup=get_delivery_address_kb(callback.from_user.id)
        )
    else:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
            reply_markup=get_back_cancel_kb("delivery_time")
        )

    conn = get_db_connection()
    save_incomplete_order(conn, callback.from_user.id, "delivery_time", await state.get_data())

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.callback_query(StateFilter(OrderState.delivery_type))
async def process_delivery_type(callback: CallbackQuery, state: FSMContext):
    if callback.data == "delivery_type_pickup":
        delivery_type = "–°–∞–º–æ–≤—ã–≤–æ–∑"
        await state.update_data(delivery_type=delivery_type)

        current_data = await state.get_data()
        if 'payment_method' in current_data:
            await show_order_confirmation(callback.message, state, callback.from_user.id)
            return

        await state.set_state(OrderState.payment_method)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=get_payment_method_kb()
        )
    elif callback.data == "delivery_type_courier":
        delivery_type = "–ö—É—Ä—å–µ—Ä–æ–º"
        await state.update_data(delivery_type=delivery_type)

        await state.set_state(OrderState.delivery_address)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
            reply_markup=get_back_cancel_kb("delivery_type")
        )
    elif callback.data == "go_back_delivery_time":
        await handle_go_back(callback, state)
    elif callback.data == "cancel_order_process":
        await handle_cancel_order(callback, state)

    conn = get_db_connection()
    save_incomplete_order(conn, callback.from_user.id, "delivery_type", await state.get_data())

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.message(StateFilter(OrderState.delivery_address))
async def process_delivery_address(message: Message, state: FSMContext):
    address = message.text.strip()

    if len(address) < 3:
        await message.answer(
            "–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:",
            reply_markup=get_back_cancel_kb("delivery_type")
        )
        return

    await state.update_data(delivery_address=address)

    current_data = await state.get_data()
    if 'payment_method' in current_data:
        await show_order_confirmation(message, state, message.from_user.id)
        return

    await state.set_state(OrderState.payment_method)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_method_kb()
    )

    conn = get_db_connection()
    save_incomplete_order(conn, message.from_user.id, "delivery_address", await state.get_data())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
@router.callback_query(StateFilter(OrderState.delivery_address), F.data.startswith("past_address_"))
async def process_past_address_selection(callback: CallbackQuery, state: FSMContext):
    address_index = int(callback.data.replace("past_address_", ""))

    past_addresses = get_user_past_addresses(callback.from_user.id)

    if address_index < len(past_addresses):
        selected_address = past_addresses[address_index]

        await state.update_data(delivery_address=selected_address)

        current_data = await state.get_data()
        if 'payment_method' in current_data:
            await show_order_confirmation(callback.message, state, callback.from_user.id)
            return

        await state.set_state(OrderState.payment_method)
        await callback.message.edit_text(
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {selected_address}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=get_payment_method_kb()
        )

        conn = get_db_connection()
        save_incomplete_order(conn, callback.from_user.id, "delivery_address", await state.get_data())

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å"
@router.callback_query(StateFilter(OrderState.delivery_address), F.data == "new_address")
async def process_new_address_button(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
        reply_markup=get_back_cancel_kb("delivery_type")
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
@router.callback_query(F.data == "header_ignore")
async def ignore_header_click(callback: CallbackQuery):
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(StateFilter(OrderState.payment_method))
async def process_payment_method(callback: CallbackQuery, state: FSMContext):
    if callback.data == "payment_transfer":
        payment_method = "–ü–µ—Ä–µ–≤–æ–¥"
        await state.update_data(payment_method=payment_method)

        current_data = await state.get_data()
        if 'comment' in current_data or current_data.get('comment') == '':
            await show_order_confirmation(callback.message, state, callback.from_user.id)
            return
        await state.set_state(OrderState.comment)

        await callback.message.answer(
            "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥:",
            reply_markup=get_skip_comment_kb()
        )
    elif callback.data == "payment_cash":
        payment_method = "–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"
        await state.update_data(payment_method=payment_method)

        current_data = await state.get_data()
        if 'comment' in current_data or current_data.get('comment') == '':
            await show_order_confirmation(callback.message, state, callback.from_user.id)
            return
        await state.set_state(OrderState.comment)

        await callback.message.answer(
            "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥:",
            reply_markup=get_skip_comment_kb()
        )
    elif callback.data == "go_back_payment":
        await state.set_state(OrderState.delivery_address)
        data = await state.get_data()
        await callback.message.answer(
            f"–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: {data.get('delivery_address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
            reply_markup=get_back_cancel_kb("delivery_time")
        )
    elif callback.data == "cancel_order_process":
        await handle_cancel_order(callback, state)

    conn = get_db_connection()
    save_incomplete_order(conn, callback.from_user.id, "payment_method", await state.get_data())

    await callback.answer()


async def handle_go_back_to_delivery_address(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderState.delivery_address)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
        reply_markup=get_back_cancel_kb("delivery_type")
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ –µ–≥–æ –ø—Ä–æ–ø—É—Å–∫
@router.callback_query(StateFilter(OrderState.comment), F.data == "skip_comment")
async def skip_comment(callback: CallbackQuery, state: FSMContext):
    await state.update_data(comment="")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤–º–µ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(OrderState.promo_code)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=get_promo_code_kb()
    )
    await callback.answer()


@router.callback_query(StateFilter(OrderState.comment), F.data.startswith("go_back_"))
async def go_back_from_comment(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderState.payment_method)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_method_kb()
    )
    await callback.answer()


@router.callback_query(StateFilter(OrderState.comment), F.data == "cancel_order_process")
async def cancel_from_comment(callback: CallbackQuery, state: FSMContext):
    await handle_cancel_order(callback, state)
    await callback.answer()


@router.message(StateFilter(OrderState.comment))
async def process_comment(message: Message, state: FSMContext):
    comment = message.text.strip()
    await state.update_data(comment=comment)

    conn = get_db_connection()
    save_incomplete_order(conn, message.from_user.id, "comment", await state.get_data())

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await state.set_state(OrderState.promo_code)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=get_promo_code_kb()
    )


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
@router.callback_query(StateFilter(OrderState.promo_code), F.data == "skip_promo_code")
async def skip_promo_code(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω
    cart_total, cart_items = calculate_cart_total(callback.from_user.id)
    action_discount, action_details, applied_actions = calculate_action_discount(cart_items)

    if action_discount > 0:
        await state.update_data(
            promo_code="",
            discount_amount=action_discount,
            promo_data=None,
            discount_type='action',
            action_details=action_details
        )

        await callback.message.answer(
            f"üí° –î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –∞–∫—Ü–∏–∏!\n"
            f"üí∞ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {action_discount:.2f} ‚ÇΩ\n"
            f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {cart_total - action_discount:.2f} ‚ÇΩ"
        )
    else:
        await state.update_data(promo_code="", discount_amount=0.0, promo_data=None, discount_type='none')

    await show_order_confirmation(callback.message, state, user_id=callback.from_user.id)
    await callback.answer()


@router.message(StateFilter(OrderState.promo_code))
async def process_promo_code(message: Message, state: FSMContext):
    promo_code = message.text.strip().upper()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
    cart_total, cart_items = calculate_cart_total(message.from_user.id)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –æ—Ç –∞–∫—Ü–∏–π
    action_discount, action_details, applied_actions = calculate_action_discount(cart_items)

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    promo_data, validation_message = discounts_db.validate_promo_code_for_user(promo_code, message.from_user.id)

    if promo_data:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
        promo_discount, promo_message = calculate_discount(promo_data, cart_total, cart_items)

        if promo_discount > 0:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∞–∫—Ü–∏–∏
            best_discount_type, best_discount_amount, best_discount_details = compare_discounts(
                promo_discount, promo_data, action_discount, action_details
            )

            if best_discount_type == 'promo':
                await state.update_data(
                    promo_code=promo_code,
                    discount_amount=best_discount_amount,
                    promo_data=promo_data,
                    discount_type='promo',
                    action_details=None
                )

                response_text = f"‚úÖ {validation_message}\n"
                response_text += f"üí∞ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {best_discount_amount:.2f} ‚ÇΩ\n"

                if action_discount > 0:
                    response_text += f"\nüí° –ü—Ä–æ–º–æ–∫–æ–¥ –≤—ã–≥–æ–¥–Ω–µ–µ –∞–∫—Ü–∏–π (—ç–∫–æ–Ω–æ–º–∏—è: {best_discount_amount - action_discount:.2f} ‚ÇΩ)\n"

                response_text += f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {cart_total - best_discount_amount:.2f} ‚ÇΩ"

            else:  # –ê–∫—Ü–∏–∏ –≤—ã–≥–æ–¥–Ω–µ–µ
                await state.update_data(
                    promo_code="",
                    discount_amount=best_discount_amount,
                    promo_data=None,
                    discount_type='action',
                    action_details=action_details
                )

                response_text = f"üí° –ê–∫—Ü–∏–∏ –≤—ã–≥–æ–¥–Ω–µ–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞!\n"
                response_text += f"üí∞ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –æ—Ç –∞–∫—Ü–∏–π: {best_discount_amount:.2f} ‚ÇΩ\n"
                response_text += f"üìã –ü—Ä–æ–º–æ–∫–æ–¥ –¥–∞–ª –±—ã —Å–∫–∏–¥–∫—É: {promo_discount:.2f} ‚ÇΩ\n"
                response_text += f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {cart_total - best_discount_amount:.2f} ‚ÇΩ"

            await message.answer(response_text)

            conn = get_db_connection()
            save_incomplete_order(conn, message.from_user.id, "promo_code", await state.get_data())

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
            await show_order_confirmation(message, state, message.from_user.id)
        else:
            # –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ü–∏–∏
            if action_discount > 0:
                await state.update_data(
                    promo_code="",
                    discount_amount=action_discount,
                    promo_data=None,
                    discount_type='action',
                    action_details=action_details
                )

                response_text = f"‚ùå {promo_message}\n\n"
                response_text += f"üí° –ù–æ –¥–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –∞–∫—Ü–∏–∏!\n"
                response_text += f"üí∞ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –æ—Ç –∞–∫—Ü–∏–π: {action_discount:.2f} ‚ÇΩ\n"
                response_text += f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {cart_total - action_discount:.2f} ‚ÇΩ"

                await message.answer(response_text)
                await show_order_confirmation(message, state, message.from_user.id)
            else:
                # –ù–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∏ –∞–∫—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
                await state.update_data(promo_code="", discount_amount=0.0, promo_data=None, discount_type='none')
                await message.answer(
                    f"‚ùå {promo_message}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
                    reply_markup=get_promo_code_kb()
                )
    else:
        # –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ü–∏–∏
        if action_discount > 0:
            await state.update_data(
                promo_code="",
                discount_amount=action_discount,
                promo_data=None,
                discount_type='action',
                action_details=action_details
            )

            response_text = f"‚ùå {validation_message}\n\n"
            response_text += f"üí° –ù–æ –¥–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –∞–∫—Ü–∏–∏!\n"
            response_text += f"üí∞ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –æ—Ç –∞–∫—Ü–∏–π: {action_discount:.2f} ‚ÇΩ\n"
            response_text += f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {cart_total - action_discount:.2f} ‚ÇΩ"

            await message.answer(response_text)
            await show_order_confirmation(message, state, message.from_user.id)
        else:
            # –ù–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∏ –∞–∫—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã
            await state.update_data(promo_code="", discount_amount=0.0, promo_data=None, discount_type='none')
            await message.answer(
                f"‚ùå {validation_message}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
                reply_markup=get_promo_code_kb()
            )


@router.callback_query(StateFilter(OrderState.promo_code), F.data.startswith("go_back_"))
async def go_back_from_promo_code(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderState.comment)
    await callback.message.answer(
        "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥:",
        reply_markup=get_skip_comment_kb()
    )
    await callback.answer()


@router.callback_query(StateFilter(OrderState.promo_code), F.data == "cancel_order_process")
async def cancel_from_promo_code(callback: CallbackQuery, state: FSMContext):
    await handle_cancel_order(callback, state)
    await callback.answer()


# –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def show_order_confirmation(message: Message, state: FSMContext, user_id=None):
    data = await state.get_data()

    user_id = user_id or message.from_user.id
    cart_items = get_cart_items(user_id)

    total_amount = sum(item['total_price'] for item in cart_items)
    discount_amount = data.get('discount_amount', 0.0)
    discount_type = data.get('discount_type', 'none')
    final_amount = total_amount - discount_amount

    order_text = "üìã <b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n\n"

    order_text += "<b>–¢–æ–≤–∞—Ä—ã:</b>\n"
    for i, item in enumerate(cart_items, 1):
        order_text += f"{i}. {item['product_full_name']} x {item['quantity']} = {item['total_price']:.2f} ‚ÇΩ\n"

    order_text += f"\n<b>–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:</b> {total_amount:.2f} ‚ÇΩ\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if discount_amount > 0:
        if discount_type == 'promo':
            promo_code = data.get('promo_code', '')
            order_text += f"<b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n"
            order_text += f"<b>–°–∫–∏–¥–∫–∞:</b> -{discount_amount:.2f} ‚ÇΩ\n"
        elif discount_type == 'action':
            order_text += f"<b>–ê–∫—Ü–∏–∏:</b>\n"
            action_details = data.get('action_details', [])
            for action in action_details:
                order_text += f"‚Ä¢ {action['title']}: -{action['discount_amount']:.2f} ‚ÇΩ\n"
            order_text += f"<b>–û–±—â–∞—è —Å–∫–∏–¥–∫–∞:</b> -{discount_amount:.2f} ‚ÇΩ\n"

        order_text += f"<b>–ö –æ–ø–ª–∞—Ç–µ:</b> {final_amount:.2f} ‚ÇΩ\n\n"
    else:
        order_text += f"<b>–ò—Ç–æ–≥–æ:</b> {total_amount:.2f} ‚ÇΩ\n\n"

    order_text += "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>\n"
    order_text += f"–ò–º—è: {data['name']}\n"
    order_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
    order_text += f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}\n"
    order_text += f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_time']}\n"
    order_text += f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_type']}\n"
    order_text += f"–ê–¥—Ä–µ—Å: {data['delivery_address']}\n"
    order_text += f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data['payment_method']}\n"

    if data.get('comment'):
        order_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"

    order_text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ."

    await state.set_state(OrderState.confirmation)
    await message.answer(
        order_text,
        reply_markup=get_order_confirmation_kb(),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(StateFilter(OrderState.confirmation))
async def process_confirmation(callback: CallbackQuery, state: FSMContext):
    if callback.data == "confirm_order":
        data = await state.get_data()
        conn = get_db_connection()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–∏–¥–∫–µ
        discount_amount = data.get('discount_amount', 0.0)
        promo_data = data.get('promo_data')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        order_id = save_order_with_promo(
            conn,
            callback.from_user.id,
            data['name'],
            data['phone'],
            data['delivery_date'],
            data['delivery_time'],
            data['delivery_type'],
            data['delivery_address'],
            data['payment_method'],
            data.get('comment', ''),
            data.get('promo_code', ''),
            discount_amount
        )

        cart_items = get_cart_items(callback.from_user.id)

        total_amount = sum(item['total_price'] for item in cart_items)
        final_amount = total_amount - discount_amount

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
        for item in cart_items:
            save_order_item(conn, order_id[0], item['product_id'], item['quantity'], item['price'])

            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–ª–∏ –∞–∫—Ü–∏–π
            discount_type = data.get('discount_type', 'none')

            if discount_type == 'promo' and promo_data and discount_amount > 0:
                try:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
                    with discounts_db.connection:
                        discounts_db.cursor.execute(
                            "UPDATE promo_codes SET current_uses = current_uses + 1 WHERE id = ?",
                            (promo_data['id'],)
                        )

                    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                    with discounts_db.connection:
                        discounts_db.cursor.execute("""
                                INSERT INTO promo_code_usage (promo_code_id, user_id, order_id, discount_amount, order_total)
                                VALUES (?, ?, ?, ?, ?)
                            """, (promo_data['id'], callback.from_user.id, order_id[0], discount_amount, total_amount))

                    logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ {data.get('promo_code')} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –∑–∞–∫–∞–∑—É {order_id[0]}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")

            elif discount_type == 'action' and discount_amount > 0:
                try:
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ü–∏–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
                    action_details = data.get('action_details', [])
                    for action in action_details:
                        logger.info(
                            f"–ê–∫—Ü–∏—è '{action['title']}' –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –∑–∞–∫–∞–∑—É {order_id[0]}, —Å–∫–∏–¥–∫–∞: {action['discount_amount']:.2f} ‚ÇΩ")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ü–∏–π: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        header_admin_note = f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id[0]}</b>\n\n"
        header_admin_note += "<b>–¢–æ–≤–∞—Ä—ã:</b>\n"

        all_order_product_short_name = []
        all_order_flavors = []
        all_order_category = []
        all_cost_product = []

        for position in cart_items:
            quantity = position['quantity']
            if quantity > 1:
                for product in range(quantity - 1):
                    all_cost_product.append(position['price'])
                    all_order_product_short_name.append(
                        position['product_full_name'].replace(position['flavor'], '', 1).strip())
                    all_order_flavors.append(position['flavor'])
                    all_order_category.append(get_product_category(position['product_full_name']))
            all_cost_product.append(position['price'])
            all_order_product_short_name.append(
                position['product_full_name'].replace(position['flavor'], '', 1).strip())
            all_order_flavors.append(position['flavor'])
            all_order_category.append(get_product_category(position['product_full_name']))

        positions = []
        for position in range(len(all_order_product_short_name)):
            admin_order_text = (
                f"0. {all_order_category[position]}\n"
                f"1. {all_order_product_short_name[position]}\n"
                f"2. {all_order_flavors[position]}\n"
                f"3. {data['delivery_date']}\n"
                f"4. {data['delivery_time']}\n"
                f"5. {data['delivery_address']}\n"
                f"6. {data['name']}\n"
                f"7. Telegram, @{callback.from_user.username}\n"
                f"8. {data['phone']}\n"
                f"9. Bot\n"
                f"10. {all_cost_product[position]:.2f}\n"
                f"11. {discount_amount}\n"
                f"12. {data['payment_method']}\n"
                f"13. <code>{callback.from_user.id}</code>"
            )
            positions.append(admin_order_text)

        for i, item in enumerate(cart_items, 1):
            header_admin_note += f"{item['product_full_name']} : {item['quantity']},\n"
            header_admin_note += f"{i}. {item['product_full_name']} x {item['quantity']} = {item['total_price']:.2f} ‚ÇΩ\n"

        header_admin_note = header_admin_note.rstrip(", ")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if discount_amount > 0:
            header_admin_note += f"\n\nüí∞ <b>–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞:</b>\n"

            if discount_type == 'promo':
                promo_code = data.get('promo_code', '')
                header_admin_note += f"–¢–∏–ø: –ü—Ä–æ–º–æ–∫–æ–¥ ({promo_code})\n"
            elif discount_type == 'action':
                header_admin_note += f"–¢–∏–ø: –ê–∫—Ü–∏–∏\n"
                action_details = data.get('action_details', [])
                for action in action_details:
                    header_admin_note += f"‚Ä¢ {action['title']}: -{action['discount_amount']:.2f} ‚ÇΩ\n"

            header_admin_note += f"–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {discount_amount:.2f} ‚ÇΩ\n"
            header_admin_note += f"–°—É–º–º–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {total_amount:.2f} ‚ÇΩ\n"
            header_admin_note += f"–ö –æ–ø–ª–∞—Ç–µ: {final_amount:.2f} ‚ÇΩ"

        if data.get('comment'):
            header_admin_note += f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ (—É—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É)
        if final_amount > 3000:
            header_admin_note += (
                f"\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑!</b> –ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ "
                f"–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–æ–º–Ω–µ–Ω–∏—è, <b>—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>"
            )

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admins = get_staff_by_role(role="–ê–¥–º–∏–Ω")
            admin_ids = [admin['telegram_id'] for admin in admins if admin.get('is_active', 1)]
            for admin_id in admin_ids:
                try:
                    await callback.bot.send_message(
                        admin_id,
                        header_admin_note,
                        parse_mode="HTML"
                    )
                    for message in positions:
                        await callback.bot.send_message(
                            admin_id,
                            str(message),
                            parse_mode="HTML"
                        )
                    logger.info(f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∫—É—Ä—å–µ—Ä–∞–º
            couriers = get_staff_by_role(role="–ö—É—Ä—å–µ—Ä")
            courier_ids = [courier['telegram_id'] for courier in couriers if courier.get('is_active', 1)]
            for courier_id in courier_ids:
                try:
                    await callback.bot.send_message(
                        courier_id,
                        header_admin_note,
                        parse_mode="HTML"
                    )
                    for message in positions:
                        await callback.bot.send_message(
                            courier_id,
                            str(message)
                        )
                    logger.info(f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä—É {courier_id}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É {courier_id}: {e}")
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

        clear_cart(callback.from_user.id)
        update_order_status(order_id, 'processing')
        await order_timeout_manager.start_timer(order_id[0], callback.bot)

        delete_incomplete_order(conn, callback.from_user.id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        client_message = "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        client_message += f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_id[1]}\n"

        if discount_amount > 0:
            if discount_type == 'promo':
                client_message += f"üí∞ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {data.get('promo_code', '')}\n"
                client_message += f"üí∞ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {discount_amount:.2f} ‚ÇΩ\n"
            elif discount_type == 'action':
                client_message += f"üéâ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–∫—Ü–∏–∏\n"
                client_message += f"üí∞ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {discount_amount:.2f} ‚ÇΩ\n"

            client_message += f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {final_amount:.2f} ‚ÇΩ\n"
        else:
            client_message += f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_amount:.2f} ‚ÇΩ\n"

        client_message += "\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."

        await callback.message.answer(client_message)
        await state.clear()

    elif callback.data == "edit_order":
        data = await state.get_data()
        await state.set_state(OrderState.edit_selection)

        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=get_edit_order_kb(data.get('delivery_type', ''))
        )

    elif callback.data == "cancel_order":
        conn = get_db_connection()
        delete_incomplete_order(conn, callback.from_user.id)

        await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
        await state.clear()

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data.startswith("go_back_"))
async def handle_go_back(callback: CallbackQuery, state: FSMContext):
    prev_state = callback.data.replace("go_back_", "")

    if prev_state == "name":
        await callback.message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –Ω–∞—á–∞–ª—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
        )
        await start_checkout(callback, state)
        return

    elif prev_state == "phone":
        await state.set_state(OrderState.name)
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=get_cancel_kb()
        )

    elif prev_state == "delivery_date":
        await state.set_state(OrderState.phone)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...",
            reply_markup=get_skip_phone_number_kb()
        )


    elif prev_state == "delivery_time":
        await state.set_state(OrderState.delivery_date)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_delivery_date_kb()
        )

    elif prev_state == "delivery_type":
        await state.set_state(OrderState.delivery_time)
        data = await state.get_data()
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {data.get('delivery_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_delivery_time_kb()
        )


    elif prev_state == "payment":
        await state.set_state(OrderState.delivery_address)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
            reply_markup=get_back_cancel_kb("delivery_time")
        )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "cancel_order_process")
async def handle_cancel_order(callback: CallbackQuery, state: FSMContext):
    conn = get_db_connection()
    delete_incomplete_order(conn, callback.from_user.id)

    await callback.message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "resume_order")
async def resume_incomplete_order(callback: CallbackQuery, state: FSMContext):
    conn = get_db_connection()
    incomplete_state, incomplete_data = get_incomplete_order(conn, callback.from_user.id)

    if not incomplete_state or not incomplete_data:
        await callback.message.answer("–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await start_checkout(callback, state)
        return

    await state.set_data(incomplete_data)

    if incomplete_state == "name":
        await state.set_state(OrderState.name)
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=get_cancel_kb()
        )
    elif incomplete_state == "phone":
        await state.set_state(OrderState.phone)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...",
            reply_markup=get_skip_phone_number_kb()
        )
    elif incomplete_state == "delivery_date":
        await state.set_state(OrderState.delivery_date)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_delivery_date_kb()
        )
    elif incomplete_state == "delivery_time":
        await state.set_state(OrderState.delivery_time)
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {incomplete_data['delivery_date']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "
            f"—Å–≤–æ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:20):",
            reply_markup=get_delivery_time_kb()
        )
    elif incomplete_state == "delivery_type":
        await state.update_data(delivery_type="–ö—É—Ä—å–µ—Ä–æ–º")

        await state.set_state(OrderState.delivery_address)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
            reply_markup=get_back_cancel_kb("delivery_time")
        )
    elif incomplete_state == "delivery_address":
        await state.set_state(OrderState.delivery_address)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
            reply_markup=get_back_cancel_kb("delivery_time")
        )
    elif incomplete_state == "payment_method":
        await state.set_state(OrderState.payment_method)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=get_payment_method_kb()
        )
    elif incomplete_state == "comment":
        await state.set_state(OrderState.comment)
        await callback.message.answer(
            "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥:",
            reply_markup=get_skip_comment_kb()
        )
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑. –ù–∞—á–Ω–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await start_checkout(callback, state)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(StateFilter(OrderState.edit_selection))
async def process_edit_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if callback.data == "edit_name":
        await state.set_state(OrderState.name)
        await callback.message.answer(
            f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {data.get('name', '')}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
            reply_markup=get_cancel_kb()
        )

    elif callback.data == "edit_phone":
        await state.set_state(OrderState.phone)
        await callback.message.answer(
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '')}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_skip_phone_number_kb()
        )

    elif callback.data == "edit_delivery_date":
        await state.set_state(OrderState.delivery_date)
        await callback.message.answer(
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('delivery_date', '')}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_delivery_date_kb()
        )

    elif callback.data == "edit_delivery_time":
        await state.set_state(OrderState.delivery_time)
        await callback.message.answer(
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('delivery_time', '')}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:",
            reply_markup=get_delivery_time_kb()
        )

    elif callback.data == "edit_address":
        await state.set_state(OrderState.delivery_address)
        await callback.message.answer(
            f"–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: {data.get('delivery_address', '')}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_back_cancel_kb("edit_selection")
        )

    elif callback.data == "edit_payment":
        await state.set_state(OrderState.payment_method)
        await callback.message.answer(
            f"–¢–µ–∫—É—â–∏–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data.get('payment_method', '')}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=get_payment_method_kb()
        )

    elif callback.data == "edit_comment":
        await state.set_state(OrderState.comment)
        await callback.message.answer(
            f"–¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥:",
            reply_markup=get_skip_comment_kb()
        )

    elif callback.data == "edit_promo_code":
        await state.set_state(OrderState.promo_code)
        current_promo = data.get('promo_code', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        current_discount = data.get('discount_amount', 0.0)
        promo_text = f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥: {current_promo}\n"
        if current_discount > 0:
            promo_text += f"–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {current_discount:.2f} ‚ÇΩ\n\n"
        promo_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ:"
        await callback.message.answer(
            promo_text,
            reply_markup=get_promo_code_kb()
        )

    elif callback.data == "back_to_confirmation":
        await show_order_confirmation(callback.message, state, callback.from_user.id)

    elif callback.data == "cancel_order":
        conn = get_db_connection()
        delete_incomplete_order(conn, callback.from_user.id)
        await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
        await state.clear()

    await callback.answer()


@router.callback_query(F.data == "resume_order")
async def resume_incomplete_order(callback: CallbackQuery, state: FSMContext):
    conn = get_db_connection()
    incomplete_state, incomplete_data = get_incomplete_order(conn, callback.from_user.id)

    if not incomplete_state or not incomplete_data:
        await callback.message.answer("–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await start_checkout(callback, state)
        return

    await state.set_data(incomplete_data)

    if incomplete_state == "name":
        await state.set_state(OrderState.name)
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=get_cancel_kb()
        )
    elif incomplete_state == "phone":
        await state.set_state(OrderState.phone)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...",
            reply_markup=get_skip_phone_number_kb()
        )
    elif incomplete_state == "delivery_date":
        await state.set_state(OrderState.delivery_date)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_delivery_date_kb()
        )
    elif incomplete_state == "delivery_time":
        await state.set_state(OrderState.delivery_time)
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {incomplete_data['delivery_date']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "
            f"—Å–≤–æ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:20):",
            reply_markup=get_delivery_time_kb()
        )
    elif incomplete_state == "delivery_type":
        await state.update_data(delivery_type="–ö—É—Ä—å–µ—Ä–æ–º")

        await state.set_state(OrderState.delivery_address)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
            reply_markup=get_back_cancel_kb("delivery_time")
        )
    elif incomplete_state == "delivery_address":
        await state.set_state(OrderState.delivery_address)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
            reply_markup=get_back_cancel_kb("delivery_time")
        )
    elif incomplete_state == "payment_method":
        await state.set_state(OrderState.payment_method)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=get_payment_method_kb()
        )
    elif incomplete_state == "comment":
        await state.set_state(OrderState.comment)
        await callback.message.answer(
            "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥:",
            reply_markup=get_skip_comment_kb()
        )
    elif incomplete_state == "promo_code":
        await state.set_state(OrderState.promo_code)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
            reply_markup=get_promo_code_kb()
        )
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑. –ù–∞—á–Ω–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await start_checkout(callback, state)
