import logging

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from database.admins.orders_bd import delete_order_by_id, get_order_by_id
from database.admins.staff_db import get_staff_by_role
from database.admins.users_db import get_username_by_telegram_id
from database.users.profile_db import (
    get_active_orders, get_all_orders, get_order_details, add_items_to_cart_from_order,
    should_send_notification, get_product_info_from_order
)
from database.users.reviews_db import (
    add_product_review,
    add_delivery_comment,
    has_product_review, has_delivery_comment
)
from states.profile_state import ProfileStates
from keyboards.users.profile_keyboards import (
    get_profile_keyboard, get_order_detail_keyboard, get_support_keyboard, get_status_emoji,
    get_active_order_list_keyboard, get_delivered_order_list_keyboard, get_delivery_rating_keyboard,
    get_product_list_keyboard, get_product_rating_keyboard, get_comment_keyboard, get_active_order_detail_keyboard,
    get_delivered_order_detail_keyboard
)
from keyboards.users.keyboards import main_menu_keyboard

profile_router = Router()

logger = logging.getLogger(__name__)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@profile_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_text_button(message: Message, state: FSMContext):
    await show_profile_menu(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@profile_router.message(Command("profile"))
async def cmd_profile(message: Message, state: FSMContext):
    await show_profile_menu(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@profile_router.callback_query(F.data == "menu:profile")
async def profile_from_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await show_profile_menu(callback.message, state)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
async def show_profile_menu(message: Message, state: FSMContext):
    await state.set_state(ProfileStates.MAIN)
    await message.answer(
        "üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É.",
        reply_markup=get_profile_keyboard(),
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑"
@profile_router.callback_query(F.data == "profile:track_orders")
async def track_orders(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(ProfileStates.TRACKING_ORDERS)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_orders = get_active_orders(callback.from_user.id)

    if not active_orders:
        await callback.message.edit_text(
            "üîç *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤*\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_profile_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "üîç *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
            reply_markup=get_active_order_list_keyboard(active_orders),
            parse_mode="Markdown"
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@profile_router.callback_query(F.data.startswith("profile:track_order_"))
async def show_tracked_order(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(ProfileStates.ORDER_DETAIL)

    order_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    await state.update_data(current_order_id=order_id, from_tracking=True)

    order_details = get_order_details(order_id)

    if not order_details:
        await callback.message.edit_text(
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_profile_keyboard()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    emoji = get_status_emoji(order_details['status'])
    items_text = "\n".join([
        f"‚Ä¢ {item['name']} x{item['quantity']} - {item['price']} ‚ÇΩ" for item in order_details['items']
    ])

    if not order_details['discount'] or order_details['discount'] == 0:
        text = (
            f"üîç <b>–ó–∞–∫–∞–∑ #{order_details['user_order_id']}</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {emoji} {order_details['status']}\n"
            f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {order_details['creation_date']}\n"
            f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {order_details['payment_method']}\n"
            f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_details['delivery_address']}\n"
            f"<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {order_details['total_amount']} ‚ÇΩ\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}"
        )
    else:
        text = (
            f"üîç <b>–ó–∞–∫–∞–∑ #{order_details['user_order_id']}</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {emoji} {order_details['status']}\n"
            f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {order_details['creation_date']}\n"
            f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {order_details['payment_method']}\n"
            f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_details['delivery_address']}\n"
            f"<b>–í–∞—à–∞ —Å–∫–∏–¥–∫–∞:</b> {order_details['discount']}\n"
            f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <s>{order_details['total_amount']}‚ÇΩ</s> ‚Üí {order_details['total_amount'] - order_details['discount']}‚ÇΩ\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}"
        )

    is_active = order_details['status'] != "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
    can_cancel = is_active  # –ú–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞

    await callback.message.edit_text(
        text,
        reply_markup=get_active_order_detail_keyboard(order_id, order_details['user_order_id'], is_active, can_cancel),
        parse_mode="HTML"
    )


@profile_router.callback_query(F.data.startswith("profile:cancel_order_"))
async def ask_cancel_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[-1])

    order = get_order_by_id(order_id)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    user_order_id = order.get("user_order_id")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç, –Ω–µ –æ—Ç–º–µ–Ω—è—Ç—å",
                    callback_data=f"profile:cancel_cancel_order_{order_id}"
                ),
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è",
                    callback_data=f"profile:confirm_cancel_order_{order_id}"
                ),
            ]
        ]
    )
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ #{user_order_id}?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=keyboard
    )
    await callback.answer()


@profile_router.callback_query(F.data.startswith("profile:confirm_cancel_order_"))
async def confirm_cancel_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[-1])

    order = get_order_by_id(order_id)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", show_alert=True)
        return

    success = delete_order_by_id(order_id)

    user_order_id = order.get("user_order_id")
    user_id = order.get("user_id")
    user_name = get_username_by_telegram_id(user_id)

    admin_note = (
        f"üõéÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞. <b>–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a>{user_id}</a> –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ <b>‚Ññ{order_id}</b>.\n\n\n"
        f"‚ÑπÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"     –ò–º—è: {order.get('name')}\n"
        f"     –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order.get('phone')}\n"
        f"     –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: https://t.me/{user_name}\n"
        f"     Telegram ID: {user_id}\n\n"
        f"–ó–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω {order.get('created_at')}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {order.get('status')}"
    )

    if success:
        admins = get_staff_by_role(role="–ê–¥–º–∏–Ω")
        couriers = get_staff_by_role(role="–ö—É—Ä—å–µ—Ä")

        admin_ids = [admin['telegram_id'] for admin in admins if admin.get('is_active', 1)]
        couriers_ids = [courier['telegram_id'] for courier in couriers if courier.get('is_active', 1)]

        for admin_id in admin_ids:
            try:
                await callback.bot.send_message(
                    admin_id,
                    admin_note,
                    parse_mode="HTML"
                )
                logger.info(f"SUCCESS: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            except Exception as e:
                logger.error(f"FAIL: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

        for couriers_id in couriers_ids:
            try:
                await callback.bot.send_message(
                    couriers_id,
                    admin_note,
                    parse_mode="HTML"
                )
                logger.info(f"SUCCESS: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {couriers_id}")
            except Exception as e:
                logger.error(f"FAIL: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {couriers_id}: {e}")

        await callback.message.edit_text(
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{user_order_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω.",
            reply_markup=get_profile_keyboard()
        )
        await callback.answer("‚òëÔ∏è –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω", show_alert=True)
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑!", show_alert=True)


@profile_router.callback_query(F.data.startswith("profile:cancel_cancel_order_"))
async def cancel_cancel_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[-1])
    order_details = get_order_details(order_id)
    if not order_details:
        await callback.message.edit_text(
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_profile_keyboard()
        )
        return

    emoji = get_status_emoji(order_details['status'])
    items_text = "\n".join([
        f"‚Ä¢ {item['name']} x{item['quantity']} - {item['price']} ‚ÇΩ" for item in order_details['items']
    ])

    if not order_details['discount'] or order_details['discount'] == 0:
        text = (
            f"üîç <b>–ó–∞–∫–∞–∑ #{order_details['user_order_id']}</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {emoji} {order_details['status']}\n"
            f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {order_details['creation_date']}\n"
            f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {order_details['payment_method']}\n"
            f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_details['delivery_address']}\n"
            f"<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {order_details['total_amount']} ‚ÇΩ\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}"
        )
    else:
        text = (
            f"üîç <b>–ó–∞–∫–∞–∑ #{order_details['user_order_id']}</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {emoji} {order_details['status']}\n"
            f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {order_details['creation_date']}\n"
            f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {order_details['payment_method']}\n"
            f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_details['delivery_address']}\n"
            f"<b>–í–∞—à–∞ —Å–∫–∏–¥–∫–∞:</b> {order_details['discount']}\n"
            f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <s>{order_details['total_amount']}‚ÇΩ</s> ‚Üí {order_details['total_amount'] - order_details['discount']}‚ÇΩ\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}"
        )

    is_active = order_details['status'] != "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
    can_cancel = is_active

    await callback.message.edit_text(
        text,
        reply_markup=get_order_detail_keyboard(order_id, is_active, can_cancel=can_cancel),
        parse_mode="HTML"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"
@profile_router.callback_query(F.data == "profile:order_history")
async def order_history(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(ProfileStates.ORDER_HISTORY)

    all_orders = get_all_orders(callback.from_user.id)

    if not all_orders:
        await callback.message.edit_text(
            "üìã *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤*\n\n"
            "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_profile_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "üìã *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
            reply_markup=get_delivered_order_list_keyboard(all_orders, prefix="history"),
            parse_mode="Markdown"
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
@profile_router.callback_query(F.data.startswith("profile:history_order_"))
async def show_history_order(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(ProfileStates.ORDER_DETAIL)

    order_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    await state.update_data(current_order_id=order_id, from_tracking=False)

    order_details = get_order_details(order_id)

    if not order_details:
        await callback.message.edit_text(
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_profile_keyboard()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    emoji = get_status_emoji(order_details['status'])
    items_text = "\n".join([
        f"‚Ä¢ {item['name']} x{item['quantity']} - {item['price']} ‚ÇΩ"
        for item in order_details['items']
    ])

    if not order_details['discount'] or order_details['discount'] == 0:
        text = (
            f"üìã <b>–ó–∞–∫–∞–∑ #{order_details['user_order_id']}</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {emoji} {order_details['status']}\n"
            f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {order_details['creation_date']}\n"
            f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {order_details['payment_method']}\n"
            f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_details['delivery_address']}\n"
            f"<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {order_details['total_amount']} ‚ÇΩ\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞</b> \n{items_text}"
        )
    else:
        text = (
            f"üîç <b>–ó–∞–∫–∞–∑ #{order_details['user_order_id']}</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {emoji} {order_details['status']}\n"
            f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {order_details['creation_date']}\n"
            f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {order_details['payment_method']}\n"
            f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_details['delivery_address']}\n"
            f"<b>–í–∞—à–∞ —Å–∫–∏–¥–∫–∞:</b> {order_details['discount']}\n"
            f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <s>{order_details['total_amount']}‚ÇΩ</s> ‚Üí {order_details['total_amount'] - order_details['discount']}‚ÇΩ\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b> \n{items_text}"
        )

    is_delivered = order_details['status'] == "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
    delivery_rated = has_delivery_comment(user_id, order_id)
    products_rated = all(
        has_product_review(user_id, item['product_id']) for item in order_details['items'])  # –¢–µ–ø–µ—Ä—å —Ç—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞

    await callback.message.edit_text(
        text,
        reply_markup=get_delivered_order_detail_keyboard(
            order_id,
            order_details['user_order_id'],
            delivery_rated=delivery_rated,
            products_rated=products_rated
        ),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"
@profile_router.callback_query(F.data.startswith("profile:repeat_order_"))
async def repeat_order(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    order_id = int(callback.data.split("_")[-1])
    add_items_to_cart_from_order(callback.from_user.id, order_id)

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    from handlers.users.cart import show_cart
    await show_cart(callback, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ü–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É"
@profile_router.callback_query(F.data.startswith("profile:rate_delivery_"))
async def rate_delivery(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    order_id = int(callback.data.split("_")[-1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    if has_delivery_comment(user_id, order_id):
        await callback.answer("–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞!", show_alert=True)
        return

    await callback.answer()
    await state.update_data(current_order_id=order_id)
    await state.set_state(ProfileStates.WAITING_FOR_DELIVERY_RATING)
    await callback.message.edit_text(
        "–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_delivery_rating_keyboard(order_id)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@profile_router.callback_query(F.data.startswith("profile:delivery_rating_"),
                               ProfileStates.WAITING_FOR_DELIVERY_RATING)
async def delivery_rating_chosen(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    order_id = int(callback.data.split("_")[2])
    rating = int(callback.data.split("_")[3])
    await state.update_data(delivery_rating=rating)
    await state.set_state(ProfileStates.WAITING_FOR_DELIVERY_COMMENT)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    keyboard = get_comment_keyboard(skip_callback=f"profile:skip_delivery_comment_{order_id}")

    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –¥–æ—Å—Ç–∞–≤–∫–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥):",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
@profile_router.message(ProfileStates.WAITING_FOR_DELIVERY_COMMENT, F.text)
async def delivery_comment_received(message: Message, state: FSMContext, bot: Bot):  # –î–æ–±–∞–≤–∏–ª–∏ bot: Bot
    user_id = message.from_user.id
    username = message.from_user.username
    comment = message.text
    data = await state.get_data()
    order_id = data.get("current_order_id")
    rating = data.get("delivery_rating")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_delivery_comment(user_id=user_id, order_id=order_id, rating=rating, comment=comment)

    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –¥–æ—Å—Ç–∞–≤–∫–µ!")
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_details = get_order_details(order_id)
    if not order_details:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    message_text = (
        f"<b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ –¥–æ—Å—Ç–∞–≤–∫–µ!</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href='tg://user?id={user_id}'>@{username or user_id}</a> (<code>{user_id}</code>)\n"
        f"<b>–ó–∞–∫–∞–∑ ‚Ññ:</b> {order_details['order_id']}\n"
        f"<b>–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {rating} ‚≠ê\n"
    )
    if comment:
        message_text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    try:
        admins = get_staff_by_role(role="–ê–¥–º–∏–Ω")
        admin_ids = [admin['telegram_id'] for admin in admins if admin.get('is_active', 1)]
        for admin_id in admin_ids:
            await bot.send_message(
                admin_id,
                message_text,
                parse_mode="HTML"
            )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_details['user_order_id']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ: {e}")

    await message.answer(
        text="–ü—Ä–æ—Ñ–∏–ª—å",
        reply_markup=get_profile_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ü–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã"
@profile_router.callback_query(F.data.startswith("profile:rate_product_list_"))
async def rate_product_list(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    order_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    await state.update_data(current_order_id=order_id)
    await state.set_state(ProfileStates.WAITING_FOR_PRODUCT_LIST)

    order_details = get_product_info_from_order(order_id)

    if not order_details:
        await callback.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∑–∞–∫–∞–∑–µ."
        )
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ü–µ–Ω–µ–Ω—ã
    products_to_rate = [
        product for product in order_details
        if not has_product_review(user_id, product['product_id'])
    ]

    if not products_to_rate:
        await callback.message.edit_text(
            "–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã.",
            reply_markup=get_profile_keyboard()
        )
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
    keyboard = get_product_list_keyboard(order_id, products_to_rate)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å:",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
@profile_router.callback_query(F.data.startswith("profile:rate_product_"), ProfileStates.WAITING_FOR_PRODUCT_LIST)
async def rate_product(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    order_id = int(callback.data.split("_")[2])
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤ –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ
    if has_product_review(user_id, product_id):
        await callback.answer("–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä!", show_alert=True)
        return

    await state.update_data(current_order_id=order_id, current_product_id=product_id)
    await state.set_state(ProfileStates.WAITING_FOR_PRODUCT_RATING)

    await callback.message.edit_text(
        f"–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–≤–∞—Ä ID {product_id}:",
        reply_markup=get_product_rating_keyboard(order_id, product_id)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞
@profile_router.callback_query(F.data.startswith("profile:product_rating_"),
                               ProfileStates.WAITING_FOR_PRODUCT_RATING)
async def product_rating_chosen(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    order_id = int(callback.data.split("_")[2])
    product_id = int(callback.data.split("_")[3])
    rating = int(callback.data.split("_")[4])
    await state.update_data(product_rating=rating)
    await state.set_state(ProfileStates.WAITING_FOR_PRODUCT_COMMENT)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    keyboard = get_comment_keyboard(skip_callback=f"profile:skip_product_comment_{order_id}_{product_id}")

    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ç–æ–≤–∞—Ä–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥):",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ —Ç–æ–≤–∞—Ä–µ
@profile_router.message(ProfileStates.WAITING_FOR_PRODUCT_COMMENT, F.text)
async def product_comment_received(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.username
    comment = message.text
    data = await state.get_data()
    order_id = data.get("current_order_id")
    product_id = data.get("current_product_id")
    rating = data.get("product_rating")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_product_review(user_id=user_id, product_id=product_id, rating=rating, comment=comment)

    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ!")
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ —Ç–æ–≤–∞—Ä–µ
    order_details = get_order_details(order_id)
    if not order_details:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∑–∞–∫–∞–∑–µ."
        )
        return

    product = next((item for item in order_details['items'] if item['product_id'] == product_id), None)
    if not product:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ."
        )
        return

    message_text = (
        f"<b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ!</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href='tg://user?id={user_id}'>@{username or user_id}</a> (<code>{user_id}</code>)\n"
        f"<b>–ó–∞–∫–∞–∑ ‚Ññ:</b> {order_details['order_id']}\n"
        f"<b>–¢–æ–≤–∞—Ä:</b> {product['name']}\n"
        f"<b>–û—Ü–µ–Ω–∫–∞:</b> {rating} ‚≠ê\n"
    )
    if comment:
        message_text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    try:
        admins = get_staff_by_role(role="–ê–¥–º–∏–Ω")
        admin_ids = [admin['telegram_id'] for admin in admins if admin.get('is_active', 1)]
        for admin_id in admin_ids:
            await bot.send_message(
                admin_id,
                message_text,
                parse_mode="HTML"
            )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ –æ —Ç–æ–≤–∞—Ä–µ {product['name']} (ID {product_id})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–µ –æ —Ç–æ–≤–∞—Ä–µ: {e}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    order_details = get_product_info_from_order(order_id)
    if not order_details:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∑–∞–∫–∞–∑–µ."
        )
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ü–µ–Ω–µ–Ω—ã
    products_to_rate = [
        product for product in order_details
        if not has_product_review(user_id, product['product_id'])
    ]

    if not products_to_rate:
        await message.answer(
            "–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã.",
            reply_markup=get_profile_keyboard()
        )
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    keyboard = get_product_list_keyboard(order_id, products_to_rate)
    await state.set_state(ProfileStates.WAITING_FOR_PRODUCT_LIST)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å:",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
@profile_router.callback_query(F.data.startswith("profile:skip_delivery_comment_"),
                               ProfileStates.WAITING_FOR_DELIVERY_COMMENT)
async def skip_delivery_comment(callback: CallbackQuery, state: FSMContext, bot: Bot):  # –î–æ–±–∞–≤–∏–ª–∏ bot: Bot
    await callback.answer("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ.")
    user_id = callback.from_user.id
    username = callback.from_user.username  # –ü–æ–ª—É—á–∞–µ–º username
    data = await state.get_data()
    order_id = data.get("current_order_id")
    rating = data.get("delivery_rating")  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ state

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç, —á—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    add_delivery_comment(user_id=user_id, order_id=order_id, rating=rating, comment="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–ø—É—â–µ–Ω")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_details = get_order_details(order_id)
    if not order_details:
        await callback.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    message_text = (
        f"<b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ –¥–æ—Å—Ç–∞–≤–∫–µ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–ø—É—â–µ–Ω)!</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href='tg://user?id={user_id}'>@{username or user_id}</a> (<code>{user_id}</code>)\n"
        f"<b>–ó–∞–∫–∞–∑ ‚Ññ:</b> {order_details['order_id']}\n"
        f"<b>–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {rating} ‚≠ê\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>–ü—Ä–æ–ø—É—â–µ–Ω</i>\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    try:
        admins = get_staff_by_role(role="–ê–¥–º–∏–Ω")
        admin_ids = [admin['telegram_id'] for admin in admins if admin.get('is_active', 1)]
        for admin_id in admin_ids:
            await bot.send_message(
                admin_id,
                message_text,
                parse_mode="HTML"
            )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ –æ—Ç–∑—ã–≤–∞ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_details['user_order_id']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–ø—É—Å–∫–µ –æ—Ç–∑—ã–≤–∞ –æ –¥–æ—Å—Ç–∞–≤–∫–µ: {e}")

    await state.clear()

    await callback.message.edit_text(
        text="–ü—Ä–æ—Ñ–∏–ª—å",
        reply_markup=get_profile_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ —Ç–æ–≤–∞—Ä–µ
@profile_router.callback_query(F.data.startswith("profile:skip_product_comment_"),
                               ProfileStates.WAITING_FOR_PRODUCT_COMMENT)
async def skip_product_comment(callback: CallbackQuery, state: FSMContext, bot: Bot):  # –î–æ–±–∞–≤–∏–ª–∏ bot: Bot
    await callback.answer("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ —Ç–æ–≤–∞—Ä–µ.")
    user_id = callback.from_user.id
    username = callback.from_user.username  # –ü–æ–ª—É—á–∞–µ–º username
    data = await state.get_data()
    order_id = data.get("current_order_id")
    product_id = data.get("current_product_id")
    rating = data.get("product_rating")  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ state

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç, —á—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    add_product_review(user_id=user_id, product_id=product_id, rating=rating, comment="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–ø—É—â–µ–Ω")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ —Ç–æ–≤–∞—Ä–µ
    order_details = get_order_details(order_id)
    if not order_details:
        await callback.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∑–∞–∫–∞–∑–µ."
        )
        return

    product = next((item for item in order_details['items'] if item['product_id'] == product_id), None)
    if not product:
        await callback.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    message_text = (
        f"<b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–ø—É—â–µ–Ω)!</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href='tg://user?id={user_id}'>@{username or user_id}</a> (<code>{user_id}</code>)\n"
        f"<b>–ó–∞–∫–∞–∑ ‚Ññ:</b> {order_details['order_id']}\n"
        f"<b>–¢–æ–≤–∞—Ä:</b> {product['name']}\n"
        f"<b>–û—Ü–µ–Ω–∫–∞:</b> {rating} ‚≠ê\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>–ü—Ä–æ–ø—É—â–µ–Ω</i>\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    try:
        admins = get_staff_by_role(role="–ê–¥–º–∏–Ω")
        admin_ids = [admin['telegram_id'] for admin in admins if admin.get('is_active', 1)]
        for admin_id in admin_ids:
            await bot.send_message(
                admin_id,
                message_text,
                parse_mode="HTML"
            )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–≤–∞—Ä–µ {product['name']} (ID {product_id})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–ø—É—Å–∫–µ –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–≤–∞—Ä–µ: {e}")

    order_details = get_product_info_from_order(order_id)
    if not order_details:
        await callback.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∑–∞–∫–∞–∑–µ."
        )
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ü–µ–Ω–µ–Ω—ã
    products_to_rate = [
        product for product in order_details
        if not has_product_review(user_id, product['product_id'])
    ]

    if not products_to_rate:
        await callback.message.edit_text(
            text="–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã.",
            reply_markup=get_profile_keyboard()
        )
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    keyboard = get_product_list_keyboard(order_id, products_to_rate)
    await state.set_state(ProfileStates.WAITING_FOR_PRODUCT_LIST)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å:",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
@profile_router.callback_query(F.data.startswith("profile:support_"))
async def contact_support(callback: CallbackQuery):
    await callback.answer()

    order_id = int(callback.data.split("_")[-1])

    await callback.message.edit_text(
        "üìû *–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π*\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É #{order_id}, "
        "–≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        reply_markup=get_support_keyboard(order_id),
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@profile_router.callback_query(F.data == "profile:back_to_profile")
async def back_to_profile(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await show_profile_menu(callback.message, state)


@profile_router.callback_query(F.data == "profile:back_to_orders")
async def back_to_orders(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    data = await state.get_data()
    from_tracking = data.get('from_tracking', True)

    if from_tracking:
        await track_orders(callback, state)
    else:
        await order_history(callback, state)


@profile_router.callback_query(F.data.startswith("profile:back_to_order_"))
async def back_to_order(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    order_id = int(callback.data.split("_")[-1])
    await state.update_data(current_order_id=order_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º, –∏–∑ –∫–∞–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω –∑–∞–∫–∞–∑
    data = await state.get_data()
    if data.get('from_tracking', True):
        await show_tracked_order(callback, state)
    else:
        await show_history_order(callback, state)


@profile_router.callback_query(F.data == "profile:back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.answer()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard
    )
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()


async def send_order_status_notification(bot, user_id, order_id, new_status):
    should_notify = should_send_notification(user_id)

    if should_notify:
        emoji = get_status_emoji(new_status)
        await bot.send_message(
            user_id,
            f"üì¢ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ*\n\n"
            f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {emoji} *{new_status}*",
            parse_mode="Markdown"
        )
