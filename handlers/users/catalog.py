import asyncio
import logging

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from database.users import favorites_db
from database.users.favorites_db import add_product_to_favorites
from keyboards.users.keyboards import main_menu_keyboard
from keyboards.users.inline import (
    get_categories_keyboard,
    get_product_names_keyboard,
    get_product_details_keyboard, get_flavors_keyboard, get_flavor_actions_keyboard
)
from database.users.warehouse_connection import (
    fetch_categories,
    fetch_products_by_category_and_product_name,
    create_connection_warehouse, get_available_product_names, close_connection_warehouse,
    get_products_by_category_and_name, get_product_by_id
)
from database.users.database import add_to_cart
from states.catalog_state import CatalogState
import os

from utils.catalog_mapping import catalog_mapping

router = Router()

logger = logging.getLogger(__name__)


@router.message(F.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
async def catalog_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    await state.set_state(CatalogState.browsing_categories)
    categories = fetch_categories()
    if categories:
        markup = get_categories_keyboard(categories)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")


@router.callback_query(F.data == "start_catalog_browsing")
async def start_catalog_browsing_callback(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ (–∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ–Ω—é)."""
    await state.set_state(CatalogState.browsing_categories)
    categories = fetch_categories()
    if categories:
        markup = get_categories_keyboard(categories)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)
    else:
        await query.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.",
                                      reply_markup=None)

    await query.answer()


@router.callback_query(F.data.startswith("page:category:"))
async def category_pagination_handler(query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    page = int(query.data.split(":")[2])
    categories = fetch_categories()
    markup = get_categories_keyboard(categories, current_page=page)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)
    await query.answer()


@router.callback_query(F.data.startswith("page:"))
async def pagination_handler(query: CallbackQuery):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    parts = query.data.split(":")

    if parts[1] == "category":
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        page = int(parts[2])
        categories = fetch_categories()
        markup = get_categories_keyboard(categories, current_page=page)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)

    elif parts[1].startswith("product_name"):
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        cat_id = parts[2]
        page = int(parts[3])

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
        category_name = catalog_mapping.get_category_name(cat_id)
        if not category_name:
            await query.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        conn = create_connection_warehouse()
        try:
            product_names = get_available_product_names(conn, category_name)
            markup = get_product_names_keyboard(product_names, category_name, current_page=page)
            await query.message.edit_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:",
                reply_markup=markup
            )
        finally:
            close_connection_warehouse(conn)

    await query.answer()


@router.callback_query(F.data.startswith("category:"))
async def category_callback_handler(query: CallbackQuery, state: FSMContext):
    cat_id = query.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
    category_name = catalog_mapping.get_category_name(cat_id)
    if not category_name:
        await query.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await state.update_data(selected_category=category_name)
    await state.set_state(CatalogState.browsing_products)

    conn = create_connection_warehouse()
    try:
        product_names = get_available_product_names(conn, category_name)

        if product_names:
            markup = get_product_names_keyboard(product_names, category_name)
            await query.message.edit_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:",
                reply_markup=markup
            )
        else:
            await query.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω–∞–ª–∏—á–∏–∏.")
    finally:
        close_connection_warehouse(conn)

    await query.answer()


@router.callback_query(F.data.startswith("page:product_name:"))
async def product_name_pagination_handler(query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    parts = query.data.split(":")

    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "page:product_name:CATEGORY_NAME:PAGE_NUMBER"
    if len(parts) >= 4:
        category_name = parts[2]
        page = int(parts[3])
    else:
        await query.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    conn = create_connection_warehouse()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        product_names = get_available_product_names(conn, category_name)

        markup = get_product_names_keyboard(product_names, category_name, current_page=page)
        await query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä::",
            reply_markup=markup
        )
    finally:
        close_connection_warehouse(conn)

    await query.answer()


@router.callback_query(F.data.startswith("product_name:"))
async def show_flavors_handler(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–±—â–∏–º —Ñ–æ—Ç–æ."""
    parts = query.data.split(":")
    cat_id = parts[1]
    prod_id = parts[2]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ ID
    category_name = catalog_mapping.get_category_name(cat_id)
    product_info = catalog_mapping.get_product_info(prod_id)

    if not category_name or not product_info:
        await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    _, product_name = product_info

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        selected_product_name=product_name,
        original_message_id=query.message.message_id,
        category_name=category_name
    )
    await state.set_state(CatalogState.viewing_product)

    await display_flavors(query, state, category_name, product_name)
    await query.answer()


async def display_flavors(query_or_message, state: FSMContext, category_name: str, product_name: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    conn = create_connection_warehouse()
    message = query_or_message if isinstance(query_or_message, Message) else query_or_message.message

    try:
        products = get_products_by_category_and_name(conn, category_name, product_name)

        available_products = [p for p in products if p[5] > 0]

        if available_products:
            markup = get_flavors_keyboard(available_products, category_name, product_name)
            flavor_image_path = f"/root/ZK/IMAGES/{category_name}_{product_name}.jpg"
            # flavor_image_path = f"/root/01/IMAGES/{category_name}_{product_name}.jpg"

            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
            data = await state.get_data()
            photo_message_id = data.get("photo_message_id")
            if photo_message_id and isinstance(query_or_message,
                                               CallbackQuery):  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await query_or_message.bot.delete_message(message.chat.id, photo_message_id)
                    await state.update_data(photo_message_id=None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                except TelegramBadRequest as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ ({photo_message_id}): {e}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ç–æ ({photo_message_id}): {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if os.path.isfile(flavor_image_path):
                photo = FSInputFile(flavor_image_path)
                try:
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ *—Ç–µ–∫—Å—Ç–æ–≤–æ–µ* —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
                    if not photo_message_id:  # –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –Ω–µ –±—ã–ª–æ —Ñ–æ—Ç–æ
                        await message.delete()
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ: {e}")

                new_message = await message.answer_photo(
                    photo=photo,
                    caption=f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã –¥–ª—è {product_name}:",
                    reply_markup=markup
                )
                await state.update_data(photo_message_id=new_message.message_id)
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
                try:
                    await message.edit_text(
                        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã –¥–ª—è {product_name}:",
                        reply_markup=markup
                    )
                except TelegramBadRequest:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ã–ª–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —É–¥–∞–ª–∏–ª–∏)
                    await message.answer(
                        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã –¥–ª—è {product_name}:",
                        reply_markup=markup
                    )

        else:
            await message.edit_text(
                f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}', –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{product_name}' –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
            )
    finally:
        close_connection_warehouse(conn)


@router.callback_query(F.data.startswith("select_flavor:"))
async def select_flavor_handler(query: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∫—É—Å–∞ –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    product_id = int(query.data.split(":")[1])

    await state.update_data(selected_product_id=product_id)

    product_details = get_product_by_id(product_id)
    state_data = await state.get_data()
    category_name = state_data.get("category_name")
    product_name = state_data.get("selected_product_name")

    if product_details and category_name and product_name:
        _, category, _, product_full_name, flavor, price, description, quantity = product_details[
                                                                                  :8]

        text = f"<b>{product_name}</b>\n\n"
        text += f"–í—ã–±—Ä–∞–Ω –≤–∫—É—Å: {flavor}\n"
        text += f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n"
        if description != "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ":
            text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"

        markup = get_flavor_actions_keyboard(product_id, category_name, product_name)

        photo_message_id = state_data.get("photo_message_id")
        try:
            if photo_message_id:
                await query.bot.edit_message_caption(
                    chat_id=query.message.chat.id,
                    message_id=photo_message_id,
                    caption=text,
                    reply_markup=markup,
                    parse_mode="HTML"
                )
            else:
                await query.message.edit_text(
                    text=text,
                    reply_markup=markup,
                    parse_mode="HTML"
                )
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∫—É—Å–∞: {e}")
            await query.message.answer(text, reply_markup=markup, parse_mode="HTML")

    else:
        await query.answer("–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã.", show_alert=True)

    await query.answer()


@router.callback_query(F.data.startswith("flavor_action:add_cart:"))
async def add_selected_flavor_to_cart(query: CallbackQuery):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∫—É—Å –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    product_id = int(query.data.split(":")[2])
    user_id = query.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    result = add_to_cart(user_id, product_id, 1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —à—Ç

    if result == 'added':
        await query.answer(text='‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!', show_alert=True)
    elif result == 'exists':
        await query.answer(text='‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–∑–∏–Ω–µ.', show_alert=True)
    else: # result is False or None
        await query.answer(text='‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É!', show_alert=True)


@router.callback_query(F.data.startswith("flavor_action:add_fav:"))
async def add_selected_flavor_to_favorites(query: CallbackQuery):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∫—É—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."""
    product_id = int(query.data.split(":")[2])
    user_id = query.from_user.id

    is_favorite = await asyncio.to_thread(favorites_db.is_product_in_favorites, user_id, product_id)

    if is_favorite:
        await query.answer(text='–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!', show_alert=True)
    else:
        result = add_product_to_favorites(user_id, product_id)

        if result:
            await query.answer(text='‚ù§Ô∏è –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!', show_alert=True)
        else:
            await query.answer(text='‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!', show_alert=True)


@router.callback_query(F.data.startswith("flavor_action:back_flavors:"))
async def back_to_flavors_selection(query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –≤–∫—É—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
    _, _, cat_id, prod_id = query.data.split(":")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ ID
    category_name = catalog_mapping.get_category_name(cat_id)
    product_info = catalog_mapping.get_product_info(prod_id)

    if not category_name or not product_info:
        await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    _, product_name = product_info

    await display_flavors(query, state, category_name, product_name)
    await query.answer()


@router.callback_query(F.data.startswith("product_nav:"))
async def product_navigation_handler(query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    _, cat_id, prod_id, idx = query.data.split(":")
    idx = int(idx)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ ID
    category_name = catalog_mapping.get_category_name(cat_id)
    product_info = catalog_mapping.get_product_info(prod_id)

    if not category_name or not product_info:
        await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    _, product_name = product_info

    all_products = fetch_products_by_category_and_product_name(category_name, product_name)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 0
    products = [product for product in all_products if product[5] > 0]

    if products and 0 <= idx < len(products):
        await show_product_details(query.message, products, idx, category_name, product_name)
    await query.answer()


@router.callback_query(F.data.startswith("back_to_products:"))
async def back_to_products_handler(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    _, cat_id, prod_id = query.data.split(":")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ ID
    category_name = catalog_mapping.get_category_name(cat_id)
    if not category_name:
        await query.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await state.set_state(CatalogState.browsing_products)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    photo_message_id = data.get("photo_message_id")
    original_message_id = data.get("original_message_id")

    # –ï—Å–ª–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if photo_message_id:
        try:
            await query.bot.delete_message(
                chat_id=query.message.chat.id,
                message_id=photo_message_id
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ: {e}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    conn = create_connection_warehouse()
    try:
        product_names = get_available_product_names(conn, category_name)

        if product_names:
            markup = get_product_names_keyboard(product_names, category_name)

            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—à–µ–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
            if query.message.message_id == photo_message_id:
                try:
                    await query.bot.edit_message_text(
                        chat_id=query.message.chat.id,
                        message_id=original_message_id,
                        text=f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:",
                        reply_markup=markup
                    )
                    await query.answer()
                    return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            await query.message.edit_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:",
                reply_markup=markup
            )
        else:
            await query.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
    finally:
        close_connection_warehouse(conn)

    await query.answer()


@router.callback_query(F.data == "cancel_catalog")
async def cancel_catalog_callback_handler(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞' –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    photo_message_id = data.get("photo_message_id")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if photo_message_id:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
            if query.message.message_id == photo_message_id:
                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.delete()
                await query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
                await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_keyboard)
                await query.answer()
                return
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                await query.bot.delete_message(
                    chat_id=query.message.chat.id,
                    message_id=photo_message_id
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ: {e}")

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await query.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=None)
        await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_keyboard)
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_keyboard)

    await query.answer()


@router.callback_query(F.data == "cancel_category_selection")
async def cancel_category_selection_callback_handler(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞' –≤ –º–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    photo_message_id = data.get("photo_message_id")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(CatalogState.browsing_categories)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if photo_message_id:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
            if query.message.message_id == photo_message_id:
                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.delete()

                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                categories = fetch_categories()
                if categories:
                    markup = get_categories_keyboard(categories)
                    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)
                else:
                    await query.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")

                await query.answer()
                return
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                await query.bot.delete_message(
                    chat_id=query.message.chat.id,
                    message_id=photo_message_id
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ: {e}")

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    categories = fetch_categories()
    if categories:
        markup = get_categories_keyboard(categories)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)
    else:
        await query.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")

    await query.answer()


async def show_product_details(message, products, idx, category_name, product_name):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    if not products or idx >= len(products):
        await message.edit_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    product = products[idx]
    product_full_name, flavor, price, product_id, description, quantity, image_path = product

    product_text = (
        f"<b>{product_full_name}</b>\n\n"
        f"<b>–≤–∫—É—Å:</b> {flavor}\n"
        f"<b>–¶–µ–Ω–∞:</b> {price} —Ä—É–±.\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    )

    markup = get_product_details_keyboard(
        product_id,
        category_name,
        product_name,
        current_idx=idx,
        total_products=len(products)
    )

    try:
        image_path = 'C:\\Users\\Iskander\\PycharmProjects\\ZK\\database\\users\\' + image_path
        if image_path and os.path.isfile(image_path):
            photo = FSInputFile(image_path)
            if hasattr(message, 'message_id'):
                await message.answer_photo(photo=photo, caption=product_text, reply_markup=markup, parse_mode="HTML")
            else:
                await message.delete()
                await message.answer_photo(photo=photo, caption=product_text, reply_markup=markup, parse_mode="HTML")
        else:
            logger.info(f"Image not found: {image_path}, exists: {os.path.isfile(image_path) if image_path else False}")
            if hasattr(message, 'edit_text'):
                await message.edit_text(product_text, reply_markup=markup, parse_mode="HTML")
            else:
                await message.answer(product_text, reply_markup=markup, parse_mode="HTML")
    except Exception as e:
        logger.info(f"Error displaying product: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
