import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
import os
from database.users import database as db
from keyboards.users.inline import create_cart_keyboard
from database.users.warehouse_connection import get_product_stock_quantity
from states.cart_state import CartState

router = Router()

logger = logging.getLogger(__name__)


@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def cart_command(message: Message, state: FSMContext):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /cart")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã
    await state.set_state(CartState.viewing_cart)
    await state.update_data(current_item_index=0, last_message_id=None, last_product_id=None)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    cart_data = await show_cart_item(message.from_user.id)

    if cart_data["is_empty"]:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!")
        await state.clear()
    else:
        if cart_data["photo"] and os.path.exists(cart_data["photo"]):
            with open(cart_data["photo"], 'rb') as photo:
                sent_message = await message.answer_photo(
                    photo=photo,
                    caption=cart_data["text"],
                    reply_markup=cart_data["reply_markup"],
                    parse_mode="HTML"
                )
                await state.update_data(last_message_id=sent_message.message_id,
                                        last_product_id=cart_data.get("product_id"))
        else:
            sent_message = await message.answer(
                text=cart_data["text"],
                reply_markup=cart_data["reply_markup"],
                parse_mode="HTML"
            )
            await state.update_data(last_message_id=sent_message.message_id,
                                    last_product_id=cart_data.get("product_id"))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ—Ä–∑–∏–Ω—ã —á–µ—Ä–µ–∑ callback
@router.callback_query(F.data == "show_cart")
async def show_cart(callback: CallbackQuery, state: FSMContext):
    # logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    await callback.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã
    await state.set_state(CartState.viewing_cart)
    await state.update_data(current_item_index=0, last_message_id=None, last_product_id=None)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    cart_data = await show_cart_item(callback.from_user.id)

    if cart_data["is_empty"]:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!")
        await state.clear()
    else:
        if cart_data["photo"] and os.path.exists(cart_data["photo"]):
            with open(cart_data["photo"], 'rb') as photo:
                sent_message = await callback.message.answer_photo(
                    photo=photo,
                    caption=cart_data["text"],
                    reply_markup=cart_data["reply_markup"],
                    parse_mode="HTML"
                )
                await state.update_data(last_message_id=sent_message.message_id,
                                        last_product_id=cart_data.get("product_id"))
        else:
            sent_message = await callback.message.answer(
                text=cart_data["text"],
                reply_markup=cart_data["reply_markup"],
                parse_mode="HTML"
            )
            await state.update_data(last_message_id=sent_message.message_id,
                                    last_product_id=cart_data.get("product_id"))


# –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
async def show_cart_item(user_id, item_index=0):
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω–¥–µ–∫—Å {item_index}")
    cart_items = db.get_cart_items(user_id)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã: {len(cart_items) if cart_items else 0}")

    if not cart_items:
        return {
            "text": "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            "photo": None,
            "reply_markup": None,
            "is_empty": True
        }

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å–ø–∏—Å–∫–∞
    item_index = max(0, min(item_index, len(cart_items) - 1))
    current_item = cart_items[item_index]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product_id = current_item['product_id']
    quantity = current_item['quantity']
    price = current_item['price']
    total_price = current_item['total_price']

    # –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã
    cart_total = sum(item['total_price'] for item in cart_items)

    # –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
    stock_quantity = get_product_stock_quantity(product_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
    price_formatted = format_price(price)
    total_item_formatted = format_price(total_price)
    cart_total_formatted = format_price(cart_total)

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"<b>‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ  –¢–æ–≤–∞—Ä {item_index + 1} –∏–∑ {len(cart_items)}‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ</b>\n\n"
        f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã:</b> {cart_total_formatted}‚ÇΩ\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ: {current_item['category']} {current_item['product_name']}</b>\n"
        f"<b>–í–∫—É—Å:</b> {current_item['flavor']}\n\n"
        f"<b>–¶–µ–Ω–∞:</b> {price_formatted}‚ÇΩ\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} √ó {price_formatted}‚ÇΩ = {total_item_formatted}‚ÇΩ\n\n"
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    photo_path = os.path.join('database', 'images', f"{product_id}.jpg")
    # logger.info(f"–ü—É—Ç—å –∫ —Ñ–æ—Ç–æ: {photo_path}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(photo_path)}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    keyboard = create_cart_keyboard(
        current_quantity=quantity,
        current_index=item_index,
        total_items=len(cart_items),
        stock_quantity=stock_quantity,
        product_id=product_id
    )

    return {
        "text": message_text,
        "photo": photo_path if os.path.exists(photo_path) else None,
        "reply_markup": keyboard,
        "is_empty": False,
        "current_index": item_index,
        "product_id": product_id  # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    }


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
def format_price(price):
    if isinstance(price, float) and price != int(price):
        # –î–ª—è –¥—Ä–æ–±–Ω—ã—Ö —Ü–µ–Ω
        return f"{int(price):,}".replace(",", " ") + f",{int((price % 1) * 100):02d}"
    else:
        # –î–ª—è —Ü–µ–ª—ã—Ö —Ü–µ–Ω
        return f"{int(price):,}".replace(",", " ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã
@router.callback_query(F.data.startswith("cart:"))
async def process_cart_callback(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –∫–æ—Ä–∑–∏–Ω—ã: {callback.data}")
    # await callback.answer()

    action = callback.data.split(":")
    action_type = action[1]
    product_id = int(action[2]) if len(action) > 2 else None

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_index = state_data.get("current_item_index", 0)

    # –ù–∞—á–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    if action_type == "next":
        # –°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä
        current_index += 1
        await state.update_data(current_item_index=current_index)

    elif action_type == "prev":
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–≤–∞—Ä
        current_index = max(0, current_index - 1)
        await state.update_data(current_item_index=current_index)

    elif action_type == "inc" and product_id:
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        cart_items = db.get_cart_items(callback.from_user.id)
        for item in cart_items:
            if item['product_id'] == product_id:
                stock_quantity = get_product_stock_quantity(product_id)

                db.update_cart_item_quantity(
                    callback.from_user.id,
                    product_id,
                    item['quantity'] + 1
                )
                await callback.answer()
                logger.info(f"–£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {product_id} –¥–æ {item['quantity'] + 1}")
                break

    elif action_type == "dec" and product_id:
        # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        cart_items = db.get_cart_items(callback.from_user.id)
        for item in cart_items:
            if item['product_id'] == product_id:
                if item['quantity'] > 1:
                    # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 1, —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1
                    db.update_cart_item_quantity(
                        callback.from_user.id,
                        product_id,
                        item['quantity'] - 1
                    )
                    logger.info(f"–£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {product_id} –¥–æ {item['quantity'] - 1}")
                else:
                    # –ï—Å–ª–∏ 1, —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
                    db.update_cart_item_quantity(callback.from_user.id, product_id, 0)
                    logger.info(f"–£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä {product_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                break

    elif action_type == "del" and product_id:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        db.update_cart_item_quantity(callback.from_user.id, product_id, 0)
        logger.info(f"–£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä {product_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_items = db.get_cart_items(callback.from_user.id)
        if not cart_items:
            try:
                # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                await callback.message.edit_caption(caption="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!")
            except Exception as e:
                try:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
                    await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!")
                except Exception:
                    # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!")
            await state.clear()
            return

    elif action_type == "main_menu":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=None  # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )

            return
        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")

    elif action_type == "catalog":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥
        try:
            from handlers.users.catalog import catalog_handler

            await callback.message.delete()

            await catalog_handler(callback.message, state)
            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∫–∞—Ç–∞–ª–æ–≥: {e}")

    elif action_type == "checkout":
        # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            from handlers.users.order import start_checkout
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            await start_checkout(callback, state)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    cart_data = await show_cart_item(callback.from_user.id, current_index)

    if cart_data["is_empty"]:
        # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
        try:
            await callback.message.edit_caption(caption="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!")
        except Exception:
            await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!")
        await state.clear()
        return

    # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    try:
        # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ —Ñ–æ—Ç–æ
        await callback.message.edit_caption(
            caption=cart_data["text"],
            reply_markup=cart_data["reply_markup"],
            parse_mode="HTML"
        )
    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ caption: {e}")
        try:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                text=cart_data["text"],
                reply_markup=cart_data["reply_markup"],
                parse_mode="HTML"
            )
        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if cart_data["photo"] and os.path.exists(cart_data["photo"]):
                with open(cart_data["photo"], 'rb') as photo:
                    await callback.message.answer_photo(
                        photo=photo,
                        caption=cart_data["text"],
                        reply_markup=cart_data["reply_markup"],
                        parse_mode="HTML"
                    )
            else:
                await callback.message.answer(
                    text=cart_data["text"],
                    reply_markup=cart_data["reply_markup"],
                    parse_mode="HTML"
                )
